#!/usr/bin/env node

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/functions.js
var require_functions = __commonJS({
  "node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/functions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.systemMessage = exports2.assistantMessage = exports2.userMessage = void 0;
    var userMessage = (content) => {
      return {
        role: "user",
        content
      };
    };
    exports2.userMessage = userMessage;
    var assistantMessage = (content) => {
      return {
        role: "assistant",
        content
      };
    };
    exports2.assistantMessage = assistantMessage;
    var systemMessage = (content) => {
      return {
        role: "system",
        content
      };
    };
    exports2.systemMessage = systemMessage;
  }
});

// node_modules/.pnpm/pino-std-serializers@7.0.0/node_modules/pino-std-serializers/lib/err-helpers.js
var require_err_helpers = __commonJS({
  "node_modules/.pnpm/pino-std-serializers@7.0.0/node_modules/pino-std-serializers/lib/err-helpers.js"(exports2, module2) {
    "use strict";
    var isErrorLike = (err) => {
      return err && typeof err.message === "string";
    };
    var getErrorCause = (err) => {
      if (!err)
        return;
      const cause = err.cause;
      if (typeof cause === "function") {
        const causeResult = err.cause();
        return isErrorLike(causeResult) ? causeResult : void 0;
      } else {
        return isErrorLike(cause) ? cause : void 0;
      }
    };
    var _stackWithCauses = (err, seen) => {
      if (!isErrorLike(err))
        return "";
      const stack = err.stack || "";
      if (seen.has(err)) {
        return stack + "\ncauses have become circular...";
      }
      const cause = getErrorCause(err);
      if (cause) {
        seen.add(err);
        return stack + "\ncaused by: " + _stackWithCauses(cause, seen);
      } else {
        return stack;
      }
    };
    var stackWithCauses = (err) => _stackWithCauses(err, /* @__PURE__ */ new Set());
    var _messageWithCauses = (err, seen, skip) => {
      if (!isErrorLike(err))
        return "";
      const message = skip ? "" : err.message || "";
      if (seen.has(err)) {
        return message + ": ...";
      }
      const cause = getErrorCause(err);
      if (cause) {
        seen.add(err);
        const skipIfVErrorStyleCause = typeof err.cause === "function";
        return message + (skipIfVErrorStyleCause ? "" : ": ") + _messageWithCauses(cause, seen, skipIfVErrorStyleCause);
      } else {
        return message;
      }
    };
    var messageWithCauses = (err) => _messageWithCauses(err, /* @__PURE__ */ new Set());
    module2.exports = {
      isErrorLike,
      getErrorCause,
      stackWithCauses,
      messageWithCauses
    };
  }
});

// node_modules/.pnpm/pino-std-serializers@7.0.0/node_modules/pino-std-serializers/lib/err-proto.js
var require_err_proto = __commonJS({
  "node_modules/.pnpm/pino-std-serializers@7.0.0/node_modules/pino-std-serializers/lib/err-proto.js"(exports2, module2) {
    "use strict";
    var seen = Symbol("circular-ref-tag");
    var rawSymbol = Symbol("pino-raw-err-ref");
    var pinoErrProto = Object.create({}, {
      type: {
        enumerable: true,
        writable: true,
        value: void 0
      },
      message: {
        enumerable: true,
        writable: true,
        value: void 0
      },
      stack: {
        enumerable: true,
        writable: true,
        value: void 0
      },
      aggregateErrors: {
        enumerable: true,
        writable: true,
        value: void 0
      },
      raw: {
        enumerable: false,
        get: function() {
          return this[rawSymbol];
        },
        set: function(val) {
          this[rawSymbol] = val;
        }
      }
    });
    Object.defineProperty(pinoErrProto, rawSymbol, {
      writable: true,
      value: {}
    });
    module2.exports = {
      pinoErrProto,
      pinoErrorSymbols: {
        seen,
        rawSymbol
      }
    };
  }
});

// node_modules/.pnpm/pino-std-serializers@7.0.0/node_modules/pino-std-serializers/lib/err.js
var require_err = __commonJS({
  "node_modules/.pnpm/pino-std-serializers@7.0.0/node_modules/pino-std-serializers/lib/err.js"(exports2, module2) {
    "use strict";
    module2.exports = errSerializer;
    var { messageWithCauses, stackWithCauses, isErrorLike } = require_err_helpers();
    var { pinoErrProto, pinoErrorSymbols } = require_err_proto();
    var { seen } = pinoErrorSymbols;
    var { toString } = Object.prototype;
    function errSerializer(err) {
      if (!isErrorLike(err)) {
        return err;
      }
      err[seen] = void 0;
      const _err = Object.create(pinoErrProto);
      _err.type = toString.call(err.constructor) === "[object Function]" ? err.constructor.name : err.name;
      _err.message = messageWithCauses(err);
      _err.stack = stackWithCauses(err);
      if (Array.isArray(err.errors)) {
        _err.aggregateErrors = err.errors.map((err2) => errSerializer(err2));
      }
      for (const key in err) {
        if (_err[key] === void 0) {
          const val = err[key];
          if (isErrorLike(val)) {
            if (key !== "cause" && !Object.prototype.hasOwnProperty.call(val, seen)) {
              _err[key] = errSerializer(val);
            }
          } else {
            _err[key] = val;
          }
        }
      }
      delete err[seen];
      _err.raw = err;
      return _err;
    }
  }
});

// node_modules/.pnpm/pino-std-serializers@7.0.0/node_modules/pino-std-serializers/lib/err-with-cause.js
var require_err_with_cause = __commonJS({
  "node_modules/.pnpm/pino-std-serializers@7.0.0/node_modules/pino-std-serializers/lib/err-with-cause.js"(exports2, module2) {
    "use strict";
    module2.exports = errWithCauseSerializer;
    var { isErrorLike } = require_err_helpers();
    var { pinoErrProto, pinoErrorSymbols } = require_err_proto();
    var { seen } = pinoErrorSymbols;
    var { toString } = Object.prototype;
    function errWithCauseSerializer(err) {
      if (!isErrorLike(err)) {
        return err;
      }
      err[seen] = void 0;
      const _err = Object.create(pinoErrProto);
      _err.type = toString.call(err.constructor) === "[object Function]" ? err.constructor.name : err.name;
      _err.message = err.message;
      _err.stack = err.stack;
      if (Array.isArray(err.errors)) {
        _err.aggregateErrors = err.errors.map((err2) => errWithCauseSerializer(err2));
      }
      if (isErrorLike(err.cause) && !Object.prototype.hasOwnProperty.call(err.cause, seen)) {
        _err.cause = errWithCauseSerializer(err.cause);
      }
      for (const key in err) {
        if (_err[key] === void 0) {
          const val = err[key];
          if (isErrorLike(val)) {
            if (!Object.prototype.hasOwnProperty.call(val, seen)) {
              _err[key] = errWithCauseSerializer(val);
            }
          } else {
            _err[key] = val;
          }
        }
      }
      delete err[seen];
      _err.raw = err;
      return _err;
    }
  }
});

// node_modules/.pnpm/pino-std-serializers@7.0.0/node_modules/pino-std-serializers/lib/req.js
var require_req = __commonJS({
  "node_modules/.pnpm/pino-std-serializers@7.0.0/node_modules/pino-std-serializers/lib/req.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      mapHttpRequest,
      reqSerializer
    };
    var rawSymbol = Symbol("pino-raw-req-ref");
    var pinoReqProto = Object.create({}, {
      id: {
        enumerable: true,
        writable: true,
        value: ""
      },
      method: {
        enumerable: true,
        writable: true,
        value: ""
      },
      url: {
        enumerable: true,
        writable: true,
        value: ""
      },
      query: {
        enumerable: true,
        writable: true,
        value: ""
      },
      params: {
        enumerable: true,
        writable: true,
        value: ""
      },
      headers: {
        enumerable: true,
        writable: true,
        value: {}
      },
      remoteAddress: {
        enumerable: true,
        writable: true,
        value: ""
      },
      remotePort: {
        enumerable: true,
        writable: true,
        value: ""
      },
      raw: {
        enumerable: false,
        get: function() {
          return this[rawSymbol];
        },
        set: function(val) {
          this[rawSymbol] = val;
        }
      }
    });
    Object.defineProperty(pinoReqProto, rawSymbol, {
      writable: true,
      value: {}
    });
    function reqSerializer(req) {
      const connection = req.info || req.socket;
      const _req = Object.create(pinoReqProto);
      _req.id = typeof req.id === "function" ? req.id() : req.id || (req.info ? req.info.id : void 0);
      _req.method = req.method;
      if (req.originalUrl) {
        _req.url = req.originalUrl;
      } else {
        const path5 = req.path;
        _req.url = typeof path5 === "string" ? path5 : req.url ? req.url.path || req.url : void 0;
      }
      if (req.query) {
        _req.query = req.query;
      }
      if (req.params) {
        _req.params = req.params;
      }
      _req.headers = req.headers;
      _req.remoteAddress = connection && connection.remoteAddress;
      _req.remotePort = connection && connection.remotePort;
      _req.raw = req.raw || req;
      return _req;
    }
    function mapHttpRequest(req) {
      return {
        req: reqSerializer(req)
      };
    }
  }
});

// node_modules/.pnpm/pino-std-serializers@7.0.0/node_modules/pino-std-serializers/lib/res.js
var require_res = __commonJS({
  "node_modules/.pnpm/pino-std-serializers@7.0.0/node_modules/pino-std-serializers/lib/res.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      mapHttpResponse,
      resSerializer
    };
    var rawSymbol = Symbol("pino-raw-res-ref");
    var pinoResProto = Object.create({}, {
      statusCode: {
        enumerable: true,
        writable: true,
        value: 0
      },
      headers: {
        enumerable: true,
        writable: true,
        value: ""
      },
      raw: {
        enumerable: false,
        get: function() {
          return this[rawSymbol];
        },
        set: function(val) {
          this[rawSymbol] = val;
        }
      }
    });
    Object.defineProperty(pinoResProto, rawSymbol, {
      writable: true,
      value: {}
    });
    function resSerializer(res) {
      const _res = Object.create(pinoResProto);
      _res.statusCode = res.headersSent ? res.statusCode : null;
      _res.headers = res.getHeaders ? res.getHeaders() : res._headers;
      _res.raw = res;
      return _res;
    }
    function mapHttpResponse(res) {
      return {
        res: resSerializer(res)
      };
    }
  }
});

// node_modules/.pnpm/pino-std-serializers@7.0.0/node_modules/pino-std-serializers/index.js
var require_pino_std_serializers = __commonJS({
  "node_modules/.pnpm/pino-std-serializers@7.0.0/node_modules/pino-std-serializers/index.js"(exports2, module2) {
    "use strict";
    var errSerializer = require_err();
    var errWithCauseSerializer = require_err_with_cause();
    var reqSerializers = require_req();
    var resSerializers = require_res();
    module2.exports = {
      err: errSerializer,
      errWithCause: errWithCauseSerializer,
      mapHttpRequest: reqSerializers.mapHttpRequest,
      mapHttpResponse: resSerializers.mapHttpResponse,
      req: reqSerializers.reqSerializer,
      res: resSerializers.resSerializer,
      wrapErrorSerializer: function wrapErrorSerializer(customSerializer) {
        if (customSerializer === errSerializer)
          return customSerializer;
        return function wrapErrSerializer(err) {
          return customSerializer(errSerializer(err));
        };
      },
      wrapRequestSerializer: function wrapRequestSerializer(customSerializer) {
        if (customSerializer === reqSerializers.reqSerializer)
          return customSerializer;
        return function wrappedReqSerializer(req) {
          return customSerializer(reqSerializers.reqSerializer(req));
        };
      },
      wrapResponseSerializer: function wrapResponseSerializer(customSerializer) {
        if (customSerializer === resSerializers.resSerializer)
          return customSerializer;
        return function wrappedResSerializer(res) {
          return customSerializer(resSerializers.resSerializer(res));
        };
      }
    };
  }
});

// node_modules/.pnpm/pino@9.6.0/node_modules/pino/lib/caller.js
var require_caller = __commonJS({
  "node_modules/.pnpm/pino@9.6.0/node_modules/pino/lib/caller.js"(exports2, module2) {
    "use strict";
    function noOpPrepareStackTrace(_, stack) {
      return stack;
    }
    module2.exports = function getCallers() {
      const originalPrepare = Error.prepareStackTrace;
      Error.prepareStackTrace = noOpPrepareStackTrace;
      const stack = new Error().stack;
      Error.prepareStackTrace = originalPrepare;
      if (!Array.isArray(stack)) {
        return void 0;
      }
      const entries = stack.slice(2);
      const fileNames = [];
      for (const entry of entries) {
        if (!entry) {
          continue;
        }
        fileNames.push(entry.getFileName());
      }
      return fileNames;
    };
  }
});

// node_modules/.pnpm/fast-redact@3.5.0/node_modules/fast-redact/lib/validator.js
var require_validator = __commonJS({
  "node_modules/.pnpm/fast-redact@3.5.0/node_modules/fast-redact/lib/validator.js"(exports2, module2) {
    "use strict";
    module2.exports = validator;
    function validator(opts = {}) {
      const {
        ERR_PATHS_MUST_BE_STRINGS = () => "fast-redact - Paths must be (non-empty) strings",
        ERR_INVALID_PATH = (s) => `fast-redact \u2013 Invalid path (${s})`
      } = opts;
      return function validate({ paths }) {
        paths.forEach((s) => {
          if (typeof s !== "string") {
            throw Error(ERR_PATHS_MUST_BE_STRINGS());
          }
          try {
            if (/〇/.test(s))
              throw Error();
            const expr = (s[0] === "[" ? "" : ".") + s.replace(/^\*/, "\u3007").replace(/\.\*/g, ".\u3007").replace(/\[\*\]/g, "[\u3007]");
            if (/\n|\r|;/.test(expr))
              throw Error();
            if (/\/\*/.test(expr))
              throw Error();
            Function(`
            'use strict'
            const o = new Proxy({}, { get: () => o, set: () => { throw Error() } });
            const \u3007 = null;
            o${expr}
            if ([o${expr}].length !== 1) throw Error()`)();
          } catch (e) {
            throw Error(ERR_INVALID_PATH(s));
          }
        });
      };
    }
  }
});

// node_modules/.pnpm/fast-redact@3.5.0/node_modules/fast-redact/lib/rx.js
var require_rx = __commonJS({
  "node_modules/.pnpm/fast-redact@3.5.0/node_modules/fast-redact/lib/rx.js"(exports2, module2) {
    "use strict";
    module2.exports = /[^.[\]]+|\[((?:.)*?)\]/g;
  }
});

// node_modules/.pnpm/fast-redact@3.5.0/node_modules/fast-redact/lib/parse.js
var require_parse = __commonJS({
  "node_modules/.pnpm/fast-redact@3.5.0/node_modules/fast-redact/lib/parse.js"(exports2, module2) {
    "use strict";
    var rx = require_rx();
    module2.exports = parse;
    function parse({ paths }) {
      const wildcards = [];
      var wcLen = 0;
      const secret = paths.reduce(function(o, strPath, ix) {
        var path5 = strPath.match(rx).map((p) => p.replace(/'|"|`/g, ""));
        const leadingBracket = strPath[0] === "[";
        path5 = path5.map((p) => {
          if (p[0] === "[")
            return p.substr(1, p.length - 2);
          else
            return p;
        });
        const star = path5.indexOf("*");
        if (star > -1) {
          const before = path5.slice(0, star);
          const beforeStr = before.join(".");
          const after = path5.slice(star + 1, path5.length);
          const nested = after.length > 0;
          wcLen++;
          wildcards.push({
            before,
            beforeStr,
            after,
            nested
          });
        } else {
          o[strPath] = {
            path: path5,
            val: void 0,
            precensored: false,
            circle: "",
            escPath: JSON.stringify(strPath),
            leadingBracket
          };
        }
        return o;
      }, {});
      return { wildcards, wcLen, secret };
    }
  }
});

// node_modules/.pnpm/fast-redact@3.5.0/node_modules/fast-redact/lib/redactor.js
var require_redactor = __commonJS({
  "node_modules/.pnpm/fast-redact@3.5.0/node_modules/fast-redact/lib/redactor.js"(exports2, module2) {
    "use strict";
    var rx = require_rx();
    module2.exports = redactor;
    function redactor({ secret, serialize, wcLen, strict, isCensorFct, censorFctTakesPath }, state) {
      const redact = Function("o", `
    if (typeof o !== 'object' || o == null) {
      ${strictImpl(strict, serialize)}
    }
    const { censor, secret } = this
    const originalSecret = {}
    const secretKeys = Object.keys(secret)
    for (var i = 0; i < secretKeys.length; i++) {
      originalSecret[secretKeys[i]] = secret[secretKeys[i]]
    }

    ${redactTmpl(secret, isCensorFct, censorFctTakesPath)}
    this.compileRestore()
    ${dynamicRedactTmpl(wcLen > 0, isCensorFct, censorFctTakesPath)}
    this.secret = originalSecret
    ${resultTmpl(serialize)}
  `).bind(state);
      redact.state = state;
      if (serialize === false) {
        redact.restore = (o) => state.restore(o);
      }
      return redact;
    }
    function redactTmpl(secret, isCensorFct, censorFctTakesPath) {
      return Object.keys(secret).map((path5) => {
        const { escPath, leadingBracket, path: arrPath } = secret[path5];
        const skip = leadingBracket ? 1 : 0;
        const delim = leadingBracket ? "" : ".";
        const hops = [];
        var match;
        while ((match = rx.exec(path5)) !== null) {
          const [, ix] = match;
          const { index, input } = match;
          if (index > skip)
            hops.push(input.substring(0, index - (ix ? 0 : 1)));
        }
        var existence = hops.map((p) => `o${delim}${p}`).join(" && ");
        if (existence.length === 0)
          existence += `o${delim}${path5} != null`;
        else
          existence += ` && o${delim}${path5} != null`;
        const circularDetection = `
      switch (true) {
        ${hops.reverse().map((p) => `
          case o${delim}${p} === censor:
            secret[${escPath}].circle = ${JSON.stringify(p)}
            break
        `).join("\n")}
      }
    `;
        const censorArgs = censorFctTakesPath ? `val, ${JSON.stringify(arrPath)}` : `val`;
        return `
      if (${existence}) {
        const val = o${delim}${path5}
        if (val === censor) {
          secret[${escPath}].precensored = true
        } else {
          secret[${escPath}].val = val
          o${delim}${path5} = ${isCensorFct ? `censor(${censorArgs})` : "censor"}
          ${circularDetection}
        }
      }
    `;
      }).join("\n");
    }
    function dynamicRedactTmpl(hasWildcards, isCensorFct, censorFctTakesPath) {
      return hasWildcards === true ? `
    {
      const { wildcards, wcLen, groupRedact, nestedRedact } = this
      for (var i = 0; i < wcLen; i++) {
        const { before, beforeStr, after, nested } = wildcards[i]
        if (nested === true) {
          secret[beforeStr] = secret[beforeStr] || []
          nestedRedact(secret[beforeStr], o, before, after, censor, ${isCensorFct}, ${censorFctTakesPath})
        } else secret[beforeStr] = groupRedact(o, before, censor, ${isCensorFct}, ${censorFctTakesPath})
      }
    }
  ` : "";
    }
    function resultTmpl(serialize) {
      return serialize === false ? `return o` : `
    var s = this.serialize(o)
    this.restore(o)
    return s
  `;
    }
    function strictImpl(strict, serialize) {
      return strict === true ? `throw Error('fast-redact: primitives cannot be redacted')` : serialize === false ? `return o` : `return this.serialize(o)`;
    }
  }
});

// node_modules/.pnpm/fast-redact@3.5.0/node_modules/fast-redact/lib/modifiers.js
var require_modifiers = __commonJS({
  "node_modules/.pnpm/fast-redact@3.5.0/node_modules/fast-redact/lib/modifiers.js"(exports2, module2) {
    "use strict";
    module2.exports = {
      groupRedact,
      groupRestore,
      nestedRedact,
      nestedRestore
    };
    function groupRestore({ keys, values, target }) {
      if (target == null || typeof target === "string")
        return;
      const length = keys.length;
      for (var i = 0; i < length; i++) {
        const k = keys[i];
        target[k] = values[i];
      }
    }
    function groupRedact(o, path5, censor, isCensorFct, censorFctTakesPath) {
      const target = get(o, path5);
      if (target == null || typeof target === "string")
        return { keys: null, values: null, target, flat: true };
      const keys = Object.keys(target);
      const keysLength = keys.length;
      const pathLength = path5.length;
      const pathWithKey = censorFctTakesPath ? [...path5] : void 0;
      const values = new Array(keysLength);
      for (var i = 0; i < keysLength; i++) {
        const key = keys[i];
        values[i] = target[key];
        if (censorFctTakesPath) {
          pathWithKey[pathLength] = key;
          target[key] = censor(target[key], pathWithKey);
        } else if (isCensorFct) {
          target[key] = censor(target[key]);
        } else {
          target[key] = censor;
        }
      }
      return { keys, values, target, flat: true };
    }
    function nestedRestore(instructions) {
      for (let i = 0; i < instructions.length; i++) {
        const { target, path: path5, value } = instructions[i];
        let current = target;
        for (let i2 = path5.length - 1; i2 > 0; i2--) {
          current = current[path5[i2]];
        }
        current[path5[0]] = value;
      }
    }
    function nestedRedact(store, o, path5, ns, censor, isCensorFct, censorFctTakesPath) {
      const target = get(o, path5);
      if (target == null)
        return;
      const keys = Object.keys(target);
      const keysLength = keys.length;
      for (var i = 0; i < keysLength; i++) {
        const key = keys[i];
        specialSet(store, target, key, path5, ns, censor, isCensorFct, censorFctTakesPath);
      }
      return store;
    }
    function has(obj, prop) {
      return obj !== void 0 && obj !== null ? "hasOwn" in Object ? Object.hasOwn(obj, prop) : Object.prototype.hasOwnProperty.call(obj, prop) : false;
    }
    function specialSet(store, o, k, path5, afterPath, censor, isCensorFct, censorFctTakesPath) {
      const afterPathLen = afterPath.length;
      const lastPathIndex = afterPathLen - 1;
      const originalKey = k;
      var i = -1;
      var n;
      var nv;
      var ov;
      var oov = null;
      var wc = null;
      var kIsWc;
      var wcov;
      var consecutive = false;
      var level = 0;
      var depth = 0;
      var redactPathCurrent = tree();
      ov = n = o[k];
      if (typeof n !== "object")
        return;
      while (n != null && ++i < afterPathLen) {
        depth += 1;
        k = afterPath[i];
        oov = ov;
        if (k !== "*" && !wc && !(typeof n === "object" && k in n)) {
          break;
        }
        if (k === "*") {
          if (wc === "*") {
            consecutive = true;
          }
          wc = k;
          if (i !== lastPathIndex) {
            continue;
          }
        }
        if (wc) {
          const wcKeys = Object.keys(n);
          for (var j = 0; j < wcKeys.length; j++) {
            const wck = wcKeys[j];
            wcov = n[wck];
            kIsWc = k === "*";
            if (consecutive) {
              redactPathCurrent = node(redactPathCurrent, wck, depth);
              level = i;
              ov = iterateNthLevel(wcov, level - 1, k, path5, afterPath, censor, isCensorFct, censorFctTakesPath, originalKey, n, nv, ov, kIsWc, wck, i, lastPathIndex, redactPathCurrent, store, o[originalKey], depth + 1);
            } else {
              if (kIsWc || typeof wcov === "object" && wcov !== null && k in wcov) {
                if (kIsWc) {
                  ov = wcov;
                } else {
                  ov = wcov[k];
                }
                nv = i !== lastPathIndex ? ov : isCensorFct ? censorFctTakesPath ? censor(ov, [...path5, originalKey, ...afterPath]) : censor(ov) : censor;
                if (kIsWc) {
                  const rv = restoreInstr(node(redactPathCurrent, wck, depth), ov, o[originalKey]);
                  store.push(rv);
                  n[wck] = nv;
                } else {
                  if (wcov[k] === nv) {
                  } else if (nv === void 0 && censor !== void 0 || has(wcov, k) && nv === ov) {
                    redactPathCurrent = node(redactPathCurrent, wck, depth);
                  } else {
                    redactPathCurrent = node(redactPathCurrent, wck, depth);
                    const rv = restoreInstr(node(redactPathCurrent, k, depth + 1), ov, o[originalKey]);
                    store.push(rv);
                    wcov[k] = nv;
                  }
                }
              }
            }
          }
          wc = null;
        } else {
          ov = n[k];
          redactPathCurrent = node(redactPathCurrent, k, depth);
          nv = i !== lastPathIndex ? ov : isCensorFct ? censorFctTakesPath ? censor(ov, [...path5, originalKey, ...afterPath]) : censor(ov) : censor;
          if (has(n, k) && nv === ov || nv === void 0 && censor !== void 0) {
          } else {
            const rv = restoreInstr(redactPathCurrent, ov, o[originalKey]);
            store.push(rv);
            n[k] = nv;
          }
          n = n[k];
        }
        if (typeof n !== "object")
          break;
        if (ov === oov || typeof ov === "undefined") {
        }
      }
    }
    function get(o, p) {
      var i = -1;
      var l = p.length;
      var n = o;
      while (n != null && ++i < l) {
        n = n[p[i]];
      }
      return n;
    }
    function iterateNthLevel(wcov, level, k, path5, afterPath, censor, isCensorFct, censorFctTakesPath, originalKey, n, nv, ov, kIsWc, wck, i, lastPathIndex, redactPathCurrent, store, parent, depth) {
      if (level === 0) {
        if (kIsWc || typeof wcov === "object" && wcov !== null && k in wcov) {
          if (kIsWc) {
            ov = wcov;
          } else {
            ov = wcov[k];
          }
          nv = i !== lastPathIndex ? ov : isCensorFct ? censorFctTakesPath ? censor(ov, [...path5, originalKey, ...afterPath]) : censor(ov) : censor;
          if (kIsWc) {
            const rv = restoreInstr(redactPathCurrent, ov, parent);
            store.push(rv);
            n[wck] = nv;
          } else {
            if (wcov[k] === nv) {
            } else if (nv === void 0 && censor !== void 0 || has(wcov, k) && nv === ov) {
            } else {
              const rv = restoreInstr(node(redactPathCurrent, k, depth + 1), ov, parent);
              store.push(rv);
              wcov[k] = nv;
            }
          }
        }
      }
      for (const key in wcov) {
        if (typeof wcov[key] === "object") {
          redactPathCurrent = node(redactPathCurrent, key, depth);
          iterateNthLevel(wcov[key], level - 1, k, path5, afterPath, censor, isCensorFct, censorFctTakesPath, originalKey, n, nv, ov, kIsWc, wck, i, lastPathIndex, redactPathCurrent, store, parent, depth + 1);
        }
      }
    }
    function tree() {
      return { parent: null, key: null, children: [], depth: 0 };
    }
    function node(parent, key, depth) {
      if (parent.depth === depth) {
        return node(parent.parent, key, depth);
      }
      var child = {
        parent,
        key,
        depth,
        children: []
      };
      parent.children.push(child);
      return child;
    }
    function restoreInstr(node2, value, target) {
      let current = node2;
      const path5 = [];
      do {
        path5.push(current.key);
        current = current.parent;
      } while (current.parent != null);
      return { path: path5, value, target };
    }
  }
});

// node_modules/.pnpm/fast-redact@3.5.0/node_modules/fast-redact/lib/restorer.js
var require_restorer = __commonJS({
  "node_modules/.pnpm/fast-redact@3.5.0/node_modules/fast-redact/lib/restorer.js"(exports2, module2) {
    "use strict";
    var { groupRestore, nestedRestore } = require_modifiers();
    module2.exports = restorer;
    function restorer() {
      return function compileRestore() {
        if (this.restore) {
          this.restore.state.secret = this.secret;
          return;
        }
        const { secret, wcLen } = this;
        const paths = Object.keys(secret);
        const resetters = resetTmpl(secret, paths);
        const hasWildcards = wcLen > 0;
        const state = hasWildcards ? { secret, groupRestore, nestedRestore } : { secret };
        this.restore = Function(
          "o",
          restoreTmpl(resetters, paths, hasWildcards)
        ).bind(state);
        this.restore.state = state;
      };
    }
    function resetTmpl(secret, paths) {
      return paths.map((path5) => {
        const { circle, escPath, leadingBracket } = secret[path5];
        const delim = leadingBracket ? "" : ".";
        const reset = circle ? `o.${circle} = secret[${escPath}].val` : `o${delim}${path5} = secret[${escPath}].val`;
        const clear = `secret[${escPath}].val = undefined`;
        return `
      if (secret[${escPath}].val !== undefined) {
        try { ${reset} } catch (e) {}
        ${clear}
      }
    `;
      }).join("");
    }
    function restoreTmpl(resetters, paths, hasWildcards) {
      const dynamicReset = hasWildcards === true ? `
    const keys = Object.keys(secret)
    const len = keys.length
    for (var i = len - 1; i >= ${paths.length}; i--) {
      const k = keys[i]
      const o = secret[k]
      if (o) {
        if (o.flat === true) this.groupRestore(o)
        else this.nestedRestore(o)
        secret[k] = null
      }
    }
  ` : "";
      return `
    const secret = this.secret
    ${dynamicReset}
    ${resetters}
    return o
  `;
    }
  }
});

// node_modules/.pnpm/fast-redact@3.5.0/node_modules/fast-redact/lib/state.js
var require_state = __commonJS({
  "node_modules/.pnpm/fast-redact@3.5.0/node_modules/fast-redact/lib/state.js"(exports2, module2) {
    "use strict";
    module2.exports = state;
    function state(o) {
      const {
        secret,
        censor,
        compileRestore,
        serialize,
        groupRedact,
        nestedRedact,
        wildcards,
        wcLen
      } = o;
      const builder = [{ secret, censor, compileRestore }];
      if (serialize !== false)
        builder.push({ serialize });
      if (wcLen > 0)
        builder.push({ groupRedact, nestedRedact, wildcards, wcLen });
      return Object.assign(...builder);
    }
  }
});

// node_modules/.pnpm/fast-redact@3.5.0/node_modules/fast-redact/index.js
var require_fast_redact = __commonJS({
  "node_modules/.pnpm/fast-redact@3.5.0/node_modules/fast-redact/index.js"(exports2, module2) {
    "use strict";
    var validator = require_validator();
    var parse = require_parse();
    var redactor = require_redactor();
    var restorer = require_restorer();
    var { groupRedact, nestedRedact } = require_modifiers();
    var state = require_state();
    var rx = require_rx();
    var validate = validator();
    var noop = (o) => o;
    noop.restore = noop;
    var DEFAULT_CENSOR = "[REDACTED]";
    fastRedact.rx = rx;
    fastRedact.validator = validator;
    module2.exports = fastRedact;
    function fastRedact(opts = {}) {
      const paths = Array.from(new Set(opts.paths || []));
      const serialize = "serialize" in opts ? opts.serialize === false ? opts.serialize : typeof opts.serialize === "function" ? opts.serialize : JSON.stringify : JSON.stringify;
      const remove = opts.remove;
      if (remove === true && serialize !== JSON.stringify) {
        throw Error("fast-redact \u2013 remove option may only be set when serializer is JSON.stringify");
      }
      const censor = remove === true ? void 0 : "censor" in opts ? opts.censor : DEFAULT_CENSOR;
      const isCensorFct = typeof censor === "function";
      const censorFctTakesPath = isCensorFct && censor.length > 1;
      if (paths.length === 0)
        return serialize || noop;
      validate({ paths, serialize, censor });
      const { wildcards, wcLen, secret } = parse({ paths, censor });
      const compileRestore = restorer();
      const strict = "strict" in opts ? opts.strict : true;
      return redactor({ secret, wcLen, serialize, strict, isCensorFct, censorFctTakesPath }, state({
        secret,
        censor,
        compileRestore,
        serialize,
        groupRedact,
        nestedRedact,
        wildcards,
        wcLen
      }));
    }
  }
});

// node_modules/.pnpm/pino@9.6.0/node_modules/pino/lib/symbols.js
var require_symbols = __commonJS({
  "node_modules/.pnpm/pino@9.6.0/node_modules/pino/lib/symbols.js"(exports2, module2) {
    "use strict";
    var setLevelSym = Symbol("pino.setLevel");
    var getLevelSym = Symbol("pino.getLevel");
    var levelValSym = Symbol("pino.levelVal");
    var levelCompSym = Symbol("pino.levelComp");
    var useLevelLabelsSym = Symbol("pino.useLevelLabels");
    var useOnlyCustomLevelsSym = Symbol("pino.useOnlyCustomLevels");
    var mixinSym = Symbol("pino.mixin");
    var lsCacheSym = Symbol("pino.lsCache");
    var chindingsSym = Symbol("pino.chindings");
    var asJsonSym = Symbol("pino.asJson");
    var writeSym = Symbol("pino.write");
    var redactFmtSym = Symbol("pino.redactFmt");
    var timeSym = Symbol("pino.time");
    var timeSliceIndexSym = Symbol("pino.timeSliceIndex");
    var streamSym = Symbol("pino.stream");
    var stringifySym = Symbol("pino.stringify");
    var stringifySafeSym = Symbol("pino.stringifySafe");
    var stringifiersSym = Symbol("pino.stringifiers");
    var endSym = Symbol("pino.end");
    var formatOptsSym = Symbol("pino.formatOpts");
    var messageKeySym = Symbol("pino.messageKey");
    var errorKeySym = Symbol("pino.errorKey");
    var nestedKeySym = Symbol("pino.nestedKey");
    var nestedKeyStrSym = Symbol("pino.nestedKeyStr");
    var mixinMergeStrategySym = Symbol("pino.mixinMergeStrategy");
    var msgPrefixSym = Symbol("pino.msgPrefix");
    var wildcardFirstSym = Symbol("pino.wildcardFirst");
    var serializersSym = Symbol.for("pino.serializers");
    var formattersSym = Symbol.for("pino.formatters");
    var hooksSym = Symbol.for("pino.hooks");
    var needsMetadataGsym = Symbol.for("pino.metadata");
    module2.exports = {
      setLevelSym,
      getLevelSym,
      levelValSym,
      levelCompSym,
      useLevelLabelsSym,
      mixinSym,
      lsCacheSym,
      chindingsSym,
      asJsonSym,
      writeSym,
      serializersSym,
      redactFmtSym,
      timeSym,
      timeSliceIndexSym,
      streamSym,
      stringifySym,
      stringifySafeSym,
      stringifiersSym,
      endSym,
      formatOptsSym,
      messageKeySym,
      errorKeySym,
      nestedKeySym,
      wildcardFirstSym,
      needsMetadataGsym,
      useOnlyCustomLevelsSym,
      formattersSym,
      hooksSym,
      nestedKeyStrSym,
      mixinMergeStrategySym,
      msgPrefixSym
    };
  }
});

// node_modules/.pnpm/pino@9.6.0/node_modules/pino/lib/redaction.js
var require_redaction = __commonJS({
  "node_modules/.pnpm/pino@9.6.0/node_modules/pino/lib/redaction.js"(exports2, module2) {
    "use strict";
    var fastRedact = require_fast_redact();
    var { redactFmtSym, wildcardFirstSym } = require_symbols();
    var { rx, validator } = fastRedact;
    var validate = validator({
      ERR_PATHS_MUST_BE_STRINGS: () => "pino \u2013 redacted paths must be strings",
      ERR_INVALID_PATH: (s) => `pino \u2013 redact paths array contains an invalid path (${s})`
    });
    var CENSOR = "[Redacted]";
    var strict = false;
    function redaction(opts, serialize) {
      const { paths, censor } = handle(opts);
      const shape = paths.reduce((o, str) => {
        rx.lastIndex = 0;
        const first = rx.exec(str);
        const next = rx.exec(str);
        let ns = first[1] !== void 0 ? first[1].replace(/^(?:"|'|`)(.*)(?:"|'|`)$/, "$1") : first[0];
        if (ns === "*") {
          ns = wildcardFirstSym;
        }
        if (next === null) {
          o[ns] = null;
          return o;
        }
        if (o[ns] === null) {
          return o;
        }
        const { index } = next;
        const nextPath = `${str.substr(index, str.length - 1)}`;
        o[ns] = o[ns] || [];
        if (ns !== wildcardFirstSym && o[ns].length === 0) {
          o[ns].push(...o[wildcardFirstSym] || []);
        }
        if (ns === wildcardFirstSym) {
          Object.keys(o).forEach(function(k) {
            if (o[k]) {
              o[k].push(nextPath);
            }
          });
        }
        o[ns].push(nextPath);
        return o;
      }, {});
      const result = {
        [redactFmtSym]: fastRedact({ paths, censor, serialize, strict })
      };
      const topCensor = (...args) => {
        return typeof censor === "function" ? serialize(censor(...args)) : serialize(censor);
      };
      return [...Object.keys(shape), ...Object.getOwnPropertySymbols(shape)].reduce((o, k) => {
        if (shape[k] === null) {
          o[k] = (value) => topCensor(value, [k]);
        } else {
          const wrappedCensor = typeof censor === "function" ? (value, path5) => {
            return censor(value, [k, ...path5]);
          } : censor;
          o[k] = fastRedact({
            paths: shape[k],
            censor: wrappedCensor,
            serialize,
            strict
          });
        }
        return o;
      }, result);
    }
    function handle(opts) {
      if (Array.isArray(opts)) {
        opts = { paths: opts, censor: CENSOR };
        validate(opts);
        return opts;
      }
      let { paths, censor = CENSOR, remove } = opts;
      if (Array.isArray(paths) === false) {
        throw Error("pino \u2013 redact must contain an array of strings");
      }
      if (remove === true)
        censor = void 0;
      validate({ paths, censor });
      return { paths, censor };
    }
    module2.exports = redaction;
  }
});

// node_modules/.pnpm/pino@9.6.0/node_modules/pino/lib/time.js
var require_time = __commonJS({
  "node_modules/.pnpm/pino@9.6.0/node_modules/pino/lib/time.js"(exports2, module2) {
    "use strict";
    var nullTime = () => "";
    var epochTime = () => `,"time":${Date.now()}`;
    var unixTime = () => `,"time":${Math.round(Date.now() / 1e3)}`;
    var isoTime = () => `,"time":"${new Date(Date.now()).toISOString()}"`;
    module2.exports = { nullTime, epochTime, unixTime, isoTime };
  }
});

// node_modules/.pnpm/quick-format-unescaped@4.0.4/node_modules/quick-format-unescaped/index.js
var require_quick_format_unescaped = __commonJS({
  "node_modules/.pnpm/quick-format-unescaped@4.0.4/node_modules/quick-format-unescaped/index.js"(exports2, module2) {
    "use strict";
    function tryStringify(o) {
      try {
        return JSON.stringify(o);
      } catch (e) {
        return '"[Circular]"';
      }
    }
    module2.exports = format;
    function format(f, args, opts) {
      var ss = opts && opts.stringify || tryStringify;
      var offset = 1;
      if (typeof f === "object" && f !== null) {
        var len = args.length + offset;
        if (len === 1)
          return f;
        var objects = new Array(len);
        objects[0] = ss(f);
        for (var index = 1; index < len; index++) {
          objects[index] = ss(args[index]);
        }
        return objects.join(" ");
      }
      if (typeof f !== "string") {
        return f;
      }
      var argLen = args.length;
      if (argLen === 0)
        return f;
      var str = "";
      var a = 1 - offset;
      var lastPos = -1;
      var flen = f && f.length || 0;
      for (var i = 0; i < flen; ) {
        if (f.charCodeAt(i) === 37 && i + 1 < flen) {
          lastPos = lastPos > -1 ? lastPos : 0;
          switch (f.charCodeAt(i + 1)) {
            case 100:
            case 102:
              if (a >= argLen)
                break;
              if (args[a] == null)
                break;
              if (lastPos < i)
                str += f.slice(lastPos, i);
              str += Number(args[a]);
              lastPos = i + 2;
              i++;
              break;
            case 105:
              if (a >= argLen)
                break;
              if (args[a] == null)
                break;
              if (lastPos < i)
                str += f.slice(lastPos, i);
              str += Math.floor(Number(args[a]));
              lastPos = i + 2;
              i++;
              break;
            case 79:
            case 111:
            case 106:
              if (a >= argLen)
                break;
              if (args[a] === void 0)
                break;
              if (lastPos < i)
                str += f.slice(lastPos, i);
              var type = typeof args[a];
              if (type === "string") {
                str += "'" + args[a] + "'";
                lastPos = i + 2;
                i++;
                break;
              }
              if (type === "function") {
                str += args[a].name || "<anonymous>";
                lastPos = i + 2;
                i++;
                break;
              }
              str += ss(args[a]);
              lastPos = i + 2;
              i++;
              break;
            case 115:
              if (a >= argLen)
                break;
              if (lastPos < i)
                str += f.slice(lastPos, i);
              str += String(args[a]);
              lastPos = i + 2;
              i++;
              break;
            case 37:
              if (lastPos < i)
                str += f.slice(lastPos, i);
              str += "%";
              lastPos = i + 2;
              i++;
              a--;
              break;
          }
          ++a;
        }
        ++i;
      }
      if (lastPos === -1)
        return f;
      else if (lastPos < flen) {
        str += f.slice(lastPos);
      }
      return str;
    }
  }
});

// node_modules/.pnpm/atomic-sleep@1.0.0/node_modules/atomic-sleep/index.js
var require_atomic_sleep = __commonJS({
  "node_modules/.pnpm/atomic-sleep@1.0.0/node_modules/atomic-sleep/index.js"(exports2, module2) {
    "use strict";
    if (typeof SharedArrayBuffer !== "undefined" && typeof Atomics !== "undefined") {
      let sleep = function(ms) {
        const valid = ms > 0 && ms < Infinity;
        if (valid === false) {
          if (typeof ms !== "number" && typeof ms !== "bigint") {
            throw TypeError("sleep: ms must be a number");
          }
          throw RangeError("sleep: ms must be a number that is greater than 0 but less than Infinity");
        }
        Atomics.wait(nil, 0, 0, Number(ms));
      };
      const nil = new Int32Array(new SharedArrayBuffer(4));
      module2.exports = sleep;
    } else {
      let sleep = function(ms) {
        const valid = ms > 0 && ms < Infinity;
        if (valid === false) {
          if (typeof ms !== "number" && typeof ms !== "bigint") {
            throw TypeError("sleep: ms must be a number");
          }
          throw RangeError("sleep: ms must be a number that is greater than 0 but less than Infinity");
        }
        const target = Date.now() + Number(ms);
        while (target > Date.now()) {
        }
      };
      module2.exports = sleep;
    }
  }
});

// node_modules/.pnpm/sonic-boom@4.2.0/node_modules/sonic-boom/index.js
var require_sonic_boom = __commonJS({
  "node_modules/.pnpm/sonic-boom@4.2.0/node_modules/sonic-boom/index.js"(exports2, module2) {
    "use strict";
    var fs5 = require("fs");
    var EventEmitter = require("events");
    var inherits = require("util").inherits;
    var path5 = require("path");
    var sleep = require_atomic_sleep();
    var assert = require("assert");
    var BUSY_WRITE_TIMEOUT = 100;
    var kEmptyBuffer = Buffer.allocUnsafe(0);
    var MAX_WRITE = 16 * 1024;
    var kContentModeBuffer = "buffer";
    var kContentModeUtf8 = "utf8";
    var [major2, minor] = (process.versions.node || "0.0").split(".").map(Number);
    var kCopyBuffer = major2 >= 22 && minor >= 7;
    function openFile(file, sonic) {
      sonic._opening = true;
      sonic._writing = true;
      sonic._asyncDrainScheduled = false;
      function fileOpened(err, fd) {
        if (err) {
          sonic._reopening = false;
          sonic._writing = false;
          sonic._opening = false;
          if (sonic.sync) {
            process.nextTick(() => {
              if (sonic.listenerCount("error") > 0) {
                sonic.emit("error", err);
              }
            });
          } else {
            sonic.emit("error", err);
          }
          return;
        }
        const reopening = sonic._reopening;
        sonic.fd = fd;
        sonic.file = file;
        sonic._reopening = false;
        sonic._opening = false;
        sonic._writing = false;
        if (sonic.sync) {
          process.nextTick(() => sonic.emit("ready"));
        } else {
          sonic.emit("ready");
        }
        if (sonic.destroyed) {
          return;
        }
        if (!sonic._writing && sonic._len > sonic.minLength || sonic._flushPending) {
          sonic._actualWrite();
        } else if (reopening) {
          process.nextTick(() => sonic.emit("drain"));
        }
      }
      const flags = sonic.append ? "a" : "w";
      const mode = sonic.mode;
      if (sonic.sync) {
        try {
          if (sonic.mkdir)
            fs5.mkdirSync(path5.dirname(file), { recursive: true });
          const fd = fs5.openSync(file, flags, mode);
          fileOpened(null, fd);
        } catch (err) {
          fileOpened(err);
          throw err;
        }
      } else if (sonic.mkdir) {
        fs5.mkdir(path5.dirname(file), { recursive: true }, (err) => {
          if (err)
            return fileOpened(err);
          fs5.open(file, flags, mode, fileOpened);
        });
      } else {
        fs5.open(file, flags, mode, fileOpened);
      }
    }
    function SonicBoom(opts) {
      if (!(this instanceof SonicBoom)) {
        return new SonicBoom(opts);
      }
      let { fd, dest, minLength, maxLength, maxWrite, periodicFlush, sync, append = true, mkdir, retryEAGAIN, fsync, contentMode, mode } = opts || {};
      fd = fd || dest;
      this._len = 0;
      this.fd = -1;
      this._bufs = [];
      this._lens = [];
      this._writing = false;
      this._ending = false;
      this._reopening = false;
      this._asyncDrainScheduled = false;
      this._flushPending = false;
      this._hwm = Math.max(minLength || 0, 16387);
      this.file = null;
      this.destroyed = false;
      this.minLength = minLength || 0;
      this.maxLength = maxLength || 0;
      this.maxWrite = maxWrite || MAX_WRITE;
      this._periodicFlush = periodicFlush || 0;
      this._periodicFlushTimer = void 0;
      this.sync = sync || false;
      this.writable = true;
      this._fsync = fsync || false;
      this.append = append || false;
      this.mode = mode;
      this.retryEAGAIN = retryEAGAIN || (() => true);
      this.mkdir = mkdir || false;
      let fsWriteSync;
      let fsWrite;
      if (contentMode === kContentModeBuffer) {
        this._writingBuf = kEmptyBuffer;
        this.write = writeBuffer;
        this.flush = flushBuffer;
        this.flushSync = flushBufferSync;
        this._actualWrite = actualWriteBuffer;
        fsWriteSync = () => fs5.writeSync(this.fd, this._writingBuf);
        fsWrite = () => fs5.write(this.fd, this._writingBuf, this.release);
      } else if (contentMode === void 0 || contentMode === kContentModeUtf8) {
        this._writingBuf = "";
        this.write = write;
        this.flush = flush;
        this.flushSync = flushSync;
        this._actualWrite = actualWrite;
        fsWriteSync = () => fs5.writeSync(this.fd, this._writingBuf, "utf8");
        fsWrite = () => fs5.write(this.fd, this._writingBuf, "utf8", this.release);
      } else {
        throw new Error(`SonicBoom supports "${kContentModeUtf8}" and "${kContentModeBuffer}", but passed ${contentMode}`);
      }
      if (typeof fd === "number") {
        this.fd = fd;
        process.nextTick(() => this.emit("ready"));
      } else if (typeof fd === "string") {
        openFile(fd, this);
      } else {
        throw new Error("SonicBoom supports only file descriptors and files");
      }
      if (this.minLength >= this.maxWrite) {
        throw new Error(`minLength should be smaller than maxWrite (${this.maxWrite})`);
      }
      this.release = (err, n) => {
        if (err) {
          if ((err.code === "EAGAIN" || err.code === "EBUSY") && this.retryEAGAIN(err, this._writingBuf.length, this._len - this._writingBuf.length)) {
            if (this.sync) {
              try {
                sleep(BUSY_WRITE_TIMEOUT);
                this.release(void 0, 0);
              } catch (err2) {
                this.release(err2);
              }
            } else {
              setTimeout(fsWrite, BUSY_WRITE_TIMEOUT);
            }
          } else {
            this._writing = false;
            this.emit("error", err);
          }
          return;
        }
        this.emit("write", n);
        const releasedBufObj = releaseWritingBuf(this._writingBuf, this._len, n);
        this._len = releasedBufObj.len;
        this._writingBuf = releasedBufObj.writingBuf;
        if (this._writingBuf.length) {
          if (!this.sync) {
            fsWrite();
            return;
          }
          try {
            do {
              const n2 = fsWriteSync();
              const releasedBufObj2 = releaseWritingBuf(this._writingBuf, this._len, n2);
              this._len = releasedBufObj2.len;
              this._writingBuf = releasedBufObj2.writingBuf;
            } while (this._writingBuf.length);
          } catch (err2) {
            this.release(err2);
            return;
          }
        }
        if (this._fsync) {
          fs5.fsyncSync(this.fd);
        }
        const len = this._len;
        if (this._reopening) {
          this._writing = false;
          this._reopening = false;
          this.reopen();
        } else if (len > this.minLength) {
          this._actualWrite();
        } else if (this._ending) {
          if (len > 0) {
            this._actualWrite();
          } else {
            this._writing = false;
            actualClose(this);
          }
        } else {
          this._writing = false;
          if (this.sync) {
            if (!this._asyncDrainScheduled) {
              this._asyncDrainScheduled = true;
              process.nextTick(emitDrain, this);
            }
          } else {
            this.emit("drain");
          }
        }
      };
      this.on("newListener", function(name) {
        if (name === "drain") {
          this._asyncDrainScheduled = false;
        }
      });
      if (this._periodicFlush !== 0) {
        this._periodicFlushTimer = setInterval(() => this.flush(null), this._periodicFlush);
        this._periodicFlushTimer.unref();
      }
    }
    function releaseWritingBuf(writingBuf, len, n) {
      if (typeof writingBuf === "string" && Buffer.byteLength(writingBuf) !== n) {
        n = Buffer.from(writingBuf).subarray(0, n).toString().length;
      }
      len = Math.max(len - n, 0);
      writingBuf = writingBuf.slice(n);
      return { writingBuf, len };
    }
    function emitDrain(sonic) {
      const hasListeners = sonic.listenerCount("drain") > 0;
      if (!hasListeners)
        return;
      sonic._asyncDrainScheduled = false;
      sonic.emit("drain");
    }
    inherits(SonicBoom, EventEmitter);
    function mergeBuf(bufs, len) {
      if (bufs.length === 0) {
        return kEmptyBuffer;
      }
      if (bufs.length === 1) {
        return bufs[0];
      }
      return Buffer.concat(bufs, len);
    }
    function write(data) {
      if (this.destroyed) {
        throw new Error("SonicBoom destroyed");
      }
      const len = this._len + data.length;
      const bufs = this._bufs;
      if (this.maxLength && len > this.maxLength) {
        this.emit("drop", data);
        return this._len < this._hwm;
      }
      if (bufs.length === 0 || bufs[bufs.length - 1].length + data.length > this.maxWrite) {
        bufs.push("" + data);
      } else {
        bufs[bufs.length - 1] += data;
      }
      this._len = len;
      if (!this._writing && this._len >= this.minLength) {
        this._actualWrite();
      }
      return this._len < this._hwm;
    }
    function writeBuffer(data) {
      if (this.destroyed) {
        throw new Error("SonicBoom destroyed");
      }
      const len = this._len + data.length;
      const bufs = this._bufs;
      const lens = this._lens;
      if (this.maxLength && len > this.maxLength) {
        this.emit("drop", data);
        return this._len < this._hwm;
      }
      if (bufs.length === 0 || lens[lens.length - 1] + data.length > this.maxWrite) {
        bufs.push([data]);
        lens.push(data.length);
      } else {
        bufs[bufs.length - 1].push(data);
        lens[lens.length - 1] += data.length;
      }
      this._len = len;
      if (!this._writing && this._len >= this.minLength) {
        this._actualWrite();
      }
      return this._len < this._hwm;
    }
    function callFlushCallbackOnDrain(cb) {
      this._flushPending = true;
      const onDrain = () => {
        if (!this._fsync) {
          try {
            fs5.fsync(this.fd, (err) => {
              this._flushPending = false;
              cb(err);
            });
          } catch (err) {
            cb(err);
          }
        } else {
          this._flushPending = false;
          cb();
        }
        this.off("error", onError);
      };
      const onError = (err) => {
        this._flushPending = false;
        cb(err);
        this.off("drain", onDrain);
      };
      this.once("drain", onDrain);
      this.once("error", onError);
    }
    function flush(cb) {
      if (cb != null && typeof cb !== "function") {
        throw new Error("flush cb must be a function");
      }
      if (this.destroyed) {
        const error = new Error("SonicBoom destroyed");
        if (cb) {
          cb(error);
          return;
        }
        throw error;
      }
      if (this.minLength <= 0) {
        cb?.();
        return;
      }
      if (cb) {
        callFlushCallbackOnDrain.call(this, cb);
      }
      if (this._writing) {
        return;
      }
      if (this._bufs.length === 0) {
        this._bufs.push("");
      }
      this._actualWrite();
    }
    function flushBuffer(cb) {
      if (cb != null && typeof cb !== "function") {
        throw new Error("flush cb must be a function");
      }
      if (this.destroyed) {
        const error = new Error("SonicBoom destroyed");
        if (cb) {
          cb(error);
          return;
        }
        throw error;
      }
      if (this.minLength <= 0) {
        cb?.();
        return;
      }
      if (cb) {
        callFlushCallbackOnDrain.call(this, cb);
      }
      if (this._writing) {
        return;
      }
      if (this._bufs.length === 0) {
        this._bufs.push([]);
        this._lens.push(0);
      }
      this._actualWrite();
    }
    SonicBoom.prototype.reopen = function(file) {
      if (this.destroyed) {
        throw new Error("SonicBoom destroyed");
      }
      if (this._opening) {
        this.once("ready", () => {
          this.reopen(file);
        });
        return;
      }
      if (this._ending) {
        return;
      }
      if (!this.file) {
        throw new Error("Unable to reopen a file descriptor, you must pass a file to SonicBoom");
      }
      if (file) {
        this.file = file;
      }
      this._reopening = true;
      if (this._writing) {
        return;
      }
      const fd = this.fd;
      this.once("ready", () => {
        if (fd !== this.fd) {
          fs5.close(fd, (err) => {
            if (err) {
              return this.emit("error", err);
            }
          });
        }
      });
      openFile(this.file, this);
    };
    SonicBoom.prototype.end = function() {
      if (this.destroyed) {
        throw new Error("SonicBoom destroyed");
      }
      if (this._opening) {
        this.once("ready", () => {
          this.end();
        });
        return;
      }
      if (this._ending) {
        return;
      }
      this._ending = true;
      if (this._writing) {
        return;
      }
      if (this._len > 0 && this.fd >= 0) {
        this._actualWrite();
      } else {
        actualClose(this);
      }
    };
    function flushSync() {
      if (this.destroyed) {
        throw new Error("SonicBoom destroyed");
      }
      if (this.fd < 0) {
        throw new Error("sonic boom is not ready yet");
      }
      if (!this._writing && this._writingBuf.length > 0) {
        this._bufs.unshift(this._writingBuf);
        this._writingBuf = "";
      }
      let buf = "";
      while (this._bufs.length || buf) {
        if (buf.length <= 0) {
          buf = this._bufs[0];
        }
        try {
          const n = fs5.writeSync(this.fd, buf, "utf8");
          const releasedBufObj = releaseWritingBuf(buf, this._len, n);
          buf = releasedBufObj.writingBuf;
          this._len = releasedBufObj.len;
          if (buf.length <= 0) {
            this._bufs.shift();
          }
        } catch (err) {
          const shouldRetry = err.code === "EAGAIN" || err.code === "EBUSY";
          if (shouldRetry && !this.retryEAGAIN(err, buf.length, this._len - buf.length)) {
            throw err;
          }
          sleep(BUSY_WRITE_TIMEOUT);
        }
      }
      try {
        fs5.fsyncSync(this.fd);
      } catch {
      }
    }
    function flushBufferSync() {
      if (this.destroyed) {
        throw new Error("SonicBoom destroyed");
      }
      if (this.fd < 0) {
        throw new Error("sonic boom is not ready yet");
      }
      if (!this._writing && this._writingBuf.length > 0) {
        this._bufs.unshift([this._writingBuf]);
        this._writingBuf = kEmptyBuffer;
      }
      let buf = kEmptyBuffer;
      while (this._bufs.length || buf.length) {
        if (buf.length <= 0) {
          buf = mergeBuf(this._bufs[0], this._lens[0]);
        }
        try {
          const n = fs5.writeSync(this.fd, buf);
          buf = buf.subarray(n);
          this._len = Math.max(this._len - n, 0);
          if (buf.length <= 0) {
            this._bufs.shift();
            this._lens.shift();
          }
        } catch (err) {
          const shouldRetry = err.code === "EAGAIN" || err.code === "EBUSY";
          if (shouldRetry && !this.retryEAGAIN(err, buf.length, this._len - buf.length)) {
            throw err;
          }
          sleep(BUSY_WRITE_TIMEOUT);
        }
      }
    }
    SonicBoom.prototype.destroy = function() {
      if (this.destroyed) {
        return;
      }
      actualClose(this);
    };
    function actualWrite() {
      const release = this.release;
      this._writing = true;
      this._writingBuf = this._writingBuf || this._bufs.shift() || "";
      if (this.sync) {
        try {
          const written = fs5.writeSync(this.fd, this._writingBuf, "utf8");
          release(null, written);
        } catch (err) {
          release(err);
        }
      } else {
        fs5.write(this.fd, this._writingBuf, "utf8", release);
      }
    }
    function actualWriteBuffer() {
      const release = this.release;
      this._writing = true;
      this._writingBuf = this._writingBuf.length ? this._writingBuf : mergeBuf(this._bufs.shift(), this._lens.shift());
      if (this.sync) {
        try {
          const written = fs5.writeSync(this.fd, this._writingBuf);
          release(null, written);
        } catch (err) {
          release(err);
        }
      } else {
        if (kCopyBuffer) {
          this._writingBuf = Buffer.from(this._writingBuf);
        }
        fs5.write(this.fd, this._writingBuf, release);
      }
    }
    function actualClose(sonic) {
      if (sonic.fd === -1) {
        sonic.once("ready", actualClose.bind(null, sonic));
        return;
      }
      if (sonic._periodicFlushTimer !== void 0) {
        clearInterval(sonic._periodicFlushTimer);
      }
      sonic.destroyed = true;
      sonic._bufs = [];
      sonic._lens = [];
      assert(typeof sonic.fd === "number", `sonic.fd must be a number, got ${typeof sonic.fd}`);
      try {
        fs5.fsync(sonic.fd, closeWrapped);
      } catch {
      }
      function closeWrapped() {
        if (sonic.fd !== 1 && sonic.fd !== 2) {
          fs5.close(sonic.fd, done);
        } else {
          done();
        }
      }
      function done(err) {
        if (err) {
          sonic.emit("error", err);
          return;
        }
        if (sonic._ending && !sonic._writing) {
          sonic.emit("finish");
        }
        sonic.emit("close");
      }
    }
    SonicBoom.SonicBoom = SonicBoom;
    SonicBoom.default = SonicBoom;
    module2.exports = SonicBoom;
  }
});

// node_modules/.pnpm/on-exit-leak-free@2.1.2/node_modules/on-exit-leak-free/index.js
var require_on_exit_leak_free = __commonJS({
  "node_modules/.pnpm/on-exit-leak-free@2.1.2/node_modules/on-exit-leak-free/index.js"(exports2, module2) {
    "use strict";
    var refs = {
      exit: [],
      beforeExit: []
    };
    var functions = {
      exit: onExit,
      beforeExit: onBeforeExit
    };
    var registry;
    function ensureRegistry() {
      if (registry === void 0) {
        registry = new FinalizationRegistry(clear);
      }
    }
    function install(event) {
      if (refs[event].length > 0) {
        return;
      }
      process.on(event, functions[event]);
    }
    function uninstall(event) {
      if (refs[event].length > 0) {
        return;
      }
      process.removeListener(event, functions[event]);
      if (refs.exit.length === 0 && refs.beforeExit.length === 0) {
        registry = void 0;
      }
    }
    function onExit() {
      callRefs("exit");
    }
    function onBeforeExit() {
      callRefs("beforeExit");
    }
    function callRefs(event) {
      for (const ref of refs[event]) {
        const obj = ref.deref();
        const fn = ref.fn;
        if (obj !== void 0) {
          fn(obj, event);
        }
      }
      refs[event] = [];
    }
    function clear(ref) {
      for (const event of ["exit", "beforeExit"]) {
        const index = refs[event].indexOf(ref);
        refs[event].splice(index, index + 1);
        uninstall(event);
      }
    }
    function _register(event, obj, fn) {
      if (obj === void 0) {
        throw new Error("the object can't be undefined");
      }
      install(event);
      const ref = new WeakRef(obj);
      ref.fn = fn;
      ensureRegistry();
      registry.register(obj, ref);
      refs[event].push(ref);
    }
    function register(obj, fn) {
      _register("exit", obj, fn);
    }
    function registerBeforeExit(obj, fn) {
      _register("beforeExit", obj, fn);
    }
    function unregister(obj) {
      if (registry === void 0) {
        return;
      }
      registry.unregister(obj);
      for (const event of ["exit", "beforeExit"]) {
        refs[event] = refs[event].filter((ref) => {
          const _obj = ref.deref();
          return _obj && _obj !== obj;
        });
        uninstall(event);
      }
    }
    module2.exports = {
      register,
      registerBeforeExit,
      unregister
    };
  }
});

// node_modules/.pnpm/thread-stream@3.1.0/node_modules/thread-stream/package.json
var require_package = __commonJS({
  "node_modules/.pnpm/thread-stream@3.1.0/node_modules/thread-stream/package.json"(exports2, module2) {
    module2.exports = {
      name: "thread-stream",
      version: "3.1.0",
      description: "A streaming way to send data to a Node.js Worker Thread",
      main: "index.js",
      types: "index.d.ts",
      dependencies: {
        "real-require": "^0.2.0"
      },
      devDependencies: {
        "@types/node": "^20.1.0",
        "@types/tap": "^15.0.0",
        "@yao-pkg/pkg": "^5.11.5",
        desm: "^1.3.0",
        fastbench: "^1.0.1",
        husky: "^9.0.6",
        "pino-elasticsearch": "^8.0.0",
        "sonic-boom": "^4.0.1",
        standard: "^17.0.0",
        tap: "^16.2.0",
        "ts-node": "^10.8.0",
        typescript: "^5.3.2",
        "why-is-node-running": "^2.2.2"
      },
      scripts: {
        build: "tsc --noEmit",
        test: 'standard && npm run build && npm run transpile && tap "test/**/*.test.*js" && tap --ts test/*.test.*ts',
        "test:ci": "standard && npm run transpile && npm run test:ci:js && npm run test:ci:ts",
        "test:ci:js": 'tap --no-check-coverage --timeout=120 --coverage-report=lcovonly "test/**/*.test.*js"',
        "test:ci:ts": 'tap --ts --no-check-coverage --coverage-report=lcovonly "test/**/*.test.*ts"',
        "test:yarn": 'npm run transpile && tap "test/**/*.test.js" --no-check-coverage',
        transpile: "sh ./test/ts/transpile.sh",
        prepare: "husky install"
      },
      standard: {
        ignore: [
          "test/ts/**/*",
          "test/syntax-error.mjs"
        ]
      },
      repository: {
        type: "git",
        url: "git+https://github.com/mcollina/thread-stream.git"
      },
      keywords: [
        "worker",
        "thread",
        "threads",
        "stream"
      ],
      author: "Matteo Collina <hello@matteocollina.com>",
      license: "MIT",
      bugs: {
        url: "https://github.com/mcollina/thread-stream/issues"
      },
      homepage: "https://github.com/mcollina/thread-stream#readme"
    };
  }
});

// node_modules/.pnpm/thread-stream@3.1.0/node_modules/thread-stream/lib/wait.js
var require_wait = __commonJS({
  "node_modules/.pnpm/thread-stream@3.1.0/node_modules/thread-stream/lib/wait.js"(exports2, module2) {
    "use strict";
    var MAX_TIMEOUT = 1e3;
    function wait(state, index, expected, timeout, done) {
      const max = Date.now() + timeout;
      let current = Atomics.load(state, index);
      if (current === expected) {
        done(null, "ok");
        return;
      }
      let prior = current;
      const check = (backoff) => {
        if (Date.now() > max) {
          done(null, "timed-out");
        } else {
          setTimeout(() => {
            prior = current;
            current = Atomics.load(state, index);
            if (current === prior) {
              check(backoff >= MAX_TIMEOUT ? MAX_TIMEOUT : backoff * 2);
            } else {
              if (current === expected)
                done(null, "ok");
              else
                done(null, "not-equal");
            }
          }, backoff);
        }
      };
      check(1);
    }
    function waitDiff(state, index, expected, timeout, done) {
      const max = Date.now() + timeout;
      let current = Atomics.load(state, index);
      if (current !== expected) {
        done(null, "ok");
        return;
      }
      const check = (backoff) => {
        if (Date.now() > max) {
          done(null, "timed-out");
        } else {
          setTimeout(() => {
            current = Atomics.load(state, index);
            if (current !== expected) {
              done(null, "ok");
            } else {
              check(backoff >= MAX_TIMEOUT ? MAX_TIMEOUT : backoff * 2);
            }
          }, backoff);
        }
      };
      check(1);
    }
    module2.exports = { wait, waitDiff };
  }
});

// node_modules/.pnpm/thread-stream@3.1.0/node_modules/thread-stream/lib/indexes.js
var require_indexes = __commonJS({
  "node_modules/.pnpm/thread-stream@3.1.0/node_modules/thread-stream/lib/indexes.js"(exports2, module2) {
    "use strict";
    var WRITE_INDEX = 4;
    var READ_INDEX = 8;
    module2.exports = {
      WRITE_INDEX,
      READ_INDEX
    };
  }
});

// node_modules/.pnpm/thread-stream@3.1.0/node_modules/thread-stream/index.js
var require_thread_stream = __commonJS({
  "node_modules/.pnpm/thread-stream@3.1.0/node_modules/thread-stream/index.js"(exports2, module2) {
    "use strict";
    var { version } = require_package();
    var { EventEmitter } = require("events");
    var { Worker } = require("worker_threads");
    var { join: join6 } = require("path");
    var { pathToFileURL } = require("url");
    var { wait } = require_wait();
    var {
      WRITE_INDEX,
      READ_INDEX
    } = require_indexes();
    var buffer = require("buffer");
    var assert = require("assert");
    var kImpl = Symbol("kImpl");
    var MAX_STRING = buffer.constants.MAX_STRING_LENGTH;
    var FakeWeakRef = class {
      constructor(value) {
        this._value = value;
      }
      deref() {
        return this._value;
      }
    };
    var FakeFinalizationRegistry = class {
      register() {
      }
      unregister() {
      }
    };
    var FinalizationRegistry2 = process.env.NODE_V8_COVERAGE ? FakeFinalizationRegistry : global.FinalizationRegistry || FakeFinalizationRegistry;
    var WeakRef2 = process.env.NODE_V8_COVERAGE ? FakeWeakRef : global.WeakRef || FakeWeakRef;
    var registry = new FinalizationRegistry2((worker) => {
      if (worker.exited) {
        return;
      }
      worker.terminate();
    });
    function createWorker(stream, opts) {
      const { filename, workerData } = opts;
      const bundlerOverrides = "__bundlerPathsOverrides" in globalThis ? globalThis.__bundlerPathsOverrides : {};
      const toExecute = bundlerOverrides["thread-stream-worker"] || join6(__dirname, "lib", "worker.js");
      const worker = new Worker(toExecute, {
        ...opts.workerOpts,
        trackUnmanagedFds: false,
        workerData: {
          filename: filename.indexOf("file://") === 0 ? filename : pathToFileURL(filename).href,
          dataBuf: stream[kImpl].dataBuf,
          stateBuf: stream[kImpl].stateBuf,
          workerData: {
            $context: {
              threadStreamVersion: version
            },
            ...workerData
          }
        }
      });
      worker.stream = new FakeWeakRef(stream);
      worker.on("message", onWorkerMessage);
      worker.on("exit", onWorkerExit);
      registry.register(stream, worker);
      return worker;
    }
    function drain(stream) {
      assert(!stream[kImpl].sync);
      if (stream[kImpl].needDrain) {
        stream[kImpl].needDrain = false;
        stream.emit("drain");
      }
    }
    function nextFlush(stream) {
      const writeIndex = Atomics.load(stream[kImpl].state, WRITE_INDEX);
      let leftover = stream[kImpl].data.length - writeIndex;
      if (leftover > 0) {
        if (stream[kImpl].buf.length === 0) {
          stream[kImpl].flushing = false;
          if (stream[kImpl].ending) {
            end(stream);
          } else if (stream[kImpl].needDrain) {
            process.nextTick(drain, stream);
          }
          return;
        }
        let toWrite = stream[kImpl].buf.slice(0, leftover);
        let toWriteBytes = Buffer.byteLength(toWrite);
        if (toWriteBytes <= leftover) {
          stream[kImpl].buf = stream[kImpl].buf.slice(leftover);
          write(stream, toWrite, nextFlush.bind(null, stream));
        } else {
          stream.flush(() => {
            if (stream.destroyed) {
              return;
            }
            Atomics.store(stream[kImpl].state, READ_INDEX, 0);
            Atomics.store(stream[kImpl].state, WRITE_INDEX, 0);
            while (toWriteBytes > stream[kImpl].data.length) {
              leftover = leftover / 2;
              toWrite = stream[kImpl].buf.slice(0, leftover);
              toWriteBytes = Buffer.byteLength(toWrite);
            }
            stream[kImpl].buf = stream[kImpl].buf.slice(leftover);
            write(stream, toWrite, nextFlush.bind(null, stream));
          });
        }
      } else if (leftover === 0) {
        if (writeIndex === 0 && stream[kImpl].buf.length === 0) {
          return;
        }
        stream.flush(() => {
          Atomics.store(stream[kImpl].state, READ_INDEX, 0);
          Atomics.store(stream[kImpl].state, WRITE_INDEX, 0);
          nextFlush(stream);
        });
      } else {
        destroy(stream, new Error("overwritten"));
      }
    }
    function onWorkerMessage(msg) {
      const stream = this.stream.deref();
      if (stream === void 0) {
        this.exited = true;
        this.terminate();
        return;
      }
      switch (msg.code) {
        case "READY":
          this.stream = new WeakRef2(stream);
          stream.flush(() => {
            stream[kImpl].ready = true;
            stream.emit("ready");
          });
          break;
        case "ERROR":
          destroy(stream, msg.err);
          break;
        case "EVENT":
          if (Array.isArray(msg.args)) {
            stream.emit(msg.name, ...msg.args);
          } else {
            stream.emit(msg.name, msg.args);
          }
          break;
        case "WARNING":
          process.emitWarning(msg.err);
          break;
        default:
          destroy(stream, new Error("this should not happen: " + msg.code));
      }
    }
    function onWorkerExit(code) {
      const stream = this.stream.deref();
      if (stream === void 0) {
        return;
      }
      registry.unregister(stream);
      stream.worker.exited = true;
      stream.worker.off("exit", onWorkerExit);
      destroy(stream, code !== 0 ? new Error("the worker thread exited") : null);
    }
    var ThreadStream = class extends EventEmitter {
      constructor(opts = {}) {
        super();
        if (opts.bufferSize < 4) {
          throw new Error("bufferSize must at least fit a 4-byte utf-8 char");
        }
        this[kImpl] = {};
        this[kImpl].stateBuf = new SharedArrayBuffer(128);
        this[kImpl].state = new Int32Array(this[kImpl].stateBuf);
        this[kImpl].dataBuf = new SharedArrayBuffer(opts.bufferSize || 4 * 1024 * 1024);
        this[kImpl].data = Buffer.from(this[kImpl].dataBuf);
        this[kImpl].sync = opts.sync || false;
        this[kImpl].ending = false;
        this[kImpl].ended = false;
        this[kImpl].needDrain = false;
        this[kImpl].destroyed = false;
        this[kImpl].flushing = false;
        this[kImpl].ready = false;
        this[kImpl].finished = false;
        this[kImpl].errored = null;
        this[kImpl].closed = false;
        this[kImpl].buf = "";
        this.worker = createWorker(this, opts);
        this.on("message", (message, transferList) => {
          this.worker.postMessage(message, transferList);
        });
      }
      write(data) {
        if (this[kImpl].destroyed) {
          error(this, new Error("the worker has exited"));
          return false;
        }
        if (this[kImpl].ending) {
          error(this, new Error("the worker is ending"));
          return false;
        }
        if (this[kImpl].flushing && this[kImpl].buf.length + data.length >= MAX_STRING) {
          try {
            writeSync(this);
            this[kImpl].flushing = true;
          } catch (err) {
            destroy(this, err);
            return false;
          }
        }
        this[kImpl].buf += data;
        if (this[kImpl].sync) {
          try {
            writeSync(this);
            return true;
          } catch (err) {
            destroy(this, err);
            return false;
          }
        }
        if (!this[kImpl].flushing) {
          this[kImpl].flushing = true;
          setImmediate(nextFlush, this);
        }
        this[kImpl].needDrain = this[kImpl].data.length - this[kImpl].buf.length - Atomics.load(this[kImpl].state, WRITE_INDEX) <= 0;
        return !this[kImpl].needDrain;
      }
      end() {
        if (this[kImpl].destroyed) {
          return;
        }
        this[kImpl].ending = true;
        end(this);
      }
      flush(cb) {
        if (this[kImpl].destroyed) {
          if (typeof cb === "function") {
            process.nextTick(cb, new Error("the worker has exited"));
          }
          return;
        }
        const writeIndex = Atomics.load(this[kImpl].state, WRITE_INDEX);
        wait(this[kImpl].state, READ_INDEX, writeIndex, Infinity, (err, res) => {
          if (err) {
            destroy(this, err);
            process.nextTick(cb, err);
            return;
          }
          if (res === "not-equal") {
            this.flush(cb);
            return;
          }
          process.nextTick(cb);
        });
      }
      flushSync() {
        if (this[kImpl].destroyed) {
          return;
        }
        writeSync(this);
        flushSync(this);
      }
      unref() {
        this.worker.unref();
      }
      ref() {
        this.worker.ref();
      }
      get ready() {
        return this[kImpl].ready;
      }
      get destroyed() {
        return this[kImpl].destroyed;
      }
      get closed() {
        return this[kImpl].closed;
      }
      get writable() {
        return !this[kImpl].destroyed && !this[kImpl].ending;
      }
      get writableEnded() {
        return this[kImpl].ending;
      }
      get writableFinished() {
        return this[kImpl].finished;
      }
      get writableNeedDrain() {
        return this[kImpl].needDrain;
      }
      get writableObjectMode() {
        return false;
      }
      get writableErrored() {
        return this[kImpl].errored;
      }
    };
    function error(stream, err) {
      setImmediate(() => {
        stream.emit("error", err);
      });
    }
    function destroy(stream, err) {
      if (stream[kImpl].destroyed) {
        return;
      }
      stream[kImpl].destroyed = true;
      if (err) {
        stream[kImpl].errored = err;
        error(stream, err);
      }
      if (!stream.worker.exited) {
        stream.worker.terminate().catch(() => {
        }).then(() => {
          stream[kImpl].closed = true;
          stream.emit("close");
        });
      } else {
        setImmediate(() => {
          stream[kImpl].closed = true;
          stream.emit("close");
        });
      }
    }
    function write(stream, data, cb) {
      const current = Atomics.load(stream[kImpl].state, WRITE_INDEX);
      const length = Buffer.byteLength(data);
      stream[kImpl].data.write(data, current);
      Atomics.store(stream[kImpl].state, WRITE_INDEX, current + length);
      Atomics.notify(stream[kImpl].state, WRITE_INDEX);
      cb();
      return true;
    }
    function end(stream) {
      if (stream[kImpl].ended || !stream[kImpl].ending || stream[kImpl].flushing) {
        return;
      }
      stream[kImpl].ended = true;
      try {
        stream.flushSync();
        let readIndex = Atomics.load(stream[kImpl].state, READ_INDEX);
        Atomics.store(stream[kImpl].state, WRITE_INDEX, -1);
        Atomics.notify(stream[kImpl].state, WRITE_INDEX);
        let spins = 0;
        while (readIndex !== -1) {
          Atomics.wait(stream[kImpl].state, READ_INDEX, readIndex, 1e3);
          readIndex = Atomics.load(stream[kImpl].state, READ_INDEX);
          if (readIndex === -2) {
            destroy(stream, new Error("end() failed"));
            return;
          }
          if (++spins === 10) {
            destroy(stream, new Error("end() took too long (10s)"));
            return;
          }
        }
        process.nextTick(() => {
          stream[kImpl].finished = true;
          stream.emit("finish");
        });
      } catch (err) {
        destroy(stream, err);
      }
    }
    function writeSync(stream) {
      const cb = () => {
        if (stream[kImpl].ending) {
          end(stream);
        } else if (stream[kImpl].needDrain) {
          process.nextTick(drain, stream);
        }
      };
      stream[kImpl].flushing = false;
      while (stream[kImpl].buf.length !== 0) {
        const writeIndex = Atomics.load(stream[kImpl].state, WRITE_INDEX);
        let leftover = stream[kImpl].data.length - writeIndex;
        if (leftover === 0) {
          flushSync(stream);
          Atomics.store(stream[kImpl].state, READ_INDEX, 0);
          Atomics.store(stream[kImpl].state, WRITE_INDEX, 0);
          continue;
        } else if (leftover < 0) {
          throw new Error("overwritten");
        }
        let toWrite = stream[kImpl].buf.slice(0, leftover);
        let toWriteBytes = Buffer.byteLength(toWrite);
        if (toWriteBytes <= leftover) {
          stream[kImpl].buf = stream[kImpl].buf.slice(leftover);
          write(stream, toWrite, cb);
        } else {
          flushSync(stream);
          Atomics.store(stream[kImpl].state, READ_INDEX, 0);
          Atomics.store(stream[kImpl].state, WRITE_INDEX, 0);
          while (toWriteBytes > stream[kImpl].buf.length) {
            leftover = leftover / 2;
            toWrite = stream[kImpl].buf.slice(0, leftover);
            toWriteBytes = Buffer.byteLength(toWrite);
          }
          stream[kImpl].buf = stream[kImpl].buf.slice(leftover);
          write(stream, toWrite, cb);
        }
      }
    }
    function flushSync(stream) {
      if (stream[kImpl].flushing) {
        throw new Error("unable to flush while flushing");
      }
      const writeIndex = Atomics.load(stream[kImpl].state, WRITE_INDEX);
      let spins = 0;
      while (true) {
        const readIndex = Atomics.load(stream[kImpl].state, READ_INDEX);
        if (readIndex === -2) {
          throw Error("_flushSync failed");
        }
        if (readIndex !== writeIndex) {
          Atomics.wait(stream[kImpl].state, READ_INDEX, readIndex, 1e3);
        } else {
          break;
        }
        if (++spins === 10) {
          throw new Error("_flushSync took too long (10s)");
        }
      }
    }
    module2.exports = ThreadStream;
  }
});

// node_modules/.pnpm/pino@9.6.0/node_modules/pino/lib/transport.js
var require_transport = __commonJS({
  "node_modules/.pnpm/pino@9.6.0/node_modules/pino/lib/transport.js"(exports2, module2) {
    "use strict";
    var { createRequire } = require("module");
    var getCallers = require_caller();
    var { join: join6, isAbsolute, sep } = require("node:path");
    var sleep = require_atomic_sleep();
    var onExit = require_on_exit_leak_free();
    var ThreadStream = require_thread_stream();
    function setupOnExit(stream) {
      onExit.register(stream, autoEnd);
      onExit.registerBeforeExit(stream, flush);
      stream.on("close", function() {
        onExit.unregister(stream);
      });
    }
    function buildStream(filename, workerData, workerOpts, sync) {
      const stream = new ThreadStream({
        filename,
        workerData,
        workerOpts,
        sync
      });
      stream.on("ready", onReady);
      stream.on("close", function() {
        process.removeListener("exit", onExit2);
      });
      process.on("exit", onExit2);
      function onReady() {
        process.removeListener("exit", onExit2);
        stream.unref();
        if (workerOpts.autoEnd !== false) {
          setupOnExit(stream);
        }
      }
      function onExit2() {
        if (stream.closed) {
          return;
        }
        stream.flushSync();
        sleep(100);
        stream.end();
      }
      return stream;
    }
    function autoEnd(stream) {
      stream.ref();
      stream.flushSync();
      stream.end();
      stream.once("close", function() {
        stream.unref();
      });
    }
    function flush(stream) {
      stream.flushSync();
    }
    function transport(fullOptions) {
      const { pipeline, targets, levels, dedupe, worker = {}, caller = getCallers(), sync = false } = fullOptions;
      const options = {
        ...fullOptions.options
      };
      const callers = typeof caller === "string" ? [caller] : caller;
      const bundlerOverrides = "__bundlerPathsOverrides" in globalThis ? globalThis.__bundlerPathsOverrides : {};
      let target = fullOptions.target;
      if (target && targets) {
        throw new Error("only one of target or targets can be specified");
      }
      if (targets) {
        target = bundlerOverrides["pino-worker"] || join6(__dirname, "worker.js");
        options.targets = targets.filter((dest) => dest.target).map((dest) => {
          return {
            ...dest,
            target: fixTarget(dest.target)
          };
        });
        options.pipelines = targets.filter((dest) => dest.pipeline).map((dest) => {
          return dest.pipeline.map((t) => {
            return {
              ...t,
              level: dest.level,
              // duplicate the pipeline `level` property defined in the upper level
              target: fixTarget(t.target)
            };
          });
        });
      } else if (pipeline) {
        target = bundlerOverrides["pino-worker"] || join6(__dirname, "worker.js");
        options.pipelines = [pipeline.map((dest) => {
          return {
            ...dest,
            target: fixTarget(dest.target)
          };
        })];
      }
      if (levels) {
        options.levels = levels;
      }
      if (dedupe) {
        options.dedupe = dedupe;
      }
      options.pinoWillSendConfig = true;
      return buildStream(fixTarget(target), options, worker, sync);
      function fixTarget(origin) {
        origin = bundlerOverrides[origin] || origin;
        if (isAbsolute(origin) || origin.indexOf("file://") === 0) {
          return origin;
        }
        if (origin === "pino/file") {
          return join6(__dirname, "..", "file.js");
        }
        let fixTarget2;
        for (const filePath of callers) {
          try {
            const context2 = filePath === "node:repl" ? process.cwd() + sep : filePath;
            fixTarget2 = createRequire(context2).resolve(origin);
            break;
          } catch (err) {
            continue;
          }
        }
        if (!fixTarget2) {
          throw new Error(`unable to determine transport target for "${origin}"`);
        }
        return fixTarget2;
      }
    }
    module2.exports = transport;
  }
});

// node_modules/.pnpm/pino@9.6.0/node_modules/pino/lib/tools.js
var require_tools = __commonJS({
  "node_modules/.pnpm/pino@9.6.0/node_modules/pino/lib/tools.js"(exports2, module2) {
    "use strict";
    var format = require_quick_format_unescaped();
    var { mapHttpRequest, mapHttpResponse } = require_pino_std_serializers();
    var SonicBoom = require_sonic_boom();
    var onExit = require_on_exit_leak_free();
    var {
      lsCacheSym,
      chindingsSym,
      writeSym,
      serializersSym,
      formatOptsSym,
      endSym,
      stringifiersSym,
      stringifySym,
      stringifySafeSym,
      wildcardFirstSym,
      nestedKeySym,
      formattersSym,
      messageKeySym,
      errorKeySym,
      nestedKeyStrSym,
      msgPrefixSym
    } = require_symbols();
    var { isMainThread } = require("worker_threads");
    var transport = require_transport();
    function noop() {
    }
    function genLog(level, hook) {
      if (!hook)
        return LOG;
      return function hookWrappedLog(...args) {
        hook.call(this, args, LOG, level);
      };
      function LOG(o, ...n) {
        if (typeof o === "object") {
          let msg = o;
          if (o !== null) {
            if (o.method && o.headers && o.socket) {
              o = mapHttpRequest(o);
            } else if (typeof o.setHeader === "function") {
              o = mapHttpResponse(o);
            }
          }
          let formatParams;
          if (msg === null && n.length === 0) {
            formatParams = [null];
          } else {
            msg = n.shift();
            formatParams = n;
          }
          if (typeof this[msgPrefixSym] === "string" && msg !== void 0 && msg !== null) {
            msg = this[msgPrefixSym] + msg;
          }
          this[writeSym](o, format(msg, formatParams, this[formatOptsSym]), level);
        } else {
          let msg = o === void 0 ? n.shift() : o;
          if (typeof this[msgPrefixSym] === "string" && msg !== void 0 && msg !== null) {
            msg = this[msgPrefixSym] + msg;
          }
          this[writeSym](null, format(msg, n, this[formatOptsSym]), level);
        }
      }
    }
    function asString(str) {
      let result = "";
      let last = 0;
      let found = false;
      let point = 255;
      const l = str.length;
      if (l > 100) {
        return JSON.stringify(str);
      }
      for (var i = 0; i < l && point >= 32; i++) {
        point = str.charCodeAt(i);
        if (point === 34 || point === 92) {
          result += str.slice(last, i) + "\\";
          last = i;
          found = true;
        }
      }
      if (!found) {
        result = str;
      } else {
        result += str.slice(last);
      }
      return point < 32 ? JSON.stringify(str) : '"' + result + '"';
    }
    function asJson(obj, msg, num, time) {
      const stringify2 = this[stringifySym];
      const stringifySafe = this[stringifySafeSym];
      const stringifiers = this[stringifiersSym];
      const end = this[endSym];
      const chindings = this[chindingsSym];
      const serializers = this[serializersSym];
      const formatters = this[formattersSym];
      const messageKey = this[messageKeySym];
      const errorKey = this[errorKeySym];
      let data = this[lsCacheSym][num] + time;
      data = data + chindings;
      let value;
      if (formatters.log) {
        obj = formatters.log(obj);
      }
      const wildcardStringifier = stringifiers[wildcardFirstSym];
      let propStr = "";
      for (const key in obj) {
        value = obj[key];
        if (Object.prototype.hasOwnProperty.call(obj, key) && value !== void 0) {
          if (serializers[key]) {
            value = serializers[key](value);
          } else if (key === errorKey && serializers.err) {
            value = serializers.err(value);
          }
          const stringifier = stringifiers[key] || wildcardStringifier;
          switch (typeof value) {
            case "undefined":
            case "function":
              continue;
            case "number":
              if (Number.isFinite(value) === false) {
                value = null;
              }
            case "boolean":
              if (stringifier)
                value = stringifier(value);
              break;
            case "string":
              value = (stringifier || asString)(value);
              break;
            default:
              value = (stringifier || stringify2)(value, stringifySafe);
          }
          if (value === void 0)
            continue;
          const strKey = asString(key);
          propStr += "," + strKey + ":" + value;
        }
      }
      let msgStr = "";
      if (msg !== void 0) {
        value = serializers[messageKey] ? serializers[messageKey](msg) : msg;
        const stringifier = stringifiers[messageKey] || wildcardStringifier;
        switch (typeof value) {
          case "function":
            break;
          case "number":
            if (Number.isFinite(value) === false) {
              value = null;
            }
          case "boolean":
            if (stringifier)
              value = stringifier(value);
            msgStr = ',"' + messageKey + '":' + value;
            break;
          case "string":
            value = (stringifier || asString)(value);
            msgStr = ',"' + messageKey + '":' + value;
            break;
          default:
            value = (stringifier || stringify2)(value, stringifySafe);
            msgStr = ',"' + messageKey + '":' + value;
        }
      }
      if (this[nestedKeySym] && propStr) {
        return data + this[nestedKeyStrSym] + propStr.slice(1) + "}" + msgStr + end;
      } else {
        return data + propStr + msgStr + end;
      }
    }
    function asChindings(instance, bindings) {
      let value;
      let data = instance[chindingsSym];
      const stringify2 = instance[stringifySym];
      const stringifySafe = instance[stringifySafeSym];
      const stringifiers = instance[stringifiersSym];
      const wildcardStringifier = stringifiers[wildcardFirstSym];
      const serializers = instance[serializersSym];
      const formatter = instance[formattersSym].bindings;
      bindings = formatter(bindings);
      for (const key in bindings) {
        value = bindings[key];
        const valid = key !== "level" && key !== "serializers" && key !== "formatters" && key !== "customLevels" && bindings.hasOwnProperty(key) && value !== void 0;
        if (valid === true) {
          value = serializers[key] ? serializers[key](value) : value;
          value = (stringifiers[key] || wildcardStringifier || stringify2)(value, stringifySafe);
          if (value === void 0)
            continue;
          data += ',"' + key + '":' + value;
        }
      }
      return data;
    }
    function hasBeenTampered(stream) {
      return stream.write !== stream.constructor.prototype.write;
    }
    var hasNodeCodeCoverage = process.env.NODE_V8_COVERAGE || process.env.V8_COVERAGE;
    function buildSafeSonicBoom(opts) {
      const stream = new SonicBoom(opts);
      stream.on("error", filterBrokenPipe);
      if (!hasNodeCodeCoverage && !opts.sync && isMainThread) {
        onExit.register(stream, autoEnd);
        stream.on("close", function() {
          onExit.unregister(stream);
        });
      }
      return stream;
      function filterBrokenPipe(err) {
        if (err.code === "EPIPE") {
          stream.write = noop;
          stream.end = noop;
          stream.flushSync = noop;
          stream.destroy = noop;
          return;
        }
        stream.removeListener("error", filterBrokenPipe);
        stream.emit("error", err);
      }
    }
    function autoEnd(stream, eventName) {
      if (stream.destroyed) {
        return;
      }
      if (eventName === "beforeExit") {
        stream.flush();
        stream.on("drain", function() {
          stream.end();
        });
      } else {
        stream.flushSync();
      }
    }
    function createArgsNormalizer(defaultOptions) {
      return function normalizeArgs(instance, caller, opts = {}, stream) {
        if (typeof opts === "string") {
          stream = buildSafeSonicBoom({ dest: opts });
          opts = {};
        } else if (typeof stream === "string") {
          if (opts && opts.transport) {
            throw Error("only one of option.transport or stream can be specified");
          }
          stream = buildSafeSonicBoom({ dest: stream });
        } else if (opts instanceof SonicBoom || opts.writable || opts._writableState) {
          stream = opts;
          opts = {};
        } else if (opts.transport) {
          if (opts.transport instanceof SonicBoom || opts.transport.writable || opts.transport._writableState) {
            throw Error("option.transport do not allow stream, please pass to option directly. e.g. pino(transport)");
          }
          if (opts.transport.targets && opts.transport.targets.length && opts.formatters && typeof opts.formatters.level === "function") {
            throw Error("option.transport.targets do not allow custom level formatters");
          }
          let customLevels;
          if (opts.customLevels) {
            customLevels = opts.useOnlyCustomLevels ? opts.customLevels : Object.assign({}, opts.levels, opts.customLevels);
          }
          stream = transport({ caller, ...opts.transport, levels: customLevels });
        }
        opts = Object.assign({}, defaultOptions, opts);
        opts.serializers = Object.assign({}, defaultOptions.serializers, opts.serializers);
        opts.formatters = Object.assign({}, defaultOptions.formatters, opts.formatters);
        if (opts.prettyPrint) {
          throw new Error("prettyPrint option is no longer supported, see the pino-pretty package (https://github.com/pinojs/pino-pretty)");
        }
        const { enabled, onChild } = opts;
        if (enabled === false)
          opts.level = "silent";
        if (!onChild)
          opts.onChild = noop;
        if (!stream) {
          if (!hasBeenTampered(process.stdout)) {
            stream = buildSafeSonicBoom({ fd: process.stdout.fd || 1 });
          } else {
            stream = process.stdout;
          }
        }
        return { opts, stream };
      };
    }
    function stringify(obj, stringifySafeFn) {
      try {
        return JSON.stringify(obj);
      } catch (_) {
        try {
          const stringify2 = stringifySafeFn || this[stringifySafeSym];
          return stringify2(obj);
        } catch (_2) {
          return '"[unable to serialize, circular reference is too complex to analyze]"';
        }
      }
    }
    function buildFormatters(level, bindings, log) {
      return {
        level,
        bindings,
        log
      };
    }
    function normalizeDestFileDescriptor(destination) {
      const fd = Number(destination);
      if (typeof destination === "string" && Number.isFinite(fd)) {
        return fd;
      }
      if (destination === void 0) {
        return 1;
      }
      return destination;
    }
    module2.exports = {
      noop,
      buildSafeSonicBoom,
      asChindings,
      asJson,
      genLog,
      createArgsNormalizer,
      stringify,
      buildFormatters,
      normalizeDestFileDescriptor
    };
  }
});

// node_modules/.pnpm/pino@9.6.0/node_modules/pino/lib/constants.js
var require_constants = __commonJS({
  "node_modules/.pnpm/pino@9.6.0/node_modules/pino/lib/constants.js"(exports2, module2) {
    var DEFAULT_LEVELS = {
      trace: 10,
      debug: 20,
      info: 30,
      warn: 40,
      error: 50,
      fatal: 60
    };
    var SORTING_ORDER = {
      ASC: "ASC",
      DESC: "DESC"
    };
    module2.exports = {
      DEFAULT_LEVELS,
      SORTING_ORDER
    };
  }
});

// node_modules/.pnpm/pino@9.6.0/node_modules/pino/lib/levels.js
var require_levels = __commonJS({
  "node_modules/.pnpm/pino@9.6.0/node_modules/pino/lib/levels.js"(exports2, module2) {
    "use strict";
    var {
      lsCacheSym,
      levelValSym,
      useOnlyCustomLevelsSym,
      streamSym,
      formattersSym,
      hooksSym,
      levelCompSym
    } = require_symbols();
    var { noop, genLog } = require_tools();
    var { DEFAULT_LEVELS, SORTING_ORDER } = require_constants();
    var levelMethods = {
      fatal: (hook) => {
        const logFatal = genLog(DEFAULT_LEVELS.fatal, hook);
        return function(...args) {
          const stream = this[streamSym];
          logFatal.call(this, ...args);
          if (typeof stream.flushSync === "function") {
            try {
              stream.flushSync();
            } catch (e) {
            }
          }
        };
      },
      error: (hook) => genLog(DEFAULT_LEVELS.error, hook),
      warn: (hook) => genLog(DEFAULT_LEVELS.warn, hook),
      info: (hook) => genLog(DEFAULT_LEVELS.info, hook),
      debug: (hook) => genLog(DEFAULT_LEVELS.debug, hook),
      trace: (hook) => genLog(DEFAULT_LEVELS.trace, hook)
    };
    var nums = Object.keys(DEFAULT_LEVELS).reduce((o, k) => {
      o[DEFAULT_LEVELS[k]] = k;
      return o;
    }, {});
    var initialLsCache = Object.keys(nums).reduce((o, k) => {
      o[k] = '{"level":' + Number(k);
      return o;
    }, {});
    function genLsCache(instance) {
      const formatter = instance[formattersSym].level;
      const { labels } = instance.levels;
      const cache = {};
      for (const label in labels) {
        const level = formatter(labels[label], Number(label));
        cache[label] = JSON.stringify(level).slice(0, -1);
      }
      instance[lsCacheSym] = cache;
      return instance;
    }
    function isStandardLevel(level, useOnlyCustomLevels) {
      if (useOnlyCustomLevels) {
        return false;
      }
      switch (level) {
        case "fatal":
        case "error":
        case "warn":
        case "info":
        case "debug":
        case "trace":
          return true;
        default:
          return false;
      }
    }
    function setLevel(level) {
      const { labels, values } = this.levels;
      if (typeof level === "number") {
        if (labels[level] === void 0)
          throw Error("unknown level value" + level);
        level = labels[level];
      }
      if (values[level] === void 0)
        throw Error("unknown level " + level);
      const preLevelVal = this[levelValSym];
      const levelVal = this[levelValSym] = values[level];
      const useOnlyCustomLevelsVal = this[useOnlyCustomLevelsSym];
      const levelComparison = this[levelCompSym];
      const hook = this[hooksSym].logMethod;
      for (const key in values) {
        if (levelComparison(values[key], levelVal) === false) {
          this[key] = noop;
          continue;
        }
        this[key] = isStandardLevel(key, useOnlyCustomLevelsVal) ? levelMethods[key](hook) : genLog(values[key], hook);
      }
      this.emit(
        "level-change",
        level,
        levelVal,
        labels[preLevelVal],
        preLevelVal,
        this
      );
    }
    function getLevel(level) {
      const { levels, levelVal } = this;
      return levels && levels.labels ? levels.labels[levelVal] : "";
    }
    function isLevelEnabled(logLevel) {
      const { values } = this.levels;
      const logLevelVal = values[logLevel];
      return logLevelVal !== void 0 && this[levelCompSym](logLevelVal, this[levelValSym]);
    }
    function compareLevel(direction, current, expected) {
      if (direction === SORTING_ORDER.DESC) {
        return current <= expected;
      }
      return current >= expected;
    }
    function genLevelComparison(levelComparison) {
      if (typeof levelComparison === "string") {
        return compareLevel.bind(null, levelComparison);
      }
      return levelComparison;
    }
    function mappings(customLevels = null, useOnlyCustomLevels = false) {
      const customNums = customLevels ? Object.keys(customLevels).reduce((o, k) => {
        o[customLevels[k]] = k;
        return o;
      }, {}) : null;
      const labels = Object.assign(
        Object.create(Object.prototype, { Infinity: { value: "silent" } }),
        useOnlyCustomLevels ? null : nums,
        customNums
      );
      const values = Object.assign(
        Object.create(Object.prototype, { silent: { value: Infinity } }),
        useOnlyCustomLevels ? null : DEFAULT_LEVELS,
        customLevels
      );
      return { labels, values };
    }
    function assertDefaultLevelFound(defaultLevel, customLevels, useOnlyCustomLevels) {
      if (typeof defaultLevel === "number") {
        const values = [].concat(
          Object.keys(customLevels || {}).map((key) => customLevels[key]),
          useOnlyCustomLevels ? [] : Object.keys(nums).map((level) => +level),
          Infinity
        );
        if (!values.includes(defaultLevel)) {
          throw Error(`default level:${defaultLevel} must be included in custom levels`);
        }
        return;
      }
      const labels = Object.assign(
        Object.create(Object.prototype, { silent: { value: Infinity } }),
        useOnlyCustomLevels ? null : DEFAULT_LEVELS,
        customLevels
      );
      if (!(defaultLevel in labels)) {
        throw Error(`default level:${defaultLevel} must be included in custom levels`);
      }
    }
    function assertNoLevelCollisions(levels, customLevels) {
      const { labels, values } = levels;
      for (const k in customLevels) {
        if (k in values) {
          throw Error("levels cannot be overridden");
        }
        if (customLevels[k] in labels) {
          throw Error("pre-existing level values cannot be used for new levels");
        }
      }
    }
    function assertLevelComparison(levelComparison) {
      if (typeof levelComparison === "function") {
        return;
      }
      if (typeof levelComparison === "string" && Object.values(SORTING_ORDER).includes(levelComparison)) {
        return;
      }
      throw new Error('Levels comparison should be one of "ASC", "DESC" or "function" type');
    }
    module2.exports = {
      initialLsCache,
      genLsCache,
      levelMethods,
      getLevel,
      setLevel,
      isLevelEnabled,
      mappings,
      assertNoLevelCollisions,
      assertDefaultLevelFound,
      genLevelComparison,
      assertLevelComparison
    };
  }
});

// node_modules/.pnpm/pino@9.6.0/node_modules/pino/lib/meta.js
var require_meta = __commonJS({
  "node_modules/.pnpm/pino@9.6.0/node_modules/pino/lib/meta.js"(exports2, module2) {
    "use strict";
    module2.exports = { version: "9.6.0" };
  }
});

// node_modules/.pnpm/pino@9.6.0/node_modules/pino/lib/proto.js
var require_proto = __commonJS({
  "node_modules/.pnpm/pino@9.6.0/node_modules/pino/lib/proto.js"(exports2, module2) {
    "use strict";
    var { EventEmitter } = require("node:events");
    var {
      lsCacheSym,
      levelValSym,
      setLevelSym,
      getLevelSym,
      chindingsSym,
      parsedChindingsSym,
      mixinSym,
      asJsonSym,
      writeSym,
      mixinMergeStrategySym,
      timeSym,
      timeSliceIndexSym,
      streamSym,
      serializersSym,
      formattersSym,
      errorKeySym,
      messageKeySym,
      useOnlyCustomLevelsSym,
      needsMetadataGsym,
      redactFmtSym,
      stringifySym,
      formatOptsSym,
      stringifiersSym,
      msgPrefixSym,
      hooksSym
    } = require_symbols();
    var {
      getLevel,
      setLevel,
      isLevelEnabled,
      mappings,
      initialLsCache,
      genLsCache,
      assertNoLevelCollisions
    } = require_levels();
    var {
      asChindings,
      asJson,
      buildFormatters,
      stringify
    } = require_tools();
    var {
      version
    } = require_meta();
    var redaction = require_redaction();
    var constructor = class Pino {
    };
    var prototype = {
      constructor,
      child,
      bindings,
      setBindings,
      flush,
      isLevelEnabled,
      version,
      get level() {
        return this[getLevelSym]();
      },
      set level(lvl) {
        this[setLevelSym](lvl);
      },
      get levelVal() {
        return this[levelValSym];
      },
      set levelVal(n) {
        throw Error("levelVal is read-only");
      },
      [lsCacheSym]: initialLsCache,
      [writeSym]: write,
      [asJsonSym]: asJson,
      [getLevelSym]: getLevel,
      [setLevelSym]: setLevel
    };
    Object.setPrototypeOf(prototype, EventEmitter.prototype);
    module2.exports = function() {
      return Object.create(prototype);
    };
    var resetChildingsFormatter = (bindings2) => bindings2;
    function child(bindings2, options) {
      if (!bindings2) {
        throw Error("missing bindings for child Pino");
      }
      options = options || {};
      const serializers = this[serializersSym];
      const formatters = this[formattersSym];
      const instance = Object.create(this);
      if (options.hasOwnProperty("serializers") === true) {
        instance[serializersSym] = /* @__PURE__ */ Object.create(null);
        for (const k in serializers) {
          instance[serializersSym][k] = serializers[k];
        }
        const parentSymbols = Object.getOwnPropertySymbols(serializers);
        for (var i = 0; i < parentSymbols.length; i++) {
          const ks = parentSymbols[i];
          instance[serializersSym][ks] = serializers[ks];
        }
        for (const bk in options.serializers) {
          instance[serializersSym][bk] = options.serializers[bk];
        }
        const bindingsSymbols = Object.getOwnPropertySymbols(options.serializers);
        for (var bi = 0; bi < bindingsSymbols.length; bi++) {
          const bks = bindingsSymbols[bi];
          instance[serializersSym][bks] = options.serializers[bks];
        }
      } else
        instance[serializersSym] = serializers;
      if (options.hasOwnProperty("formatters")) {
        const { level, bindings: chindings, log } = options.formatters;
        instance[formattersSym] = buildFormatters(
          level || formatters.level,
          chindings || resetChildingsFormatter,
          log || formatters.log
        );
      } else {
        instance[formattersSym] = buildFormatters(
          formatters.level,
          resetChildingsFormatter,
          formatters.log
        );
      }
      if (options.hasOwnProperty("customLevels") === true) {
        assertNoLevelCollisions(this.levels, options.customLevels);
        instance.levels = mappings(options.customLevels, instance[useOnlyCustomLevelsSym]);
        genLsCache(instance);
      }
      if (typeof options.redact === "object" && options.redact !== null || Array.isArray(options.redact)) {
        instance.redact = options.redact;
        const stringifiers = redaction(instance.redact, stringify);
        const formatOpts = { stringify: stringifiers[redactFmtSym] };
        instance[stringifySym] = stringify;
        instance[stringifiersSym] = stringifiers;
        instance[formatOptsSym] = formatOpts;
      }
      if (typeof options.msgPrefix === "string") {
        instance[msgPrefixSym] = (this[msgPrefixSym] || "") + options.msgPrefix;
      }
      instance[chindingsSym] = asChindings(instance, bindings2);
      const childLevel = options.level || this.level;
      instance[setLevelSym](childLevel);
      this.onChild(instance);
      return instance;
    }
    function bindings() {
      const chindings = this[chindingsSym];
      const chindingsJson = `{${chindings.substr(1)}}`;
      const bindingsFromJson = JSON.parse(chindingsJson);
      delete bindingsFromJson.pid;
      delete bindingsFromJson.hostname;
      return bindingsFromJson;
    }
    function setBindings(newBindings) {
      const chindings = asChindings(this, newBindings);
      this[chindingsSym] = chindings;
      delete this[parsedChindingsSym];
    }
    function defaultMixinMergeStrategy(mergeObject, mixinObject) {
      return Object.assign(mixinObject, mergeObject);
    }
    function write(_obj, msg, num) {
      const t = this[timeSym]();
      const mixin = this[mixinSym];
      const errorKey = this[errorKeySym];
      const messageKey = this[messageKeySym];
      const mixinMergeStrategy = this[mixinMergeStrategySym] || defaultMixinMergeStrategy;
      let obj;
      const streamWriteHook = this[hooksSym].streamWrite;
      if (_obj === void 0 || _obj === null) {
        obj = {};
      } else if (_obj instanceof Error) {
        obj = { [errorKey]: _obj };
        if (msg === void 0) {
          msg = _obj.message;
        }
      } else {
        obj = _obj;
        if (msg === void 0 && _obj[messageKey] === void 0 && _obj[errorKey]) {
          msg = _obj[errorKey].message;
        }
      }
      if (mixin) {
        obj = mixinMergeStrategy(obj, mixin(obj, num, this));
      }
      const s = this[asJsonSym](obj, msg, num, t);
      const stream = this[streamSym];
      if (stream[needsMetadataGsym] === true) {
        stream.lastLevel = num;
        stream.lastObj = obj;
        stream.lastMsg = msg;
        stream.lastTime = t.slice(this[timeSliceIndexSym]);
        stream.lastLogger = this;
      }
      stream.write(streamWriteHook ? streamWriteHook(s) : s);
    }
    function noop() {
    }
    function flush(cb) {
      if (cb != null && typeof cb !== "function") {
        throw Error("callback must be a function");
      }
      const stream = this[streamSym];
      if (typeof stream.flush === "function") {
        stream.flush(cb || noop);
      } else if (cb)
        cb();
    }
  }
});

// node_modules/.pnpm/safe-stable-stringify@2.5.0/node_modules/safe-stable-stringify/index.js
var require_safe_stable_stringify = __commonJS({
  "node_modules/.pnpm/safe-stable-stringify@2.5.0/node_modules/safe-stable-stringify/index.js"(exports2, module2) {
    "use strict";
    var { hasOwnProperty } = Object.prototype;
    var stringify = configure();
    stringify.configure = configure;
    stringify.stringify = stringify;
    stringify.default = stringify;
    exports2.stringify = stringify;
    exports2.configure = configure;
    module2.exports = stringify;
    var strEscapeSequencesRegExp = /[\u0000-\u001f\u0022\u005c\ud800-\udfff]/;
    function strEscape(str) {
      if (str.length < 5e3 && !strEscapeSequencesRegExp.test(str)) {
        return `"${str}"`;
      }
      return JSON.stringify(str);
    }
    function sort(array, comparator) {
      if (array.length > 200 || comparator) {
        return array.sort(comparator);
      }
      for (let i = 1; i < array.length; i++) {
        const currentValue = array[i];
        let position = i;
        while (position !== 0 && array[position - 1] > currentValue) {
          array[position] = array[position - 1];
          position--;
        }
        array[position] = currentValue;
      }
      return array;
    }
    var typedArrayPrototypeGetSymbolToStringTag = Object.getOwnPropertyDescriptor(
      Object.getPrototypeOf(
        Object.getPrototypeOf(
          new Int8Array()
        )
      ),
      Symbol.toStringTag
    ).get;
    function isTypedArrayWithEntries(value) {
      return typedArrayPrototypeGetSymbolToStringTag.call(value) !== void 0 && value.length !== 0;
    }
    function stringifyTypedArray(array, separator, maximumBreadth) {
      if (array.length < maximumBreadth) {
        maximumBreadth = array.length;
      }
      const whitespace = separator === "," ? "" : " ";
      let res = `"0":${whitespace}${array[0]}`;
      for (let i = 1; i < maximumBreadth; i++) {
        res += `${separator}"${i}":${whitespace}${array[i]}`;
      }
      return res;
    }
    function getCircularValueOption(options) {
      if (hasOwnProperty.call(options, "circularValue")) {
        const circularValue = options.circularValue;
        if (typeof circularValue === "string") {
          return `"${circularValue}"`;
        }
        if (circularValue == null) {
          return circularValue;
        }
        if (circularValue === Error || circularValue === TypeError) {
          return {
            toString() {
              throw new TypeError("Converting circular structure to JSON");
            }
          };
        }
        throw new TypeError('The "circularValue" argument must be of type string or the value null or undefined');
      }
      return '"[Circular]"';
    }
    function getDeterministicOption(options) {
      let value;
      if (hasOwnProperty.call(options, "deterministic")) {
        value = options.deterministic;
        if (typeof value !== "boolean" && typeof value !== "function") {
          throw new TypeError('The "deterministic" argument must be of type boolean or comparator function');
        }
      }
      return value === void 0 ? true : value;
    }
    function getBooleanOption(options, key) {
      let value;
      if (hasOwnProperty.call(options, key)) {
        value = options[key];
        if (typeof value !== "boolean") {
          throw new TypeError(`The "${key}" argument must be of type boolean`);
        }
      }
      return value === void 0 ? true : value;
    }
    function getPositiveIntegerOption(options, key) {
      let value;
      if (hasOwnProperty.call(options, key)) {
        value = options[key];
        if (typeof value !== "number") {
          throw new TypeError(`The "${key}" argument must be of type number`);
        }
        if (!Number.isInteger(value)) {
          throw new TypeError(`The "${key}" argument must be an integer`);
        }
        if (value < 1) {
          throw new RangeError(`The "${key}" argument must be >= 1`);
        }
      }
      return value === void 0 ? Infinity : value;
    }
    function getItemCount(number) {
      if (number === 1) {
        return "1 item";
      }
      return `${number} items`;
    }
    function getUniqueReplacerSet(replacerArray) {
      const replacerSet = /* @__PURE__ */ new Set();
      for (const value of replacerArray) {
        if (typeof value === "string" || typeof value === "number") {
          replacerSet.add(String(value));
        }
      }
      return replacerSet;
    }
    function getStrictOption(options) {
      if (hasOwnProperty.call(options, "strict")) {
        const value = options.strict;
        if (typeof value !== "boolean") {
          throw new TypeError('The "strict" argument must be of type boolean');
        }
        if (value) {
          return (value2) => {
            let message = `Object can not safely be stringified. Received type ${typeof value2}`;
            if (typeof value2 !== "function")
              message += ` (${value2.toString()})`;
            throw new Error(message);
          };
        }
      }
    }
    function configure(options) {
      options = { ...options };
      const fail = getStrictOption(options);
      if (fail) {
        if (options.bigint === void 0) {
          options.bigint = false;
        }
        if (!("circularValue" in options)) {
          options.circularValue = Error;
        }
      }
      const circularValue = getCircularValueOption(options);
      const bigint = getBooleanOption(options, "bigint");
      const deterministic = getDeterministicOption(options);
      const comparator = typeof deterministic === "function" ? deterministic : void 0;
      const maximumDepth = getPositiveIntegerOption(options, "maximumDepth");
      const maximumBreadth = getPositiveIntegerOption(options, "maximumBreadth");
      function stringifyFnReplacer(key, parent, stack, replacer, spacer, indentation) {
        let value = parent[key];
        if (typeof value === "object" && value !== null && typeof value.toJSON === "function") {
          value = value.toJSON(key);
        }
        value = replacer.call(parent, key, value);
        switch (typeof value) {
          case "string":
            return strEscape(value);
          case "object": {
            if (value === null) {
              return "null";
            }
            if (stack.indexOf(value) !== -1) {
              return circularValue;
            }
            let res = "";
            let join6 = ",";
            const originalIndentation = indentation;
            if (Array.isArray(value)) {
              if (value.length === 0) {
                return "[]";
              }
              if (maximumDepth < stack.length + 1) {
                return '"[Array]"';
              }
              stack.push(value);
              if (spacer !== "") {
                indentation += spacer;
                res += `
${indentation}`;
                join6 = `,
${indentation}`;
              }
              const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
              let i = 0;
              for (; i < maximumValuesToStringify - 1; i++) {
                const tmp2 = stringifyFnReplacer(String(i), value, stack, replacer, spacer, indentation);
                res += tmp2 !== void 0 ? tmp2 : "null";
                res += join6;
              }
              const tmp = stringifyFnReplacer(String(i), value, stack, replacer, spacer, indentation);
              res += tmp !== void 0 ? tmp : "null";
              if (value.length - 1 > maximumBreadth) {
                const removedKeys = value.length - maximumBreadth - 1;
                res += `${join6}"... ${getItemCount(removedKeys)} not stringified"`;
              }
              if (spacer !== "") {
                res += `
${originalIndentation}`;
              }
              stack.pop();
              return `[${res}]`;
            }
            let keys = Object.keys(value);
            const keyLength = keys.length;
            if (keyLength === 0) {
              return "{}";
            }
            if (maximumDepth < stack.length + 1) {
              return '"[Object]"';
            }
            let whitespace = "";
            let separator = "";
            if (spacer !== "") {
              indentation += spacer;
              join6 = `,
${indentation}`;
              whitespace = " ";
            }
            const maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
            if (deterministic && !isTypedArrayWithEntries(value)) {
              keys = sort(keys, comparator);
            }
            stack.push(value);
            for (let i = 0; i < maximumPropertiesToStringify; i++) {
              const key2 = keys[i];
              const tmp = stringifyFnReplacer(key2, value, stack, replacer, spacer, indentation);
              if (tmp !== void 0) {
                res += `${separator}${strEscape(key2)}:${whitespace}${tmp}`;
                separator = join6;
              }
            }
            if (keyLength > maximumBreadth) {
              const removedKeys = keyLength - maximumBreadth;
              res += `${separator}"...":${whitespace}"${getItemCount(removedKeys)} not stringified"`;
              separator = join6;
            }
            if (spacer !== "" && separator.length > 1) {
              res = `
${indentation}${res}
${originalIndentation}`;
            }
            stack.pop();
            return `{${res}}`;
          }
          case "number":
            return isFinite(value) ? String(value) : fail ? fail(value) : "null";
          case "boolean":
            return value === true ? "true" : "false";
          case "undefined":
            return void 0;
          case "bigint":
            if (bigint) {
              return String(value);
            }
          default:
            return fail ? fail(value) : void 0;
        }
      }
      function stringifyArrayReplacer(key, value, stack, replacer, spacer, indentation) {
        if (typeof value === "object" && value !== null && typeof value.toJSON === "function") {
          value = value.toJSON(key);
        }
        switch (typeof value) {
          case "string":
            return strEscape(value);
          case "object": {
            if (value === null) {
              return "null";
            }
            if (stack.indexOf(value) !== -1) {
              return circularValue;
            }
            const originalIndentation = indentation;
            let res = "";
            let join6 = ",";
            if (Array.isArray(value)) {
              if (value.length === 0) {
                return "[]";
              }
              if (maximumDepth < stack.length + 1) {
                return '"[Array]"';
              }
              stack.push(value);
              if (spacer !== "") {
                indentation += spacer;
                res += `
${indentation}`;
                join6 = `,
${indentation}`;
              }
              const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
              let i = 0;
              for (; i < maximumValuesToStringify - 1; i++) {
                const tmp2 = stringifyArrayReplacer(String(i), value[i], stack, replacer, spacer, indentation);
                res += tmp2 !== void 0 ? tmp2 : "null";
                res += join6;
              }
              const tmp = stringifyArrayReplacer(String(i), value[i], stack, replacer, spacer, indentation);
              res += tmp !== void 0 ? tmp : "null";
              if (value.length - 1 > maximumBreadth) {
                const removedKeys = value.length - maximumBreadth - 1;
                res += `${join6}"... ${getItemCount(removedKeys)} not stringified"`;
              }
              if (spacer !== "") {
                res += `
${originalIndentation}`;
              }
              stack.pop();
              return `[${res}]`;
            }
            stack.push(value);
            let whitespace = "";
            if (spacer !== "") {
              indentation += spacer;
              join6 = `,
${indentation}`;
              whitespace = " ";
            }
            let separator = "";
            for (const key2 of replacer) {
              const tmp = stringifyArrayReplacer(key2, value[key2], stack, replacer, spacer, indentation);
              if (tmp !== void 0) {
                res += `${separator}${strEscape(key2)}:${whitespace}${tmp}`;
                separator = join6;
              }
            }
            if (spacer !== "" && separator.length > 1) {
              res = `
${indentation}${res}
${originalIndentation}`;
            }
            stack.pop();
            return `{${res}}`;
          }
          case "number":
            return isFinite(value) ? String(value) : fail ? fail(value) : "null";
          case "boolean":
            return value === true ? "true" : "false";
          case "undefined":
            return void 0;
          case "bigint":
            if (bigint) {
              return String(value);
            }
          default:
            return fail ? fail(value) : void 0;
        }
      }
      function stringifyIndent(key, value, stack, spacer, indentation) {
        switch (typeof value) {
          case "string":
            return strEscape(value);
          case "object": {
            if (value === null) {
              return "null";
            }
            if (typeof value.toJSON === "function") {
              value = value.toJSON(key);
              if (typeof value !== "object") {
                return stringifyIndent(key, value, stack, spacer, indentation);
              }
              if (value === null) {
                return "null";
              }
            }
            if (stack.indexOf(value) !== -1) {
              return circularValue;
            }
            const originalIndentation = indentation;
            if (Array.isArray(value)) {
              if (value.length === 0) {
                return "[]";
              }
              if (maximumDepth < stack.length + 1) {
                return '"[Array]"';
              }
              stack.push(value);
              indentation += spacer;
              let res2 = `
${indentation}`;
              const join7 = `,
${indentation}`;
              const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
              let i = 0;
              for (; i < maximumValuesToStringify - 1; i++) {
                const tmp2 = stringifyIndent(String(i), value[i], stack, spacer, indentation);
                res2 += tmp2 !== void 0 ? tmp2 : "null";
                res2 += join7;
              }
              const tmp = stringifyIndent(String(i), value[i], stack, spacer, indentation);
              res2 += tmp !== void 0 ? tmp : "null";
              if (value.length - 1 > maximumBreadth) {
                const removedKeys = value.length - maximumBreadth - 1;
                res2 += `${join7}"... ${getItemCount(removedKeys)} not stringified"`;
              }
              res2 += `
${originalIndentation}`;
              stack.pop();
              return `[${res2}]`;
            }
            let keys = Object.keys(value);
            const keyLength = keys.length;
            if (keyLength === 0) {
              return "{}";
            }
            if (maximumDepth < stack.length + 1) {
              return '"[Object]"';
            }
            indentation += spacer;
            const join6 = `,
${indentation}`;
            let res = "";
            let separator = "";
            let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
            if (isTypedArrayWithEntries(value)) {
              res += stringifyTypedArray(value, join6, maximumBreadth);
              keys = keys.slice(value.length);
              maximumPropertiesToStringify -= value.length;
              separator = join6;
            }
            if (deterministic) {
              keys = sort(keys, comparator);
            }
            stack.push(value);
            for (let i = 0; i < maximumPropertiesToStringify; i++) {
              const key2 = keys[i];
              const tmp = stringifyIndent(key2, value[key2], stack, spacer, indentation);
              if (tmp !== void 0) {
                res += `${separator}${strEscape(key2)}: ${tmp}`;
                separator = join6;
              }
            }
            if (keyLength > maximumBreadth) {
              const removedKeys = keyLength - maximumBreadth;
              res += `${separator}"...": "${getItemCount(removedKeys)} not stringified"`;
              separator = join6;
            }
            if (separator !== "") {
              res = `
${indentation}${res}
${originalIndentation}`;
            }
            stack.pop();
            return `{${res}}`;
          }
          case "number":
            return isFinite(value) ? String(value) : fail ? fail(value) : "null";
          case "boolean":
            return value === true ? "true" : "false";
          case "undefined":
            return void 0;
          case "bigint":
            if (bigint) {
              return String(value);
            }
          default:
            return fail ? fail(value) : void 0;
        }
      }
      function stringifySimple(key, value, stack) {
        switch (typeof value) {
          case "string":
            return strEscape(value);
          case "object": {
            if (value === null) {
              return "null";
            }
            if (typeof value.toJSON === "function") {
              value = value.toJSON(key);
              if (typeof value !== "object") {
                return stringifySimple(key, value, stack);
              }
              if (value === null) {
                return "null";
              }
            }
            if (stack.indexOf(value) !== -1) {
              return circularValue;
            }
            let res = "";
            const hasLength = value.length !== void 0;
            if (hasLength && Array.isArray(value)) {
              if (value.length === 0) {
                return "[]";
              }
              if (maximumDepth < stack.length + 1) {
                return '"[Array]"';
              }
              stack.push(value);
              const maximumValuesToStringify = Math.min(value.length, maximumBreadth);
              let i = 0;
              for (; i < maximumValuesToStringify - 1; i++) {
                const tmp2 = stringifySimple(String(i), value[i], stack);
                res += tmp2 !== void 0 ? tmp2 : "null";
                res += ",";
              }
              const tmp = stringifySimple(String(i), value[i], stack);
              res += tmp !== void 0 ? tmp : "null";
              if (value.length - 1 > maximumBreadth) {
                const removedKeys = value.length - maximumBreadth - 1;
                res += `,"... ${getItemCount(removedKeys)} not stringified"`;
              }
              stack.pop();
              return `[${res}]`;
            }
            let keys = Object.keys(value);
            const keyLength = keys.length;
            if (keyLength === 0) {
              return "{}";
            }
            if (maximumDepth < stack.length + 1) {
              return '"[Object]"';
            }
            let separator = "";
            let maximumPropertiesToStringify = Math.min(keyLength, maximumBreadth);
            if (hasLength && isTypedArrayWithEntries(value)) {
              res += stringifyTypedArray(value, ",", maximumBreadth);
              keys = keys.slice(value.length);
              maximumPropertiesToStringify -= value.length;
              separator = ",";
            }
            if (deterministic) {
              keys = sort(keys, comparator);
            }
            stack.push(value);
            for (let i = 0; i < maximumPropertiesToStringify; i++) {
              const key2 = keys[i];
              const tmp = stringifySimple(key2, value[key2], stack);
              if (tmp !== void 0) {
                res += `${separator}${strEscape(key2)}:${tmp}`;
                separator = ",";
              }
            }
            if (keyLength > maximumBreadth) {
              const removedKeys = keyLength - maximumBreadth;
              res += `${separator}"...":"${getItemCount(removedKeys)} not stringified"`;
            }
            stack.pop();
            return `{${res}}`;
          }
          case "number":
            return isFinite(value) ? String(value) : fail ? fail(value) : "null";
          case "boolean":
            return value === true ? "true" : "false";
          case "undefined":
            return void 0;
          case "bigint":
            if (bigint) {
              return String(value);
            }
          default:
            return fail ? fail(value) : void 0;
        }
      }
      function stringify2(value, replacer, space) {
        if (arguments.length > 1) {
          let spacer = "";
          if (typeof space === "number") {
            spacer = " ".repeat(Math.min(space, 10));
          } else if (typeof space === "string") {
            spacer = space.slice(0, 10);
          }
          if (replacer != null) {
            if (typeof replacer === "function") {
              return stringifyFnReplacer("", { "": value }, [], replacer, spacer, "");
            }
            if (Array.isArray(replacer)) {
              return stringifyArrayReplacer("", value, [], getUniqueReplacerSet(replacer), spacer, "");
            }
          }
          if (spacer.length !== 0) {
            return stringifyIndent("", value, [], spacer, "");
          }
        }
        return stringifySimple("", value, []);
      }
      return stringify2;
    }
  }
});

// node_modules/.pnpm/pino@9.6.0/node_modules/pino/lib/multistream.js
var require_multistream = __commonJS({
  "node_modules/.pnpm/pino@9.6.0/node_modules/pino/lib/multistream.js"(exports2, module2) {
    "use strict";
    var metadata = Symbol.for("pino.metadata");
    var { DEFAULT_LEVELS } = require_constants();
    var DEFAULT_INFO_LEVEL = DEFAULT_LEVELS.info;
    function multistream(streamsArray, opts) {
      let counter = 0;
      streamsArray = streamsArray || [];
      opts = opts || { dedupe: false };
      const streamLevels = Object.create(DEFAULT_LEVELS);
      streamLevels.silent = Infinity;
      if (opts.levels && typeof opts.levels === "object") {
        Object.keys(opts.levels).forEach((i) => {
          streamLevels[i] = opts.levels[i];
        });
      }
      const res = {
        write,
        add,
        emit,
        flushSync,
        end,
        minLevel: 0,
        streams: [],
        clone,
        [metadata]: true,
        streamLevels
      };
      if (Array.isArray(streamsArray)) {
        streamsArray.forEach(add, res);
      } else {
        add.call(res, streamsArray);
      }
      streamsArray = null;
      return res;
      function write(data) {
        let dest;
        const level = this.lastLevel;
        const { streams } = this;
        let recordedLevel = 0;
        let stream;
        for (let i = initLoopVar(streams.length, opts.dedupe); checkLoopVar(i, streams.length, opts.dedupe); i = adjustLoopVar(i, opts.dedupe)) {
          dest = streams[i];
          if (dest.level <= level) {
            if (recordedLevel !== 0 && recordedLevel !== dest.level) {
              break;
            }
            stream = dest.stream;
            if (stream[metadata]) {
              const { lastTime, lastMsg, lastObj, lastLogger } = this;
              stream.lastLevel = level;
              stream.lastTime = lastTime;
              stream.lastMsg = lastMsg;
              stream.lastObj = lastObj;
              stream.lastLogger = lastLogger;
            }
            stream.write(data);
            if (opts.dedupe) {
              recordedLevel = dest.level;
            }
          } else if (!opts.dedupe) {
            break;
          }
        }
      }
      function emit(...args) {
        for (const { stream } of this.streams) {
          if (typeof stream.emit === "function") {
            stream.emit(...args);
          }
        }
      }
      function flushSync() {
        for (const { stream } of this.streams) {
          if (typeof stream.flushSync === "function") {
            stream.flushSync();
          }
        }
      }
      function add(dest) {
        if (!dest) {
          return res;
        }
        const isStream = typeof dest.write === "function" || dest.stream;
        const stream_ = dest.write ? dest : dest.stream;
        if (!isStream) {
          throw Error("stream object needs to implement either StreamEntry or DestinationStream interface");
        }
        const { streams, streamLevels: streamLevels2 } = this;
        let level;
        if (typeof dest.levelVal === "number") {
          level = dest.levelVal;
        } else if (typeof dest.level === "string") {
          level = streamLevels2[dest.level];
        } else if (typeof dest.level === "number") {
          level = dest.level;
        } else {
          level = DEFAULT_INFO_LEVEL;
        }
        const dest_ = {
          stream: stream_,
          level,
          levelVal: void 0,
          id: counter++
        };
        streams.unshift(dest_);
        streams.sort(compareByLevel);
        this.minLevel = streams[0].level;
        return res;
      }
      function end() {
        for (const { stream } of this.streams) {
          if (typeof stream.flushSync === "function") {
            stream.flushSync();
          }
          stream.end();
        }
      }
      function clone(level) {
        const streams = new Array(this.streams.length);
        for (let i = 0; i < streams.length; i++) {
          streams[i] = {
            level,
            stream: this.streams[i].stream
          };
        }
        return {
          write,
          add,
          minLevel: level,
          streams,
          clone,
          emit,
          flushSync,
          [metadata]: true
        };
      }
    }
    function compareByLevel(a, b) {
      return a.level - b.level;
    }
    function initLoopVar(length, dedupe) {
      return dedupe ? length - 1 : 0;
    }
    function adjustLoopVar(i, dedupe) {
      return dedupe ? i - 1 : i + 1;
    }
    function checkLoopVar(i, length, dedupe) {
      return dedupe ? i >= 0 : i < length;
    }
    module2.exports = multistream;
  }
});

// node_modules/.pnpm/pino@9.6.0/node_modules/pino/pino.js
var require_pino = __commonJS({
  "node_modules/.pnpm/pino@9.6.0/node_modules/pino/pino.js"(exports2, module2) {
    "use strict";
    var os = require("node:os");
    var stdSerializers = require_pino_std_serializers();
    var caller = require_caller();
    var redaction = require_redaction();
    var time = require_time();
    var proto = require_proto();
    var symbols = require_symbols();
    var { configure } = require_safe_stable_stringify();
    var { assertDefaultLevelFound, mappings, genLsCache, genLevelComparison, assertLevelComparison } = require_levels();
    var { DEFAULT_LEVELS, SORTING_ORDER } = require_constants();
    var {
      createArgsNormalizer,
      asChindings,
      buildSafeSonicBoom,
      buildFormatters,
      stringify,
      normalizeDestFileDescriptor,
      noop
    } = require_tools();
    var { version } = require_meta();
    var {
      chindingsSym,
      redactFmtSym,
      serializersSym,
      timeSym,
      timeSliceIndexSym,
      streamSym,
      stringifySym,
      stringifySafeSym,
      stringifiersSym,
      setLevelSym,
      endSym,
      formatOptsSym,
      messageKeySym,
      errorKeySym,
      nestedKeySym,
      mixinSym,
      levelCompSym,
      useOnlyCustomLevelsSym,
      formattersSym,
      hooksSym,
      nestedKeyStrSym,
      mixinMergeStrategySym,
      msgPrefixSym
    } = symbols;
    var { epochTime, nullTime } = time;
    var { pid } = process;
    var hostname = os.hostname();
    var defaultErrorSerializer = stdSerializers.err;
    var defaultOptions = {
      level: "info",
      levelComparison: SORTING_ORDER.ASC,
      levels: DEFAULT_LEVELS,
      messageKey: "msg",
      errorKey: "err",
      nestedKey: null,
      enabled: true,
      base: { pid, hostname },
      serializers: Object.assign(/* @__PURE__ */ Object.create(null), {
        err: defaultErrorSerializer
      }),
      formatters: Object.assign(/* @__PURE__ */ Object.create(null), {
        bindings(bindings) {
          return bindings;
        },
        level(label, number) {
          return { level: number };
        }
      }),
      hooks: {
        logMethod: void 0,
        streamWrite: void 0
      },
      timestamp: epochTime,
      name: void 0,
      redact: null,
      customLevels: null,
      useOnlyCustomLevels: false,
      depthLimit: 5,
      edgeLimit: 100
    };
    var normalize = createArgsNormalizer(defaultOptions);
    var serializers = Object.assign(/* @__PURE__ */ Object.create(null), stdSerializers);
    function pino(...args) {
      const instance = {};
      const { opts, stream } = normalize(instance, caller(), ...args);
      if (opts.level && typeof opts.level === "string" && DEFAULT_LEVELS[opts.level.toLowerCase()] !== void 0)
        opts.level = opts.level.toLowerCase();
      const {
        redact,
        crlf,
        serializers: serializers2,
        timestamp,
        messageKey,
        errorKey,
        nestedKey,
        base,
        name,
        level,
        customLevels,
        levelComparison,
        mixin,
        mixinMergeStrategy,
        useOnlyCustomLevels,
        formatters,
        hooks,
        depthLimit,
        edgeLimit,
        onChild,
        msgPrefix
      } = opts;
      const stringifySafe = configure({
        maximumDepth: depthLimit,
        maximumBreadth: edgeLimit
      });
      const allFormatters = buildFormatters(
        formatters.level,
        formatters.bindings,
        formatters.log
      );
      const stringifyFn = stringify.bind({
        [stringifySafeSym]: stringifySafe
      });
      const stringifiers = redact ? redaction(redact, stringifyFn) : {};
      const formatOpts = redact ? { stringify: stringifiers[redactFmtSym] } : { stringify: stringifyFn };
      const end = "}" + (crlf ? "\r\n" : "\n");
      const coreChindings = asChindings.bind(null, {
        [chindingsSym]: "",
        [serializersSym]: serializers2,
        [stringifiersSym]: stringifiers,
        [stringifySym]: stringify,
        [stringifySafeSym]: stringifySafe,
        [formattersSym]: allFormatters
      });
      let chindings = "";
      if (base !== null) {
        if (name === void 0) {
          chindings = coreChindings(base);
        } else {
          chindings = coreChindings(Object.assign({}, base, { name }));
        }
      }
      const time2 = timestamp instanceof Function ? timestamp : timestamp ? epochTime : nullTime;
      const timeSliceIndex = time2().indexOf(":") + 1;
      if (useOnlyCustomLevels && !customLevels)
        throw Error("customLevels is required if useOnlyCustomLevels is set true");
      if (mixin && typeof mixin !== "function")
        throw Error(`Unknown mixin type "${typeof mixin}" - expected "function"`);
      if (msgPrefix && typeof msgPrefix !== "string")
        throw Error(`Unknown msgPrefix type "${typeof msgPrefix}" - expected "string"`);
      assertDefaultLevelFound(level, customLevels, useOnlyCustomLevels);
      const levels = mappings(customLevels, useOnlyCustomLevels);
      if (typeof stream.emit === "function") {
        stream.emit("message", { code: "PINO_CONFIG", config: { levels, messageKey, errorKey } });
      }
      assertLevelComparison(levelComparison);
      const levelCompFunc = genLevelComparison(levelComparison);
      Object.assign(instance, {
        levels,
        [levelCompSym]: levelCompFunc,
        [useOnlyCustomLevelsSym]: useOnlyCustomLevels,
        [streamSym]: stream,
        [timeSym]: time2,
        [timeSliceIndexSym]: timeSliceIndex,
        [stringifySym]: stringify,
        [stringifySafeSym]: stringifySafe,
        [stringifiersSym]: stringifiers,
        [endSym]: end,
        [formatOptsSym]: formatOpts,
        [messageKeySym]: messageKey,
        [errorKeySym]: errorKey,
        [nestedKeySym]: nestedKey,
        // protect against injection
        [nestedKeyStrSym]: nestedKey ? `,${JSON.stringify(nestedKey)}:{` : "",
        [serializersSym]: serializers2,
        [mixinSym]: mixin,
        [mixinMergeStrategySym]: mixinMergeStrategy,
        [chindingsSym]: chindings,
        [formattersSym]: allFormatters,
        [hooksSym]: hooks,
        silent: noop,
        onChild,
        [msgPrefixSym]: msgPrefix
      });
      Object.setPrototypeOf(instance, proto());
      genLsCache(instance);
      instance[setLevelSym](level);
      return instance;
    }
    module2.exports = pino;
    module2.exports.destination = (dest = process.stdout.fd) => {
      if (typeof dest === "object") {
        dest.dest = normalizeDestFileDescriptor(dest.dest || process.stdout.fd);
        return buildSafeSonicBoom(dest);
      } else {
        return buildSafeSonicBoom({ dest: normalizeDestFileDescriptor(dest), minLength: 0 });
      }
    };
    module2.exports.transport = require_transport();
    module2.exports.multistream = require_multistream();
    module2.exports.levels = mappings();
    module2.exports.stdSerializers = serializers;
    module2.exports.stdTimeFunctions = Object.assign({}, time);
    module2.exports.symbols = symbols;
    module2.exports.version = version;
    module2.exports.default = pino;
    module2.exports.pino = pino;
  }
});

// node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/base/base.js
var require_base = __commonJS({
  "node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/base/base.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Base = exports2.logger = void 0;
    require("dotenv/config");
    var pino_1 = __importDefault(require_pino());
    exports2.logger = (0, pino_1.default)({
      level: "debug"
    });
    var Base = class {
      logger;
      module;
      constructor(module3) {
        this.logger = exports2.logger;
        this.module = module3;
      }
      info(message, ...args) {
        console.log(`[${this.module}] ${message}`, ...args);
      }
    };
    exports2.Base = Base;
  }
});

// node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/base/index.js
var require_base2 = __commonJS({
  "node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/base/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_base(), exports2);
  }
});

// node_modules/.pnpm/@ai-sdk+provider@1.1.0/node_modules/@ai-sdk/provider/dist/index.js
var require_dist = __commonJS({
  "node_modules/.pnpm/@ai-sdk+provider@1.1.0/node_modules/@ai-sdk/provider/dist/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name14 in all)
        __defProp2(target, name14, { get: all[name14], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      AISDKError: () => AISDKError2,
      APICallError: () => APICallError2,
      EmptyResponseBodyError: () => EmptyResponseBodyError2,
      InvalidArgumentError: () => InvalidArgumentError,
      InvalidPromptError: () => InvalidPromptError2,
      InvalidResponseDataError: () => InvalidResponseDataError2,
      JSONParseError: () => JSONParseError2,
      LoadAPIKeyError: () => LoadAPIKeyError2,
      LoadSettingError: () => LoadSettingError,
      NoContentGeneratedError: () => NoContentGeneratedError2,
      NoSuchModelError: () => NoSuchModelError2,
      TooManyEmbeddingValuesForCallError: () => TooManyEmbeddingValuesForCallError,
      TypeValidationError: () => TypeValidationError2,
      UnsupportedFunctionalityError: () => UnsupportedFunctionalityError2,
      getErrorMessage: () => getErrorMessage,
      isJSONArray: () => isJSONArray,
      isJSONObject: () => isJSONObject,
      isJSONValue: () => isJSONValue
    });
    module2.exports = __toCommonJS2(src_exports);
    var marker = "vercel.ai.error";
    var symbol = Symbol.for(marker);
    var _a;
    var _AISDKError = class _AISDKError2 extends Error {
      /**
       * Creates an AI SDK Error.
       *
       * @param {Object} params - The parameters for creating the error.
       * @param {string} params.name - The name of the error.
       * @param {string} params.message - The error message.
       * @param {unknown} [params.cause] - The underlying cause of the error.
       */
      constructor({
        name: name14,
        message,
        cause
      }) {
        super(message);
        this[_a] = true;
        this.name = name14;
        this.cause = cause;
      }
      /**
       * Checks if the given error is an AI SDK Error.
       * @param {unknown} error - The error to check.
       * @returns {boolean} True if the error is an AI SDK Error, false otherwise.
       */
      static isInstance(error) {
        return _AISDKError2.hasMarker(error, marker);
      }
      static hasMarker(error, marker15) {
        const markerSymbol = Symbol.for(marker15);
        return error != null && typeof error === "object" && markerSymbol in error && typeof error[markerSymbol] === "boolean" && error[markerSymbol] === true;
      }
    };
    _a = symbol;
    var AISDKError2 = _AISDKError;
    var name = "AI_APICallError";
    var marker2 = `vercel.ai.error.${name}`;
    var symbol2 = Symbol.for(marker2);
    var _a2;
    var APICallError2 = class extends AISDKError2 {
      constructor({
        message,
        url,
        requestBodyValues,
        statusCode,
        responseHeaders,
        responseBody,
        cause,
        isRetryable = statusCode != null && (statusCode === 408 || // request timeout
        statusCode === 409 || // conflict
        statusCode === 429 || // too many requests
        statusCode >= 500),
        // server error
        data
      }) {
        super({ name, message, cause });
        this[_a2] = true;
        this.url = url;
        this.requestBodyValues = requestBodyValues;
        this.statusCode = statusCode;
        this.responseHeaders = responseHeaders;
        this.responseBody = responseBody;
        this.isRetryable = isRetryable;
        this.data = data;
      }
      static isInstance(error) {
        return AISDKError2.hasMarker(error, marker2);
      }
    };
    _a2 = symbol2;
    var name2 = "AI_EmptyResponseBodyError";
    var marker3 = `vercel.ai.error.${name2}`;
    var symbol3 = Symbol.for(marker3);
    var _a3;
    var EmptyResponseBodyError2 = class extends AISDKError2 {
      // used in isInstance
      constructor({ message = "Empty response body" } = {}) {
        super({ name: name2, message });
        this[_a3] = true;
      }
      static isInstance(error) {
        return AISDKError2.hasMarker(error, marker3);
      }
    };
    _a3 = symbol3;
    function getErrorMessage(error) {
      if (error == null) {
        return "unknown error";
      }
      if (typeof error === "string") {
        return error;
      }
      if (error instanceof Error) {
        return error.message;
      }
      return JSON.stringify(error);
    }
    var name3 = "AI_InvalidArgumentError";
    var marker4 = `vercel.ai.error.${name3}`;
    var symbol4 = Symbol.for(marker4);
    var _a4;
    var InvalidArgumentError = class extends AISDKError2 {
      constructor({
        message,
        cause,
        argument
      }) {
        super({ name: name3, message, cause });
        this[_a4] = true;
        this.argument = argument;
      }
      static isInstance(error) {
        return AISDKError2.hasMarker(error, marker4);
      }
    };
    _a4 = symbol4;
    var name4 = "AI_InvalidPromptError";
    var marker5 = `vercel.ai.error.${name4}`;
    var symbol5 = Symbol.for(marker5);
    var _a5;
    var InvalidPromptError2 = class extends AISDKError2 {
      constructor({
        prompt,
        message,
        cause
      }) {
        super({ name: name4, message: `Invalid prompt: ${message}`, cause });
        this[_a5] = true;
        this.prompt = prompt;
      }
      static isInstance(error) {
        return AISDKError2.hasMarker(error, marker5);
      }
    };
    _a5 = symbol5;
    var name5 = "AI_InvalidResponseDataError";
    var marker6 = `vercel.ai.error.${name5}`;
    var symbol6 = Symbol.for(marker6);
    var _a6;
    var InvalidResponseDataError2 = class extends AISDKError2 {
      constructor({
        data,
        message = `Invalid response data: ${JSON.stringify(data)}.`
      }) {
        super({ name: name5, message });
        this[_a6] = true;
        this.data = data;
      }
      static isInstance(error) {
        return AISDKError2.hasMarker(error, marker6);
      }
    };
    _a6 = symbol6;
    var name6 = "AI_JSONParseError";
    var marker7 = `vercel.ai.error.${name6}`;
    var symbol7 = Symbol.for(marker7);
    var _a7;
    var JSONParseError2 = class extends AISDKError2 {
      constructor({ text, cause }) {
        super({
          name: name6,
          message: `JSON parsing failed: Text: ${text}.
Error message: ${getErrorMessage(cause)}`,
          cause
        });
        this[_a7] = true;
        this.text = text;
      }
      static isInstance(error) {
        return AISDKError2.hasMarker(error, marker7);
      }
    };
    _a7 = symbol7;
    var name7 = "AI_LoadAPIKeyError";
    var marker8 = `vercel.ai.error.${name7}`;
    var symbol8 = Symbol.for(marker8);
    var _a8;
    var LoadAPIKeyError2 = class extends AISDKError2 {
      // used in isInstance
      constructor({ message }) {
        super({ name: name7, message });
        this[_a8] = true;
      }
      static isInstance(error) {
        return AISDKError2.hasMarker(error, marker8);
      }
    };
    _a8 = symbol8;
    var name8 = "AI_LoadSettingError";
    var marker9 = `vercel.ai.error.${name8}`;
    var symbol9 = Symbol.for(marker9);
    var _a9;
    var LoadSettingError = class extends AISDKError2 {
      // used in isInstance
      constructor({ message }) {
        super({ name: name8, message });
        this[_a9] = true;
      }
      static isInstance(error) {
        return AISDKError2.hasMarker(error, marker9);
      }
    };
    _a9 = symbol9;
    var name9 = "AI_NoContentGeneratedError";
    var marker10 = `vercel.ai.error.${name9}`;
    var symbol10 = Symbol.for(marker10);
    var _a10;
    var NoContentGeneratedError2 = class extends AISDKError2 {
      // used in isInstance
      constructor({
        message = "No content generated."
      } = {}) {
        super({ name: name9, message });
        this[_a10] = true;
      }
      static isInstance(error) {
        return AISDKError2.hasMarker(error, marker10);
      }
    };
    _a10 = symbol10;
    var name10 = "AI_NoSuchModelError";
    var marker11 = `vercel.ai.error.${name10}`;
    var symbol11 = Symbol.for(marker11);
    var _a11;
    var NoSuchModelError2 = class extends AISDKError2 {
      constructor({
        errorName = name10,
        modelId,
        modelType,
        message = `No such ${modelType}: ${modelId}`
      }) {
        super({ name: errorName, message });
        this[_a11] = true;
        this.modelId = modelId;
        this.modelType = modelType;
      }
      static isInstance(error) {
        return AISDKError2.hasMarker(error, marker11);
      }
    };
    _a11 = symbol11;
    var name11 = "AI_TooManyEmbeddingValuesForCallError";
    var marker12 = `vercel.ai.error.${name11}`;
    var symbol12 = Symbol.for(marker12);
    var _a12;
    var TooManyEmbeddingValuesForCallError = class extends AISDKError2 {
      constructor(options) {
        super({
          name: name11,
          message: `Too many values for a single embedding call. The ${options.provider} model "${options.modelId}" can only embed up to ${options.maxEmbeddingsPerCall} values per call, but ${options.values.length} values were provided.`
        });
        this[_a12] = true;
        this.provider = options.provider;
        this.modelId = options.modelId;
        this.maxEmbeddingsPerCall = options.maxEmbeddingsPerCall;
        this.values = options.values;
      }
      static isInstance(error) {
        return AISDKError2.hasMarker(error, marker12);
      }
    };
    _a12 = symbol12;
    var name12 = "AI_TypeValidationError";
    var marker13 = `vercel.ai.error.${name12}`;
    var symbol13 = Symbol.for(marker13);
    var _a13;
    var _TypeValidationError = class _TypeValidationError2 extends AISDKError2 {
      constructor({ value, cause }) {
        super({
          name: name12,
          message: `Type validation failed: Value: ${JSON.stringify(value)}.
Error message: ${getErrorMessage(cause)}`,
          cause
        });
        this[_a13] = true;
        this.value = value;
      }
      static isInstance(error) {
        return AISDKError2.hasMarker(error, marker13);
      }
      /**
       * Wraps an error into a TypeValidationError.
       * If the cause is already a TypeValidationError with the same value, it returns the cause.
       * Otherwise, it creates a new TypeValidationError.
       *
       * @param {Object} params - The parameters for wrapping the error.
       * @param {unknown} params.value - The value that failed validation.
       * @param {unknown} params.cause - The original error or cause of the validation failure.
       * @returns {TypeValidationError} A TypeValidationError instance.
       */
      static wrap({
        value,
        cause
      }) {
        return _TypeValidationError2.isInstance(cause) && cause.value === value ? cause : new _TypeValidationError2({ value, cause });
      }
    };
    _a13 = symbol13;
    var TypeValidationError2 = _TypeValidationError;
    var name13 = "AI_UnsupportedFunctionalityError";
    var marker14 = `vercel.ai.error.${name13}`;
    var symbol14 = Symbol.for(marker14);
    var _a14;
    var UnsupportedFunctionalityError2 = class extends AISDKError2 {
      constructor({
        functionality,
        message = `'${functionality}' functionality not supported.`
      }) {
        super({ name: name13, message });
        this[_a14] = true;
        this.functionality = functionality;
      }
      static isInstance(error) {
        return AISDKError2.hasMarker(error, marker14);
      }
    };
    _a14 = symbol14;
    function isJSONValue(value) {
      if (value === null || typeof value === "string" || typeof value === "number" || typeof value === "boolean") {
        return true;
      }
      if (Array.isArray(value)) {
        return value.every(isJSONValue);
      }
      if (typeof value === "object") {
        return Object.entries(value).every(
          ([key, val]) => typeof key === "string" && isJSONValue(val)
        );
      }
      return false;
    }
    function isJSONArray(value) {
      return Array.isArray(value) && value.every(isJSONValue);
    }
    function isJSONObject(value) {
      return value != null && typeof value === "object" && Object.entries(value).every(
        ([key, val]) => typeof key === "string" && isJSONValue(val)
      );
    }
  }
});

// node_modules/.pnpm/nanoid@3.3.11/node_modules/nanoid/non-secure/index.cjs
var require_non_secure = __commonJS({
  "node_modules/.pnpm/nanoid@3.3.11/node_modules/nanoid/non-secure/index.cjs"(exports2, module2) {
    var urlAlphabet = "useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict";
    var customAlphabet = (alphabet, defaultSize = 21) => {
      return (size = defaultSize) => {
        let id = "";
        let i = size | 0;
        while (i--) {
          id += alphabet[Math.random() * alphabet.length | 0];
        }
        return id;
      };
    };
    var nanoid = (size = 21) => {
      let id = "";
      let i = size | 0;
      while (i--) {
        id += urlAlphabet[Math.random() * 64 | 0];
      }
      return id;
    };
    module2.exports = { nanoid, customAlphabet };
  }
});

// node_modules/.pnpm/secure-json-parse@2.7.0/node_modules/secure-json-parse/index.js
var require_secure_json_parse = __commonJS({
  "node_modules/.pnpm/secure-json-parse@2.7.0/node_modules/secure-json-parse/index.js"(exports2, module2) {
    "use strict";
    var hasBuffer = typeof Buffer !== "undefined";
    var suspectProtoRx = /"(?:_|\\u005[Ff])(?:_|\\u005[Ff])(?:p|\\u0070)(?:r|\\u0072)(?:o|\\u006[Ff])(?:t|\\u0074)(?:o|\\u006[Ff])(?:_|\\u005[Ff])(?:_|\\u005[Ff])"\s*:/;
    var suspectConstructorRx = /"(?:c|\\u0063)(?:o|\\u006[Ff])(?:n|\\u006[Ee])(?:s|\\u0073)(?:t|\\u0074)(?:r|\\u0072)(?:u|\\u0075)(?:c|\\u0063)(?:t|\\u0074)(?:o|\\u006[Ff])(?:r|\\u0072)"\s*:/;
    function _parse(text, reviver, options) {
      if (options == null) {
        if (reviver !== null && typeof reviver === "object") {
          options = reviver;
          reviver = void 0;
        }
      }
      if (hasBuffer && Buffer.isBuffer(text)) {
        text = text.toString();
      }
      if (text && text.charCodeAt(0) === 65279) {
        text = text.slice(1);
      }
      const obj = JSON.parse(text, reviver);
      if (obj === null || typeof obj !== "object") {
        return obj;
      }
      const protoAction = options && options.protoAction || "error";
      const constructorAction = options && options.constructorAction || "error";
      if (protoAction === "ignore" && constructorAction === "ignore") {
        return obj;
      }
      if (protoAction !== "ignore" && constructorAction !== "ignore") {
        if (suspectProtoRx.test(text) === false && suspectConstructorRx.test(text) === false) {
          return obj;
        }
      } else if (protoAction !== "ignore" && constructorAction === "ignore") {
        if (suspectProtoRx.test(text) === false) {
          return obj;
        }
      } else {
        if (suspectConstructorRx.test(text) === false) {
          return obj;
        }
      }
      return filter(obj, { protoAction, constructorAction, safe: options && options.safe });
    }
    function filter(obj, { protoAction = "error", constructorAction = "error", safe } = {}) {
      let next = [obj];
      while (next.length) {
        const nodes = next;
        next = [];
        for (const node of nodes) {
          if (protoAction !== "ignore" && Object.prototype.hasOwnProperty.call(node, "__proto__")) {
            if (safe === true) {
              return null;
            } else if (protoAction === "error") {
              throw new SyntaxError("Object contains forbidden prototype property");
            }
            delete node.__proto__;
          }
          if (constructorAction !== "ignore" && Object.prototype.hasOwnProperty.call(node, "constructor") && Object.prototype.hasOwnProperty.call(node.constructor, "prototype")) {
            if (safe === true) {
              return null;
            } else if (constructorAction === "error") {
              throw new SyntaxError("Object contains forbidden prototype property");
            }
            delete node.constructor;
          }
          for (const key in node) {
            const value = node[key];
            if (value && typeof value === "object") {
              next.push(value);
            }
          }
        }
      }
      return obj;
    }
    function parse(text, reviver, options) {
      const stackTraceLimit = Error.stackTraceLimit;
      Error.stackTraceLimit = 0;
      try {
        return _parse(text, reviver, options);
      } finally {
        Error.stackTraceLimit = stackTraceLimit;
      }
    }
    function safeParse(text, reviver) {
      const stackTraceLimit = Error.stackTraceLimit;
      Error.stackTraceLimit = 0;
      try {
        return _parse(text, reviver, { safe: true });
      } catch (_e) {
        return null;
      } finally {
        Error.stackTraceLimit = stackTraceLimit;
      }
    }
    module2.exports = parse;
    module2.exports.default = parse;
    module2.exports.parse = parse;
    module2.exports.safeParse = safeParse;
    module2.exports.scan = filter;
  }
});

// node_modules/.pnpm/eventsource-parser@3.0.0/node_modules/eventsource-parser/dist/index.cjs
var require_dist2 = __commonJS({
  "node_modules/.pnpm/eventsource-parser@3.0.0/node_modules/eventsource-parser/dist/index.cjs"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var __defProp2 = Object.defineProperty;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp2(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __publicField = (obj, key, value) => __defNormalProp(obj, typeof key != "symbol" ? key + "" : key, value);
    var ParseError = class extends Error {
      constructor(message, options) {
        super(message), __publicField(this, "type"), __publicField(this, "field"), __publicField(this, "value"), __publicField(this, "line"), this.name = "ParseError", this.type = options.type, this.field = options.field, this.value = options.value, this.line = options.line;
      }
    };
    function noop(_arg) {
    }
    function createParser(callbacks) {
      const { onEvent = noop, onError = noop, onRetry = noop, onComment } = callbacks;
      let incompleteLine = "", isFirstChunk = true, id, data = "", eventType = "";
      function feed(newChunk) {
        const chunk = isFirstChunk ? newChunk.replace(/^\xEF\xBB\xBF/, "") : newChunk, [complete, incomplete] = splitLines(`${incompleteLine}${chunk}`);
        for (const line of complete)
          parseLine(line);
        incompleteLine = incomplete, isFirstChunk = false;
      }
      function parseLine(line) {
        if (line === "") {
          dispatchEvent();
          return;
        }
        if (line.startsWith(":")) {
          onComment && onComment(line.slice(line.startsWith(": ") ? 2 : 1));
          return;
        }
        const fieldSeparatorIndex = line.indexOf(":");
        if (fieldSeparatorIndex !== -1) {
          const field = line.slice(0, fieldSeparatorIndex), offset = line[fieldSeparatorIndex + 1] === " " ? 2 : 1, value = line.slice(fieldSeparatorIndex + offset);
          processField(field, value, line);
          return;
        }
        processField(line, "", line);
      }
      function processField(field, value, line) {
        switch (field) {
          case "event":
            eventType = value;
            break;
          case "data":
            data = `${data}${value}
`;
            break;
          case "id":
            id = value.includes("\0") ? void 0 : value;
            break;
          case "retry":
            /^\d+$/.test(value) ? onRetry(parseInt(value, 10)) : onError(
              new ParseError(`Invalid \`retry\` value: "${value}"`, {
                type: "invalid-retry",
                value,
                line
              })
            );
            break;
          default:
            onError(
              new ParseError(
                `Unknown field "${field.length > 20 ? `${field.slice(0, 20)}\u2026` : field}"`,
                { type: "unknown-field", field, value, line }
              )
            );
            break;
        }
      }
      function dispatchEvent() {
        data.length > 0 && onEvent({
          id,
          event: eventType || void 0,
          // If the data buffer's last character is a U+000A LINE FEED (LF) character,
          // then remove the last character from the data buffer.
          data: data.endsWith(`
`) ? data.slice(0, -1) : data
        }), id = void 0, data = "", eventType = "";
      }
      function reset(options = {}) {
        incompleteLine && options.consume && parseLine(incompleteLine), id = void 0, data = "", eventType = "", incompleteLine = "";
      }
      return { feed, reset };
    }
    function splitLines(chunk) {
      const lines = [];
      let incompleteLine = "";
      const totalLength = chunk.length;
      for (let i = 0; i < totalLength; i++) {
        const char = chunk[i];
        char === "\r" && chunk[i + 1] === `
` ? (lines.push(incompleteLine), incompleteLine = "", i++) : char === "\r" || char === `
` ? (lines.push(incompleteLine), incompleteLine = "") : incompleteLine += char;
      }
      return [lines, incompleteLine];
    }
    exports2.ParseError = ParseError;
    exports2.createParser = createParser;
  }
});

// node_modules/.pnpm/eventsource-parser@3.0.0/node_modules/eventsource-parser/dist/stream.cjs
var require_stream = __commonJS({
  "node_modules/.pnpm/eventsource-parser@3.0.0/node_modules/eventsource-parser/dist/stream.cjs"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var index = require_dist2();
    var EventSourceParserStream = class extends TransformStream {
      constructor({ onError, onRetry, onComment } = {}) {
        let parser;
        super({
          start(controller) {
            parser = index.createParser({
              onEvent: (event) => {
                controller.enqueue(event);
              },
              onError(error) {
                onError === "terminate" ? controller.error(error) : typeof onError == "function" && onError(error);
              },
              onRetry,
              onComment
            });
          },
          transform(chunk) {
            parser.feed(chunk);
          }
        });
      }
    };
    exports2.ParseError = index.ParseError;
    exports2.EventSourceParserStream = EventSourceParserStream;
  }
});

// node_modules/.pnpm/@ai-sdk+provider-utils@2.2.0_zod@3.24.2/node_modules/@ai-sdk/provider-utils/dist/index.js
var require_dist3 = __commonJS({
  "node_modules/.pnpm/@ai-sdk+provider-utils@2.2.0_zod@3.24.2/node_modules/@ai-sdk/provider-utils/dist/index.js"(exports2, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      asValidator: () => asValidator,
      combineHeaders: () => combineHeaders,
      convertAsyncIteratorToReadableStream: () => convertAsyncIteratorToReadableStream,
      convertBase64ToUint8Array: () => convertBase64ToUint8Array,
      convertUint8ArrayToBase64: () => convertUint8ArrayToBase64,
      createBinaryResponseHandler: () => createBinaryResponseHandler,
      createEventSourceResponseHandler: () => createEventSourceResponseHandler,
      createIdGenerator: () => createIdGenerator2,
      createJsonErrorResponseHandler: () => createJsonErrorResponseHandler,
      createJsonResponseHandler: () => createJsonResponseHandler,
      createJsonStreamResponseHandler: () => createJsonStreamResponseHandler,
      createStatusCodeErrorResponseHandler: () => createStatusCodeErrorResponseHandler,
      delay: () => delay,
      extractResponseHeaders: () => extractResponseHeaders,
      generateId: () => generateId2,
      getErrorMessage: () => getErrorMessage,
      getFromApi: () => getFromApi,
      isAbortError: () => isAbortError,
      isParsableJson: () => isParsableJson,
      isValidator: () => isValidator,
      loadApiKey: () => loadApiKey,
      loadOptionalSetting: () => loadOptionalSetting,
      loadSetting: () => loadSetting,
      parseJSON: () => parseJSON,
      parseProviderOptions: () => parseProviderOptions,
      postJsonToApi: () => postJsonToApi,
      postToApi: () => postToApi,
      removeUndefinedEntries: () => removeUndefinedEntries,
      resolve: () => resolve3,
      safeParseJSON: () => safeParseJSON,
      safeValidateTypes: () => safeValidateTypes,
      validateTypes: () => validateTypes,
      validator: () => validator,
      validatorSymbol: () => validatorSymbol,
      withoutTrailingSlash: () => withoutTrailingSlash,
      zodValidator: () => zodValidator
    });
    module2.exports = __toCommonJS2(src_exports);
    function combineHeaders(...headers) {
      return headers.reduce(
        (combinedHeaders, currentHeaders) => ({
          ...combinedHeaders,
          ...currentHeaders != null ? currentHeaders : {}
        }),
        {}
      );
    }
    function convertAsyncIteratorToReadableStream(iterator) {
      return new ReadableStream({
        /**
         * Called when the consumer wants to pull more data from the stream.
         *
         * @param {ReadableStreamDefaultController<T>} controller - The controller to enqueue data into the stream.
         * @returns {Promise<void>}
         */
        async pull(controller) {
          try {
            const { value, done } = await iterator.next();
            if (done) {
              controller.close();
            } else {
              controller.enqueue(value);
            }
          } catch (error) {
            controller.error(error);
          }
        },
        /**
         * Called when the consumer cancels the stream.
         */
        cancel() {
        }
      });
    }
    async function delay(delayInMs) {
      return delayInMs == null ? Promise.resolve() : new Promise((resolve22) => setTimeout(resolve22, delayInMs));
    }
    function extractResponseHeaders(response) {
      const headers = {};
      response.headers.forEach((value, key) => {
        headers[key] = value;
      });
      return headers;
    }
    var import_provider = require_dist();
    var import_non_secure = require_non_secure();
    var createIdGenerator2 = ({
      prefix,
      size: defaultSize = 16,
      alphabet = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
      separator = "-"
    } = {}) => {
      const generator = (0, import_non_secure.customAlphabet)(alphabet, defaultSize);
      if (prefix == null) {
        return generator;
      }
      if (alphabet.includes(separator)) {
        throw new import_provider.InvalidArgumentError({
          argument: "separator",
          message: `The separator "${separator}" must not be part of the alphabet "${alphabet}".`
        });
      }
      return (size) => `${prefix}${separator}${generator(size)}`;
    };
    var generateId2 = createIdGenerator2();
    function getErrorMessage(error) {
      if (error == null) {
        return "unknown error";
      }
      if (typeof error === "string") {
        return error;
      }
      if (error instanceof Error) {
        return error.message;
      }
      return JSON.stringify(error);
    }
    var import_provider2 = require_dist();
    function removeUndefinedEntries(record) {
      return Object.fromEntries(
        Object.entries(record).filter(([_key, value]) => value != null)
      );
    }
    function isAbortError(error) {
      return error instanceof Error && (error.name === "AbortError" || error.name === "TimeoutError");
    }
    var getOriginalFetch = () => globalThis.fetch;
    var getFromApi = async ({
      url,
      headers = {},
      successfulResponseHandler,
      failedResponseHandler,
      abortSignal,
      fetch: fetch2 = getOriginalFetch()
    }) => {
      try {
        const response = await fetch2(url, {
          method: "GET",
          headers: removeUndefinedEntries(headers),
          signal: abortSignal
        });
        const responseHeaders = extractResponseHeaders(response);
        if (!response.ok) {
          let errorInformation;
          try {
            errorInformation = await failedResponseHandler({
              response,
              url,
              requestBodyValues: {}
            });
          } catch (error) {
            if (isAbortError(error) || import_provider2.APICallError.isInstance(error)) {
              throw error;
            }
            throw new import_provider2.APICallError({
              message: "Failed to process error response",
              cause: error,
              statusCode: response.status,
              url,
              responseHeaders,
              requestBodyValues: {}
            });
          }
          throw errorInformation.value;
        }
        try {
          return await successfulResponseHandler({
            response,
            url,
            requestBodyValues: {}
          });
        } catch (error) {
          if (error instanceof Error) {
            if (isAbortError(error) || import_provider2.APICallError.isInstance(error)) {
              throw error;
            }
          }
          throw new import_provider2.APICallError({
            message: "Failed to process successful response",
            cause: error,
            statusCode: response.status,
            url,
            responseHeaders,
            requestBodyValues: {}
          });
        }
      } catch (error) {
        if (isAbortError(error)) {
          throw error;
        }
        if (error instanceof TypeError && error.message === "fetch failed") {
          const cause = error.cause;
          if (cause != null) {
            throw new import_provider2.APICallError({
              message: `Cannot connect to API: ${cause.message}`,
              cause,
              url,
              isRetryable: true,
              requestBodyValues: {}
            });
          }
        }
        throw error;
      }
    };
    var import_provider3 = require_dist();
    function loadApiKey({
      apiKey,
      environmentVariableName,
      apiKeyParameterName = "apiKey",
      description
    }) {
      if (typeof apiKey === "string") {
        return apiKey;
      }
      if (apiKey != null) {
        throw new import_provider3.LoadAPIKeyError({
          message: `${description} API key must be a string.`
        });
      }
      if (typeof process === "undefined") {
        throw new import_provider3.LoadAPIKeyError({
          message: `${description} API key is missing. Pass it using the '${apiKeyParameterName}' parameter. Environment variables is not supported in this environment.`
        });
      }
      apiKey = process.env[environmentVariableName];
      if (apiKey == null) {
        throw new import_provider3.LoadAPIKeyError({
          message: `${description} API key is missing. Pass it using the '${apiKeyParameterName}' parameter or the ${environmentVariableName} environment variable.`
        });
      }
      if (typeof apiKey !== "string") {
        throw new import_provider3.LoadAPIKeyError({
          message: `${description} API key must be a string. The value of the ${environmentVariableName} environment variable is not a string.`
        });
      }
      return apiKey;
    }
    function loadOptionalSetting({
      settingValue,
      environmentVariableName
    }) {
      if (typeof settingValue === "string") {
        return settingValue;
      }
      if (settingValue != null || typeof process === "undefined") {
        return void 0;
      }
      settingValue = process.env[environmentVariableName];
      if (settingValue == null || typeof settingValue !== "string") {
        return void 0;
      }
      return settingValue;
    }
    var import_provider4 = require_dist();
    function loadSetting({
      settingValue,
      environmentVariableName,
      settingName,
      description
    }) {
      if (typeof settingValue === "string") {
        return settingValue;
      }
      if (settingValue != null) {
        throw new import_provider4.LoadSettingError({
          message: `${description} setting must be a string.`
        });
      }
      if (typeof process === "undefined") {
        throw new import_provider4.LoadSettingError({
          message: `${description} setting is missing. Pass it using the '${settingName}' parameter. Environment variables is not supported in this environment.`
        });
      }
      settingValue = process.env[environmentVariableName];
      if (settingValue == null) {
        throw new import_provider4.LoadSettingError({
          message: `${description} setting is missing. Pass it using the '${settingName}' parameter or the ${environmentVariableName} environment variable.`
        });
      }
      if (typeof settingValue !== "string") {
        throw new import_provider4.LoadSettingError({
          message: `${description} setting must be a string. The value of the ${environmentVariableName} environment variable is not a string.`
        });
      }
      return settingValue;
    }
    var import_provider6 = require_dist();
    var import_secure_json_parse = __toESM2(require_secure_json_parse());
    var import_provider5 = require_dist();
    var validatorSymbol = Symbol.for("vercel.ai.validator");
    function validator(validate) {
      return { [validatorSymbol]: true, validate };
    }
    function isValidator(value) {
      return typeof value === "object" && value !== null && validatorSymbol in value && value[validatorSymbol] === true && "validate" in value;
    }
    function asValidator(value) {
      return isValidator(value) ? value : zodValidator(value);
    }
    function zodValidator(zodSchema2) {
      return validator((value) => {
        const result = zodSchema2.safeParse(value);
        return result.success ? { success: true, value: result.data } : { success: false, error: result.error };
      });
    }
    function validateTypes({
      value,
      schema: inputSchema
    }) {
      const result = safeValidateTypes({ value, schema: inputSchema });
      if (!result.success) {
        throw import_provider5.TypeValidationError.wrap({ value, cause: result.error });
      }
      return result.value;
    }
    function safeValidateTypes({
      value,
      schema
    }) {
      const validator2 = asValidator(schema);
      try {
        if (validator2.validate == null) {
          return { success: true, value };
        }
        const result = validator2.validate(value);
        if (result.success) {
          return result;
        }
        return {
          success: false,
          error: import_provider5.TypeValidationError.wrap({ value, cause: result.error })
        };
      } catch (error) {
        return {
          success: false,
          error: import_provider5.TypeValidationError.wrap({ value, cause: error })
        };
      }
    }
    function parseJSON({
      text,
      schema
    }) {
      try {
        const value = import_secure_json_parse.default.parse(text);
        if (schema == null) {
          return value;
        }
        return validateTypes({ value, schema });
      } catch (error) {
        if (import_provider6.JSONParseError.isInstance(error) || import_provider6.TypeValidationError.isInstance(error)) {
          throw error;
        }
        throw new import_provider6.JSONParseError({ text, cause: error });
      }
    }
    function safeParseJSON({
      text,
      schema
    }) {
      try {
        const value = import_secure_json_parse.default.parse(text);
        if (schema == null) {
          return { success: true, value, rawValue: value };
        }
        const validationResult = safeValidateTypes({ value, schema });
        return validationResult.success ? { ...validationResult, rawValue: value } : validationResult;
      } catch (error) {
        return {
          success: false,
          error: import_provider6.JSONParseError.isInstance(error) ? error : new import_provider6.JSONParseError({ text, cause: error })
        };
      }
    }
    function isParsableJson(input) {
      try {
        import_secure_json_parse.default.parse(input);
        return true;
      } catch (e) {
        return false;
      }
    }
    var import_provider7 = require_dist();
    var getOriginalFetch2 = () => globalThis.fetch;
    var postJsonToApi = async ({
      url,
      headers,
      body,
      failedResponseHandler,
      successfulResponseHandler,
      abortSignal,
      fetch: fetch2
    }) => postToApi({
      url,
      headers: {
        "Content-Type": "application/json",
        ...headers
      },
      body: {
        content: JSON.stringify(body),
        values: body
      },
      failedResponseHandler,
      successfulResponseHandler,
      abortSignal,
      fetch: fetch2
    });
    var postToApi = async ({
      url,
      headers = {},
      body,
      successfulResponseHandler,
      failedResponseHandler,
      abortSignal,
      fetch: fetch2 = getOriginalFetch2()
    }) => {
      try {
        const response = await fetch2(url, {
          method: "POST",
          headers: removeUndefinedEntries(headers),
          body: body.content,
          signal: abortSignal
        });
        const responseHeaders = extractResponseHeaders(response);
        if (!response.ok) {
          let errorInformation;
          try {
            errorInformation = await failedResponseHandler({
              response,
              url,
              requestBodyValues: body.values
            });
          } catch (error) {
            if (isAbortError(error) || import_provider7.APICallError.isInstance(error)) {
              throw error;
            }
            throw new import_provider7.APICallError({
              message: "Failed to process error response",
              cause: error,
              statusCode: response.status,
              url,
              responseHeaders,
              requestBodyValues: body.values
            });
          }
          throw errorInformation.value;
        }
        try {
          return await successfulResponseHandler({
            response,
            url,
            requestBodyValues: body.values
          });
        } catch (error) {
          if (error instanceof Error) {
            if (isAbortError(error) || import_provider7.APICallError.isInstance(error)) {
              throw error;
            }
          }
          throw new import_provider7.APICallError({
            message: "Failed to process successful response",
            cause: error,
            statusCode: response.status,
            url,
            responseHeaders,
            requestBodyValues: body.values
          });
        }
      } catch (error) {
        if (isAbortError(error)) {
          throw error;
        }
        if (error instanceof TypeError && error.message === "fetch failed") {
          const cause = error.cause;
          if (cause != null) {
            throw new import_provider7.APICallError({
              message: `Cannot connect to API: ${cause.message}`,
              cause,
              url,
              requestBodyValues: body.values,
              isRetryable: true
              // retry when network error
            });
          }
        }
        throw error;
      }
    };
    async function resolve3(value) {
      if (typeof value === "function") {
        value = value();
      }
      return Promise.resolve(value);
    }
    var import_provider8 = require_dist();
    var import_stream = require_stream();
    var createJsonErrorResponseHandler = ({
      errorSchema,
      errorToMessage,
      isRetryable
    }) => async ({ response, url, requestBodyValues }) => {
      const responseBody = await response.text();
      const responseHeaders = extractResponseHeaders(response);
      if (responseBody.trim() === "") {
        return {
          responseHeaders,
          value: new import_provider8.APICallError({
            message: response.statusText,
            url,
            requestBodyValues,
            statusCode: response.status,
            responseHeaders,
            responseBody,
            isRetryable: isRetryable == null ? void 0 : isRetryable(response)
          })
        };
      }
      try {
        const parsedError = parseJSON({
          text: responseBody,
          schema: errorSchema
        });
        return {
          responseHeaders,
          value: new import_provider8.APICallError({
            message: errorToMessage(parsedError),
            url,
            requestBodyValues,
            statusCode: response.status,
            responseHeaders,
            responseBody,
            data: parsedError,
            isRetryable: isRetryable == null ? void 0 : isRetryable(response, parsedError)
          })
        };
      } catch (parseError) {
        return {
          responseHeaders,
          value: new import_provider8.APICallError({
            message: response.statusText,
            url,
            requestBodyValues,
            statusCode: response.status,
            responseHeaders,
            responseBody,
            isRetryable: isRetryable == null ? void 0 : isRetryable(response)
          })
        };
      }
    };
    var createEventSourceResponseHandler = (chunkSchema) => async ({ response }) => {
      const responseHeaders = extractResponseHeaders(response);
      if (response.body == null) {
        throw new import_provider8.EmptyResponseBodyError({});
      }
      return {
        responseHeaders,
        value: response.body.pipeThrough(new TextDecoderStream()).pipeThrough(new import_stream.EventSourceParserStream()).pipeThrough(
          new TransformStream({
            transform({ data }, controller) {
              if (data === "[DONE]") {
                return;
              }
              controller.enqueue(
                safeParseJSON({
                  text: data,
                  schema: chunkSchema
                })
              );
            }
          })
        )
      };
    };
    var createJsonStreamResponseHandler = (chunkSchema) => async ({ response }) => {
      const responseHeaders = extractResponseHeaders(response);
      if (response.body == null) {
        throw new import_provider8.EmptyResponseBodyError({});
      }
      let buffer = "";
      return {
        responseHeaders,
        value: response.body.pipeThrough(new TextDecoderStream()).pipeThrough(
          new TransformStream({
            transform(chunkText, controller) {
              if (chunkText.endsWith("\n")) {
                controller.enqueue(
                  safeParseJSON({
                    text: buffer + chunkText,
                    schema: chunkSchema
                  })
                );
                buffer = "";
              } else {
                buffer += chunkText;
              }
            }
          })
        )
      };
    };
    var createJsonResponseHandler = (responseSchema) => async ({ response, url, requestBodyValues }) => {
      const responseBody = await response.text();
      const parsedResult = safeParseJSON({
        text: responseBody,
        schema: responseSchema
      });
      const responseHeaders = extractResponseHeaders(response);
      if (!parsedResult.success) {
        throw new import_provider8.APICallError({
          message: "Invalid JSON response",
          cause: parsedResult.error,
          statusCode: response.status,
          responseHeaders,
          responseBody,
          url,
          requestBodyValues
        });
      }
      return {
        responseHeaders,
        value: parsedResult.value,
        rawValue: parsedResult.rawValue
      };
    };
    var createBinaryResponseHandler = () => async ({ response, url, requestBodyValues }) => {
      const responseHeaders = extractResponseHeaders(response);
      if (!response.body) {
        throw new import_provider8.APICallError({
          message: "Response body is empty",
          url,
          requestBodyValues,
          statusCode: response.status,
          responseHeaders,
          responseBody: void 0
        });
      }
      try {
        const buffer = await response.arrayBuffer();
        return {
          responseHeaders,
          value: new Uint8Array(buffer)
        };
      } catch (error) {
        throw new import_provider8.APICallError({
          message: "Failed to read response as array buffer",
          url,
          requestBodyValues,
          statusCode: response.status,
          responseHeaders,
          responseBody: void 0,
          cause: error
        });
      }
    };
    var createStatusCodeErrorResponseHandler = () => async ({ response, url, requestBodyValues }) => {
      const responseHeaders = extractResponseHeaders(response);
      const responseBody = await response.text();
      return {
        responseHeaders,
        value: new import_provider8.APICallError({
          message: response.statusText,
          url,
          requestBodyValues,
          statusCode: response.status,
          responseHeaders,
          responseBody
        })
      };
    };
    var { btoa, atob: atob2 } = globalThis;
    function convertBase64ToUint8Array(base64String) {
      const base64Url = base64String.replace(/-/g, "+").replace(/_/g, "/");
      const latin1string = atob2(base64Url);
      return Uint8Array.from(latin1string, (byte) => byte.codePointAt(0));
    }
    function convertUint8ArrayToBase64(array) {
      let latin1string = "";
      for (let i = 0; i < array.length; i++) {
        latin1string += String.fromCodePoint(array[i]);
      }
      return btoa(latin1string);
    }
    function withoutTrailingSlash(url) {
      return url == null ? void 0 : url.replace(/\/$/, "");
    }
    var import_provider9 = require_dist();
    function parseProviderOptions({
      provider,
      providerOptions,
      schema
    }) {
      if ((providerOptions == null ? void 0 : providerOptions[provider]) == null) {
        return void 0;
      }
      const parsedProviderOptions = safeValidateTypes({
        value: providerOptions[provider],
        schema
      });
      if (!parsedProviderOptions.success) {
        throw new import_provider9.InvalidArgumentError({
          argument: "providerOptions",
          message: `invalid ${provider} provider options`,
          cause: parsedProviderOptions.error
        });
      }
      return parsedProviderOptions.value;
    }
  }
});

// node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/helpers/util.js
var require_util = __commonJS({
  "node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/helpers/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getParsedType = exports2.ZodParsedType = exports2.objectUtil = exports2.util = void 0;
    var util2;
    (function(util3) {
      util3.assertEqual = (val) => val;
      function assertIs(_arg) {
      }
      util3.assertIs = assertIs;
      function assertNever(_x) {
        throw new Error();
      }
      util3.assertNever = assertNever;
      util3.arrayToEnum = (items) => {
        const obj = {};
        for (const item of items) {
          obj[item] = item;
        }
        return obj;
      };
      util3.getValidEnumValues = (obj) => {
        const validKeys = util3.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
        const filtered = {};
        for (const k of validKeys) {
          filtered[k] = obj[k];
        }
        return util3.objectValues(filtered);
      };
      util3.objectValues = (obj) => {
        return util3.objectKeys(obj).map(function(e) {
          return obj[e];
        });
      };
      util3.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
        const keys = [];
        for (const key in object) {
          if (Object.prototype.hasOwnProperty.call(object, key)) {
            keys.push(key);
          }
        }
        return keys;
      };
      util3.find = (arr, checker) => {
        for (const item of arr) {
          if (checker(item))
            return item;
        }
        return void 0;
      };
      util3.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
      function joinValues(array, separator = " | ") {
        return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
      }
      util3.joinValues = joinValues;
      util3.jsonStringifyReplacer = (_, value) => {
        if (typeof value === "bigint") {
          return value.toString();
        }
        return value;
      };
    })(util2 || (exports2.util = util2 = {}));
    var objectUtil2;
    (function(objectUtil3) {
      objectUtil3.mergeShapes = (first, second) => {
        return {
          ...first,
          ...second
          // second overwrites first
        };
      };
    })(objectUtil2 || (exports2.objectUtil = objectUtil2 = {}));
    exports2.ZodParsedType = util2.arrayToEnum([
      "string",
      "nan",
      "number",
      "integer",
      "float",
      "boolean",
      "date",
      "bigint",
      "symbol",
      "function",
      "undefined",
      "null",
      "array",
      "object",
      "unknown",
      "promise",
      "void",
      "never",
      "map",
      "set"
    ]);
    var getParsedType2 = (data) => {
      const t = typeof data;
      switch (t) {
        case "undefined":
          return exports2.ZodParsedType.undefined;
        case "string":
          return exports2.ZodParsedType.string;
        case "number":
          return isNaN(data) ? exports2.ZodParsedType.nan : exports2.ZodParsedType.number;
        case "boolean":
          return exports2.ZodParsedType.boolean;
        case "function":
          return exports2.ZodParsedType.function;
        case "bigint":
          return exports2.ZodParsedType.bigint;
        case "symbol":
          return exports2.ZodParsedType.symbol;
        case "object":
          if (Array.isArray(data)) {
            return exports2.ZodParsedType.array;
          }
          if (data === null) {
            return exports2.ZodParsedType.null;
          }
          if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
            return exports2.ZodParsedType.promise;
          }
          if (typeof Map !== "undefined" && data instanceof Map) {
            return exports2.ZodParsedType.map;
          }
          if (typeof Set !== "undefined" && data instanceof Set) {
            return exports2.ZodParsedType.set;
          }
          if (typeof Date !== "undefined" && data instanceof Date) {
            return exports2.ZodParsedType.date;
          }
          return exports2.ZodParsedType.object;
        default:
          return exports2.ZodParsedType.unknown;
      }
    };
    exports2.getParsedType = getParsedType2;
  }
});

// node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/ZodError.js
var require_ZodError = __commonJS({
  "node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/ZodError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ZodError = exports2.quotelessJson = exports2.ZodIssueCode = void 0;
    var util_1 = require_util();
    exports2.ZodIssueCode = util_1.util.arrayToEnum([
      "invalid_type",
      "invalid_literal",
      "custom",
      "invalid_union",
      "invalid_union_discriminator",
      "invalid_enum_value",
      "unrecognized_keys",
      "invalid_arguments",
      "invalid_return_type",
      "invalid_date",
      "invalid_string",
      "too_small",
      "too_big",
      "invalid_intersection_types",
      "not_multiple_of",
      "not_finite"
    ]);
    var quotelessJson2 = (obj) => {
      const json = JSON.stringify(obj, null, 2);
      return json.replace(/"([^"]+)":/g, "$1:");
    };
    exports2.quotelessJson = quotelessJson2;
    var ZodError2 = class _ZodError extends Error {
      get errors() {
        return this.issues;
      }
      constructor(issues) {
        super();
        this.issues = [];
        this.addIssue = (sub) => {
          this.issues = [...this.issues, sub];
        };
        this.addIssues = (subs = []) => {
          this.issues = [...this.issues, ...subs];
        };
        const actualProto = new.target.prototype;
        if (Object.setPrototypeOf) {
          Object.setPrototypeOf(this, actualProto);
        } else {
          this.__proto__ = actualProto;
        }
        this.name = "ZodError";
        this.issues = issues;
      }
      format(_mapper) {
        const mapper = _mapper || function(issue) {
          return issue.message;
        };
        const fieldErrors = { _errors: [] };
        const processError = (error) => {
          for (const issue of error.issues) {
            if (issue.code === "invalid_union") {
              issue.unionErrors.map(processError);
            } else if (issue.code === "invalid_return_type") {
              processError(issue.returnTypeError);
            } else if (issue.code === "invalid_arguments") {
              processError(issue.argumentsError);
            } else if (issue.path.length === 0) {
              fieldErrors._errors.push(mapper(issue));
            } else {
              let curr = fieldErrors;
              let i = 0;
              while (i < issue.path.length) {
                const el = issue.path[i];
                const terminal = i === issue.path.length - 1;
                if (!terminal) {
                  curr[el] = curr[el] || { _errors: [] };
                } else {
                  curr[el] = curr[el] || { _errors: [] };
                  curr[el]._errors.push(mapper(issue));
                }
                curr = curr[el];
                i++;
              }
            }
          }
        };
        processError(this);
        return fieldErrors;
      }
      static assert(value) {
        if (!(value instanceof _ZodError)) {
          throw new Error(`Not a ZodError: ${value}`);
        }
      }
      toString() {
        return this.message;
      }
      get message() {
        return JSON.stringify(this.issues, util_1.util.jsonStringifyReplacer, 2);
      }
      get isEmpty() {
        return this.issues.length === 0;
      }
      flatten(mapper = (issue) => issue.message) {
        const fieldErrors = {};
        const formErrors = [];
        for (const sub of this.issues) {
          if (sub.path.length > 0) {
            fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
            fieldErrors[sub.path[0]].push(mapper(sub));
          } else {
            formErrors.push(mapper(sub));
          }
        }
        return { formErrors, fieldErrors };
      }
      get formErrors() {
        return this.flatten();
      }
    };
    exports2.ZodError = ZodError2;
    ZodError2.create = (issues) => {
      const error = new ZodError2(issues);
      return error;
    };
  }
});

// node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/locales/en.js
var require_en = __commonJS({
  "node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/locales/en.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var util_1 = require_util();
    var ZodError_1 = require_ZodError();
    var errorMap2 = (issue, _ctx) => {
      let message;
      switch (issue.code) {
        case ZodError_1.ZodIssueCode.invalid_type:
          if (issue.received === util_1.ZodParsedType.undefined) {
            message = "Required";
          } else {
            message = `Expected ${issue.expected}, received ${issue.received}`;
          }
          break;
        case ZodError_1.ZodIssueCode.invalid_literal:
          message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util_1.util.jsonStringifyReplacer)}`;
          break;
        case ZodError_1.ZodIssueCode.unrecognized_keys:
          message = `Unrecognized key(s) in object: ${util_1.util.joinValues(issue.keys, ", ")}`;
          break;
        case ZodError_1.ZodIssueCode.invalid_union:
          message = `Invalid input`;
          break;
        case ZodError_1.ZodIssueCode.invalid_union_discriminator:
          message = `Invalid discriminator value. Expected ${util_1.util.joinValues(issue.options)}`;
          break;
        case ZodError_1.ZodIssueCode.invalid_enum_value:
          message = `Invalid enum value. Expected ${util_1.util.joinValues(issue.options)}, received '${issue.received}'`;
          break;
        case ZodError_1.ZodIssueCode.invalid_arguments:
          message = `Invalid function arguments`;
          break;
        case ZodError_1.ZodIssueCode.invalid_return_type:
          message = `Invalid function return type`;
          break;
        case ZodError_1.ZodIssueCode.invalid_date:
          message = `Invalid date`;
          break;
        case ZodError_1.ZodIssueCode.invalid_string:
          if (typeof issue.validation === "object") {
            if ("includes" in issue.validation) {
              message = `Invalid input: must include "${issue.validation.includes}"`;
              if (typeof issue.validation.position === "number") {
                message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
              }
            } else if ("startsWith" in issue.validation) {
              message = `Invalid input: must start with "${issue.validation.startsWith}"`;
            } else if ("endsWith" in issue.validation) {
              message = `Invalid input: must end with "${issue.validation.endsWith}"`;
            } else {
              util_1.util.assertNever(issue.validation);
            }
          } else if (issue.validation !== "regex") {
            message = `Invalid ${issue.validation}`;
          } else {
            message = "Invalid";
          }
          break;
        case ZodError_1.ZodIssueCode.too_small:
          if (issue.type === "array")
            message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
          else if (issue.type === "string")
            message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
          else if (issue.type === "number")
            message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
          else if (issue.type === "date")
            message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
          else
            message = "Invalid input";
          break;
        case ZodError_1.ZodIssueCode.too_big:
          if (issue.type === "array")
            message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
          else if (issue.type === "string")
            message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
          else if (issue.type === "number")
            message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
          else if (issue.type === "bigint")
            message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
          else if (issue.type === "date")
            message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
          else
            message = "Invalid input";
          break;
        case ZodError_1.ZodIssueCode.custom:
          message = `Invalid input`;
          break;
        case ZodError_1.ZodIssueCode.invalid_intersection_types:
          message = `Intersection results could not be merged`;
          break;
        case ZodError_1.ZodIssueCode.not_multiple_of:
          message = `Number must be a multiple of ${issue.multipleOf}`;
          break;
        case ZodError_1.ZodIssueCode.not_finite:
          message = "Number must be finite";
          break;
        default:
          message = _ctx.defaultError;
          util_1.util.assertNever(issue);
      }
      return { message };
    };
    exports2.default = errorMap2;
  }
});

// node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/errors.js
var require_errors = __commonJS({
  "node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/errors.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getErrorMap = exports2.setErrorMap = exports2.defaultErrorMap = void 0;
    var en_1 = __importDefault(require_en());
    exports2.defaultErrorMap = en_1.default;
    var overrideErrorMap2 = en_1.default;
    function setErrorMap2(map) {
      overrideErrorMap2 = map;
    }
    exports2.setErrorMap = setErrorMap2;
    function getErrorMap2() {
      return overrideErrorMap2;
    }
    exports2.getErrorMap = getErrorMap2;
  }
});

// node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/helpers/parseUtil.js
var require_parseUtil = __commonJS({
  "node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/helpers/parseUtil.js"(exports2) {
    "use strict";
    var __importDefault = exports2 && exports2.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isAsync = exports2.isValid = exports2.isDirty = exports2.isAborted = exports2.OK = exports2.DIRTY = exports2.INVALID = exports2.ParseStatus = exports2.addIssueToContext = exports2.EMPTY_PATH = exports2.makeIssue = void 0;
    var errors_1 = require_errors();
    var en_1 = __importDefault(require_en());
    var makeIssue2 = (params) => {
      const { data, path: path5, errorMaps, issueData } = params;
      const fullPath = [...path5, ...issueData.path || []];
      const fullIssue = {
        ...issueData,
        path: fullPath
      };
      if (issueData.message !== void 0) {
        return {
          ...issueData,
          path: fullPath,
          message: issueData.message
        };
      }
      let errorMessage = "";
      const maps = errorMaps.filter((m) => !!m).slice().reverse();
      for (const map of maps) {
        errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
      }
      return {
        ...issueData,
        path: fullPath,
        message: errorMessage
      };
    };
    exports2.makeIssue = makeIssue2;
    exports2.EMPTY_PATH = [];
    function addIssueToContext2(ctx, issueData) {
      const overrideMap = (0, errors_1.getErrorMap)();
      const issue = (0, exports2.makeIssue)({
        issueData,
        data: ctx.data,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          // contextual error map is first priority
          ctx.schemaErrorMap,
          // then schema-bound map if available
          overrideMap,
          // then global override map
          overrideMap === en_1.default ? void 0 : en_1.default
          // then global default map
        ].filter((x) => !!x)
      });
      ctx.common.issues.push(issue);
    }
    exports2.addIssueToContext = addIssueToContext2;
    var ParseStatus2 = class _ParseStatus {
      constructor() {
        this.value = "valid";
      }
      dirty() {
        if (this.value === "valid")
          this.value = "dirty";
      }
      abort() {
        if (this.value !== "aborted")
          this.value = "aborted";
      }
      static mergeArray(status, results) {
        const arrayValue = [];
        for (const s of results) {
          if (s.status === "aborted")
            return exports2.INVALID;
          if (s.status === "dirty")
            status.dirty();
          arrayValue.push(s.value);
        }
        return { status: status.value, value: arrayValue };
      }
      static async mergeObjectAsync(status, pairs) {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          syncPairs.push({
            key,
            value
          });
        }
        return _ParseStatus.mergeObjectSync(status, syncPairs);
      }
      static mergeObjectSync(status, pairs) {
        const finalObject = {};
        for (const pair of pairs) {
          const { key, value } = pair;
          if (key.status === "aborted")
            return exports2.INVALID;
          if (value.status === "aborted")
            return exports2.INVALID;
          if (key.status === "dirty")
            status.dirty();
          if (value.status === "dirty")
            status.dirty();
          if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
            finalObject[key.value] = value.value;
          }
        }
        return { status: status.value, value: finalObject };
      }
    };
    exports2.ParseStatus = ParseStatus2;
    exports2.INVALID = Object.freeze({
      status: "aborted"
    });
    var DIRTY2 = (value) => ({ status: "dirty", value });
    exports2.DIRTY = DIRTY2;
    var OK2 = (value) => ({ status: "valid", value });
    exports2.OK = OK2;
    var isAborted2 = (x) => x.status === "aborted";
    exports2.isAborted = isAborted2;
    var isDirty2 = (x) => x.status === "dirty";
    exports2.isDirty = isDirty2;
    var isValid2 = (x) => x.status === "valid";
    exports2.isValid = isValid2;
    var isAsync2 = (x) => typeof Promise !== "undefined" && x instanceof Promise;
    exports2.isAsync = isAsync2;
  }
});

// node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/helpers/typeAliases.js
var require_typeAliases = __commonJS({
  "node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/helpers/typeAliases.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/helpers/errorUtil.js
var require_errorUtil = __commonJS({
  "node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/helpers/errorUtil.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.errorUtil = void 0;
    var errorUtil2;
    (function(errorUtil3) {
      errorUtil3.errToObj = (message) => typeof message === "string" ? { message } : message || {};
      errorUtil3.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
    })(errorUtil2 || (exports2.errorUtil = errorUtil2 = {}));
  }
});

// node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/types.js
var require_types = __commonJS({
  "node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/types.js"(exports2) {
    "use strict";
    var __classPrivateFieldGet2 = exports2 && exports2.__classPrivateFieldGet || function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    var __classPrivateFieldSet2 = exports2 && exports2.__classPrivateFieldSet || function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    var _ZodEnum_cache2;
    var _ZodNativeEnum_cache2;
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.boolean = exports2.bigint = exports2.array = exports2.any = exports2.coerce = exports2.ZodFirstPartyTypeKind = exports2.late = exports2.ZodSchema = exports2.Schema = exports2.custom = exports2.ZodReadonly = exports2.ZodPipeline = exports2.ZodBranded = exports2.BRAND = exports2.ZodNaN = exports2.ZodCatch = exports2.ZodDefault = exports2.ZodNullable = exports2.ZodOptional = exports2.ZodTransformer = exports2.ZodEffects = exports2.ZodPromise = exports2.ZodNativeEnum = exports2.ZodEnum = exports2.ZodLiteral = exports2.ZodLazy = exports2.ZodFunction = exports2.ZodSet = exports2.ZodMap = exports2.ZodRecord = exports2.ZodTuple = exports2.ZodIntersection = exports2.ZodDiscriminatedUnion = exports2.ZodUnion = exports2.ZodObject = exports2.ZodArray = exports2.ZodVoid = exports2.ZodNever = exports2.ZodUnknown = exports2.ZodAny = exports2.ZodNull = exports2.ZodUndefined = exports2.ZodSymbol = exports2.ZodDate = exports2.ZodBoolean = exports2.ZodBigInt = exports2.ZodNumber = exports2.ZodString = exports2.datetimeRegex = exports2.ZodType = void 0;
    exports2.NEVER = exports2.void = exports2.unknown = exports2.union = exports2.undefined = exports2.tuple = exports2.transformer = exports2.symbol = exports2.string = exports2.strictObject = exports2.set = exports2.record = exports2.promise = exports2.preprocess = exports2.pipeline = exports2.ostring = exports2.optional = exports2.onumber = exports2.oboolean = exports2.object = exports2.number = exports2.nullable = exports2.null = exports2.never = exports2.nativeEnum = exports2.nan = exports2.map = exports2.literal = exports2.lazy = exports2.intersection = exports2.instanceof = exports2.function = exports2.enum = exports2.effect = exports2.discriminatedUnion = exports2.date = void 0;
    var errors_1 = require_errors();
    var errorUtil_1 = require_errorUtil();
    var parseUtil_1 = require_parseUtil();
    var util_1 = require_util();
    var ZodError_1 = require_ZodError();
    var ParseInputLazyPath2 = class {
      constructor(parent, value, path5, key) {
        this._cachedPath = [];
        this.parent = parent;
        this.data = value;
        this._path = path5;
        this._key = key;
      }
      get path() {
        if (!this._cachedPath.length) {
          if (this._key instanceof Array) {
            this._cachedPath.push(...this._path, ...this._key);
          } else {
            this._cachedPath.push(...this._path, this._key);
          }
        }
        return this._cachedPath;
      }
    };
    var handleResult2 = (ctx, result) => {
      if ((0, parseUtil_1.isValid)(result)) {
        return { success: true, data: result.value };
      } else {
        if (!ctx.common.issues.length) {
          throw new Error("Validation failed but no issues detected.");
        }
        return {
          success: false,
          get error() {
            if (this._error)
              return this._error;
            const error = new ZodError_1.ZodError(ctx.common.issues);
            this._error = error;
            return this._error;
          }
        };
      }
    };
    function processCreateParams2(params) {
      if (!params)
        return {};
      const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
      if (errorMap2 && (invalid_type_error || required_error)) {
        throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
      }
      if (errorMap2)
        return { errorMap: errorMap2, description };
      const customMap = (iss, ctx) => {
        var _a, _b;
        const { message } = params;
        if (iss.code === "invalid_enum_value") {
          return { message: message !== null && message !== void 0 ? message : ctx.defaultError };
        }
        if (typeof ctx.data === "undefined") {
          return { message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };
        }
        if (iss.code !== "invalid_type")
          return { message: ctx.defaultError };
        return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };
      };
      return { errorMap: customMap, description };
    }
    var ZodType2 = class {
      get description() {
        return this._def.description;
      }
      _getType(input) {
        return (0, util_1.getParsedType)(input.data);
      }
      _getOrReturnCtx(input, ctx) {
        return ctx || {
          common: input.parent.common,
          data: input.data,
          parsedType: (0, util_1.getParsedType)(input.data),
          schemaErrorMap: this._def.errorMap,
          path: input.path,
          parent: input.parent
        };
      }
      _processInputParams(input) {
        return {
          status: new parseUtil_1.ParseStatus(),
          ctx: {
            common: input.parent.common,
            data: input.data,
            parsedType: (0, util_1.getParsedType)(input.data),
            schemaErrorMap: this._def.errorMap,
            path: input.path,
            parent: input.parent
          }
        };
      }
      _parseSync(input) {
        const result = this._parse(input);
        if ((0, parseUtil_1.isAsync)(result)) {
          throw new Error("Synchronous parse encountered promise.");
        }
        return result;
      }
      _parseAsync(input) {
        const result = this._parse(input);
        return Promise.resolve(result);
      }
      parse(data, params) {
        const result = this.safeParse(data, params);
        if (result.success)
          return result.data;
        throw result.error;
      }
      safeParse(data, params) {
        var _a;
        const ctx = {
          common: {
            issues: [],
            async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
            contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
          },
          path: (params === null || params === void 0 ? void 0 : params.path) || [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: (0, util_1.getParsedType)(data)
        };
        const result = this._parseSync({ data, path: ctx.path, parent: ctx });
        return handleResult2(ctx, result);
      }
      "~validate"(data) {
        var _a, _b;
        const ctx = {
          common: {
            issues: [],
            async: !!this["~standard"].async
          },
          path: [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: (0, util_1.getParsedType)(data)
        };
        if (!this["~standard"].async) {
          try {
            const result = this._parseSync({ data, path: [], parent: ctx });
            return (0, parseUtil_1.isValid)(result) ? {
              value: result.value
            } : {
              issues: ctx.common.issues
            };
          } catch (err) {
            if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes("encountered")) {
              this["~standard"].async = true;
            }
            ctx.common = {
              issues: [],
              async: true
            };
          }
        }
        return this._parseAsync({ data, path: [], parent: ctx }).then((result) => (0, parseUtil_1.isValid)(result) ? {
          value: result.value
        } : {
          issues: ctx.common.issues
        });
      }
      async parseAsync(data, params) {
        const result = await this.safeParseAsync(data, params);
        if (result.success)
          return result.data;
        throw result.error;
      }
      async safeParseAsync(data, params) {
        const ctx = {
          common: {
            issues: [],
            contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
            async: true
          },
          path: (params === null || params === void 0 ? void 0 : params.path) || [],
          schemaErrorMap: this._def.errorMap,
          parent: null,
          data,
          parsedType: (0, util_1.getParsedType)(data)
        };
        const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
        const result = await ((0, parseUtil_1.isAsync)(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
        return handleResult2(ctx, result);
      }
      refine(check, message) {
        const getIssueProperties = (val) => {
          if (typeof message === "string" || typeof message === "undefined") {
            return { message };
          } else if (typeof message === "function") {
            return message(val);
          } else {
            return message;
          }
        };
        return this._refinement((val, ctx) => {
          const result = check(val);
          const setError = () => ctx.addIssue({
            code: ZodError_1.ZodIssueCode.custom,
            ...getIssueProperties(val)
          });
          if (typeof Promise !== "undefined" && result instanceof Promise) {
            return result.then((data) => {
              if (!data) {
                setError();
                return false;
              } else {
                return true;
              }
            });
          }
          if (!result) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      refinement(check, refinementData) {
        return this._refinement((val, ctx) => {
          if (!check(val)) {
            ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
            return false;
          } else {
            return true;
          }
        });
      }
      _refinement(refinement) {
        return new ZodEffects2({
          schema: this,
          typeName: ZodFirstPartyTypeKind2.ZodEffects,
          effect: { type: "refinement", refinement }
        });
      }
      superRefine(refinement) {
        return this._refinement(refinement);
      }
      constructor(def) {
        this.spa = this.safeParseAsync;
        this._def = def;
        this.parse = this.parse.bind(this);
        this.safeParse = this.safeParse.bind(this);
        this.parseAsync = this.parseAsync.bind(this);
        this.safeParseAsync = this.safeParseAsync.bind(this);
        this.spa = this.spa.bind(this);
        this.refine = this.refine.bind(this);
        this.refinement = this.refinement.bind(this);
        this.superRefine = this.superRefine.bind(this);
        this.optional = this.optional.bind(this);
        this.nullable = this.nullable.bind(this);
        this.nullish = this.nullish.bind(this);
        this.array = this.array.bind(this);
        this.promise = this.promise.bind(this);
        this.or = this.or.bind(this);
        this.and = this.and.bind(this);
        this.transform = this.transform.bind(this);
        this.brand = this.brand.bind(this);
        this.default = this.default.bind(this);
        this.catch = this.catch.bind(this);
        this.describe = this.describe.bind(this);
        this.pipe = this.pipe.bind(this);
        this.readonly = this.readonly.bind(this);
        this.isNullable = this.isNullable.bind(this);
        this.isOptional = this.isOptional.bind(this);
        this["~standard"] = {
          version: 1,
          vendor: "zod",
          validate: (data) => this["~validate"](data)
        };
      }
      optional() {
        return ZodOptional2.create(this, this._def);
      }
      nullable() {
        return ZodNullable2.create(this, this._def);
      }
      nullish() {
        return this.nullable().optional();
      }
      array() {
        return ZodArray2.create(this);
      }
      promise() {
        return ZodPromise2.create(this, this._def);
      }
      or(option) {
        return ZodUnion2.create([this, option], this._def);
      }
      and(incoming) {
        return ZodIntersection2.create(this, incoming, this._def);
      }
      transform(transform) {
        return new ZodEffects2({
          ...processCreateParams2(this._def),
          schema: this,
          typeName: ZodFirstPartyTypeKind2.ZodEffects,
          effect: { type: "transform", transform }
        });
      }
      default(def) {
        const defaultValueFunc = typeof def === "function" ? def : () => def;
        return new ZodDefault2({
          ...processCreateParams2(this._def),
          innerType: this,
          defaultValue: defaultValueFunc,
          typeName: ZodFirstPartyTypeKind2.ZodDefault
        });
      }
      brand() {
        return new ZodBranded2({
          typeName: ZodFirstPartyTypeKind2.ZodBranded,
          type: this,
          ...processCreateParams2(this._def)
        });
      }
      catch(def) {
        const catchValueFunc = typeof def === "function" ? def : () => def;
        return new ZodCatch2({
          ...processCreateParams2(this._def),
          innerType: this,
          catchValue: catchValueFunc,
          typeName: ZodFirstPartyTypeKind2.ZodCatch
        });
      }
      describe(description) {
        const This = this.constructor;
        return new This({
          ...this._def,
          description
        });
      }
      pipe(target) {
        return ZodPipeline2.create(this, target);
      }
      readonly() {
        return ZodReadonly2.create(this);
      }
      isOptional() {
        return this.safeParse(void 0).success;
      }
      isNullable() {
        return this.safeParse(null).success;
      }
    };
    exports2.ZodType = ZodType2;
    exports2.Schema = ZodType2;
    exports2.ZodSchema = ZodType2;
    var cuidRegex2 = /^c[^\s-]{8,}$/i;
    var cuid2Regex2 = /^[0-9a-z]+$/;
    var ulidRegex2 = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
    var uuidRegex2 = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
    var nanoidRegex2 = /^[a-z0-9_-]{21}$/i;
    var jwtRegex2 = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
    var durationRegex2 = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
    var emailRegex2 = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
    var _emojiRegex2 = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
    var emojiRegex2;
    var ipv4Regex2 = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
    var ipv4CidrRegex2 = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
    var ipv6Regex2 = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
    var ipv6CidrRegex2 = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
    var base64Regex2 = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
    var base64urlRegex2 = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
    var dateRegexSource2 = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
    var dateRegex2 = new RegExp(`^${dateRegexSource2}$`);
    function timeRegexSource2(args) {
      let regex = `([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d`;
      if (args.precision) {
        regex = `${regex}\\.\\d{${args.precision}}`;
      } else if (args.precision == null) {
        regex = `${regex}(\\.\\d+)?`;
      }
      return regex;
    }
    function timeRegex2(args) {
      return new RegExp(`^${timeRegexSource2(args)}$`);
    }
    function datetimeRegex2(args) {
      let regex = `${dateRegexSource2}T${timeRegexSource2(args)}`;
      const opts = [];
      opts.push(args.local ? `Z?` : `Z`);
      if (args.offset)
        opts.push(`([+-]\\d{2}:?\\d{2})`);
      regex = `${regex}(${opts.join("|")})`;
      return new RegExp(`^${regex}$`);
    }
    exports2.datetimeRegex = datetimeRegex2;
    function isValidIP2(ip, version) {
      if ((version === "v4" || !version) && ipv4Regex2.test(ip)) {
        return true;
      }
      if ((version === "v6" || !version) && ipv6Regex2.test(ip)) {
        return true;
      }
      return false;
    }
    function isValidJWT2(jwt, alg) {
      if (!jwtRegex2.test(jwt))
        return false;
      try {
        const [header] = jwt.split(".");
        const base64 = header.replace(/-/g, "+").replace(/_/g, "/").padEnd(header.length + (4 - header.length % 4) % 4, "=");
        const decoded = JSON.parse(atob(base64));
        if (typeof decoded !== "object" || decoded === null)
          return false;
        if (!decoded.typ || !decoded.alg)
          return false;
        if (alg && decoded.alg !== alg)
          return false;
        return true;
      } catch (_a) {
        return false;
      }
    }
    function isValidCidr2(ip, version) {
      if ((version === "v4" || !version) && ipv4CidrRegex2.test(ip)) {
        return true;
      }
      if ((version === "v6" || !version) && ipv6CidrRegex2.test(ip)) {
        return true;
      }
      return false;
    }
    var ZodString2 = class _ZodString extends ZodType2 {
      _parse(input) {
        if (this._def.coerce) {
          input.data = String(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.string) {
          const ctx2 = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx2, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.string,
            received: ctx2.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const status = new parseUtil_1.ParseStatus();
        let ctx = void 0;
        for (const check of this._def.checks) {
          if (check.kind === "min") {
            if (input.data.length < check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_small,
                minimum: check.value,
                type: "string",
                inclusive: true,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            if (input.data.length > check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_big,
                maximum: check.value,
                type: "string",
                inclusive: true,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "length") {
            const tooBig = input.data.length > check.value;
            const tooSmall = input.data.length < check.value;
            if (tooBig || tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              if (tooBig) {
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.too_big,
                  maximum: check.value,
                  type: "string",
                  inclusive: true,
                  exact: true,
                  message: check.message
                });
              } else if (tooSmall) {
                (0, parseUtil_1.addIssueToContext)(ctx, {
                  code: ZodError_1.ZodIssueCode.too_small,
                  minimum: check.value,
                  type: "string",
                  inclusive: true,
                  exact: true,
                  message: check.message
                });
              }
              status.dirty();
            }
          } else if (check.kind === "email") {
            if (!emailRegex2.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "email",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "emoji") {
            if (!emojiRegex2) {
              emojiRegex2 = new RegExp(_emojiRegex2, "u");
            }
            if (!emojiRegex2.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "emoji",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "uuid") {
            if (!uuidRegex2.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "uuid",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "nanoid") {
            if (!nanoidRegex2.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "nanoid",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "cuid") {
            if (!cuidRegex2.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "cuid",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "cuid2") {
            if (!cuid2Regex2.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "cuid2",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "ulid") {
            if (!ulidRegex2.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "ulid",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "url") {
            try {
              new URL(input.data);
            } catch (_a) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "url",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "regex") {
            check.regex.lastIndex = 0;
            const testResult = check.regex.test(input.data);
            if (!testResult) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "regex",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "trim") {
            input.data = input.data.trim();
          } else if (check.kind === "includes") {
            if (!input.data.includes(check.value, check.position)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_string,
                validation: { includes: check.value, position: check.position },
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "toLowerCase") {
            input.data = input.data.toLowerCase();
          } else if (check.kind === "toUpperCase") {
            input.data = input.data.toUpperCase();
          } else if (check.kind === "startsWith") {
            if (!input.data.startsWith(check.value)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_string,
                validation: { startsWith: check.value },
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "endsWith") {
            if (!input.data.endsWith(check.value)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_string,
                validation: { endsWith: check.value },
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "datetime") {
            const regex = datetimeRegex2(check);
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_string,
                validation: "datetime",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "date") {
            const regex = dateRegex2;
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_string,
                validation: "date",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "time") {
            const regex = timeRegex2(check);
            if (!regex.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_string,
                validation: "time",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "duration") {
            if (!durationRegex2.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "duration",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "ip") {
            if (!isValidIP2(input.data, check.version)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "ip",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "jwt") {
            if (!isValidJWT2(input.data, check.alg)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "jwt",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "cidr") {
            if (!isValidCidr2(input.data, check.version)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "cidr",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "base64") {
            if (!base64Regex2.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "base64",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "base64url") {
            if (!base64urlRegex2.test(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                validation: "base64url",
                code: ZodError_1.ZodIssueCode.invalid_string,
                message: check.message
              });
              status.dirty();
            }
          } else {
            util_1.util.assertNever(check);
          }
        }
        return { status: status.value, value: input.data };
      }
      _regex(regex, validation, message) {
        return this.refinement((data) => regex.test(data), {
          validation,
          code: ZodError_1.ZodIssueCode.invalid_string,
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      _addCheck(check) {
        return new _ZodString({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      email(message) {
        return this._addCheck({ kind: "email", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      url(message) {
        return this._addCheck({ kind: "url", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      emoji(message) {
        return this._addCheck({ kind: "emoji", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      uuid(message) {
        return this._addCheck({ kind: "uuid", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      nanoid(message) {
        return this._addCheck({ kind: "nanoid", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      cuid(message) {
        return this._addCheck({ kind: "cuid", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      cuid2(message) {
        return this._addCheck({ kind: "cuid2", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      ulid(message) {
        return this._addCheck({ kind: "ulid", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      base64(message) {
        return this._addCheck({ kind: "base64", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      base64url(message) {
        return this._addCheck({
          kind: "base64url",
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      jwt(options) {
        return this._addCheck({ kind: "jwt", ...errorUtil_1.errorUtil.errToObj(options) });
      }
      ip(options) {
        return this._addCheck({ kind: "ip", ...errorUtil_1.errorUtil.errToObj(options) });
      }
      cidr(options) {
        return this._addCheck({ kind: "cidr", ...errorUtil_1.errorUtil.errToObj(options) });
      }
      datetime(options) {
        var _a, _b;
        if (typeof options === "string") {
          return this._addCheck({
            kind: "datetime",
            precision: null,
            offset: false,
            local: false,
            message: options
          });
        }
        return this._addCheck({
          kind: "datetime",
          precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
          offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
          local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,
          ...errorUtil_1.errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
      }
      date(message) {
        return this._addCheck({ kind: "date", message });
      }
      time(options) {
        if (typeof options === "string") {
          return this._addCheck({
            kind: "time",
            precision: null,
            message: options
          });
        }
        return this._addCheck({
          kind: "time",
          precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
          ...errorUtil_1.errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
      }
      duration(message) {
        return this._addCheck({ kind: "duration", ...errorUtil_1.errorUtil.errToObj(message) });
      }
      regex(regex, message) {
        return this._addCheck({
          kind: "regex",
          regex,
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      includes(value, options) {
        return this._addCheck({
          kind: "includes",
          value,
          position: options === null || options === void 0 ? void 0 : options.position,
          ...errorUtil_1.errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
        });
      }
      startsWith(value, message) {
        return this._addCheck({
          kind: "startsWith",
          value,
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      endsWith(value, message) {
        return this._addCheck({
          kind: "endsWith",
          value,
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      min(minLength, message) {
        return this._addCheck({
          kind: "min",
          value: minLength,
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      max(maxLength, message) {
        return this._addCheck({
          kind: "max",
          value: maxLength,
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      length(len, message) {
        return this._addCheck({
          kind: "length",
          value: len,
          ...errorUtil_1.errorUtil.errToObj(message)
        });
      }
      /**
       * Equivalent to `.min(1)`
       */
      nonempty(message) {
        return this.min(1, errorUtil_1.errorUtil.errToObj(message));
      }
      trim() {
        return new _ZodString({
          ...this._def,
          checks: [...this._def.checks, { kind: "trim" }]
        });
      }
      toLowerCase() {
        return new _ZodString({
          ...this._def,
          checks: [...this._def.checks, { kind: "toLowerCase" }]
        });
      }
      toUpperCase() {
        return new _ZodString({
          ...this._def,
          checks: [...this._def.checks, { kind: "toUpperCase" }]
        });
      }
      get isDatetime() {
        return !!this._def.checks.find((ch) => ch.kind === "datetime");
      }
      get isDate() {
        return !!this._def.checks.find((ch) => ch.kind === "date");
      }
      get isTime() {
        return !!this._def.checks.find((ch) => ch.kind === "time");
      }
      get isDuration() {
        return !!this._def.checks.find((ch) => ch.kind === "duration");
      }
      get isEmail() {
        return !!this._def.checks.find((ch) => ch.kind === "email");
      }
      get isURL() {
        return !!this._def.checks.find((ch) => ch.kind === "url");
      }
      get isEmoji() {
        return !!this._def.checks.find((ch) => ch.kind === "emoji");
      }
      get isUUID() {
        return !!this._def.checks.find((ch) => ch.kind === "uuid");
      }
      get isNANOID() {
        return !!this._def.checks.find((ch) => ch.kind === "nanoid");
      }
      get isCUID() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid");
      }
      get isCUID2() {
        return !!this._def.checks.find((ch) => ch.kind === "cuid2");
      }
      get isULID() {
        return !!this._def.checks.find((ch) => ch.kind === "ulid");
      }
      get isIP() {
        return !!this._def.checks.find((ch) => ch.kind === "ip");
      }
      get isCIDR() {
        return !!this._def.checks.find((ch) => ch.kind === "cidr");
      }
      get isBase64() {
        return !!this._def.checks.find((ch) => ch.kind === "base64");
      }
      get isBase64url() {
        return !!this._def.checks.find((ch) => ch.kind === "base64url");
      }
      get minLength() {
        let min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          }
        }
        return min;
      }
      get maxLength() {
        let max = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return max;
      }
    };
    exports2.ZodString = ZodString2;
    ZodString2.create = (params) => {
      var _a;
      return new ZodString2({
        checks: [],
        typeName: ZodFirstPartyTypeKind2.ZodString,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams2(params)
      });
    };
    function floatSafeRemainder2(val, step) {
      const valDecCount = (val.toString().split(".")[1] || "").length;
      const stepDecCount = (step.toString().split(".")[1] || "").length;
      const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
      const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
      const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
      return valInt % stepInt / Math.pow(10, decCount);
    }
    var ZodNumber2 = class _ZodNumber extends ZodType2 {
      constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
        this.step = this.multipleOf;
      }
      _parse(input) {
        if (this._def.coerce) {
          input.data = Number(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.number) {
          const ctx2 = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx2, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.number,
            received: ctx2.parsedType
          });
          return parseUtil_1.INVALID;
        }
        let ctx = void 0;
        const status = new parseUtil_1.ParseStatus();
        for (const check of this._def.checks) {
          if (check.kind === "int") {
            if (!util_1.util.isInteger(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.invalid_type,
                expected: "integer",
                received: "float",
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "min") {
            const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
            if (tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_small,
                minimum: check.value,
                type: "number",
                inclusive: check.inclusive,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
            if (tooBig) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_big,
                maximum: check.value,
                type: "number",
                inclusive: check.inclusive,
                exact: false,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "multipleOf") {
            if (floatSafeRemainder2(input.data, check.value) !== 0) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.not_multiple_of,
                multipleOf: check.value,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "finite") {
            if (!Number.isFinite(input.data)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.not_finite,
                message: check.message
              });
              status.dirty();
            }
          } else {
            util_1.util.assertNever(check);
          }
        }
        return { status: status.value, value: input.data };
      }
      gte(value, message) {
        return this.setLimit("min", value, true, errorUtil_1.errorUtil.toString(message));
      }
      gt(value, message) {
        return this.setLimit("min", value, false, errorUtil_1.errorUtil.toString(message));
      }
      lte(value, message) {
        return this.setLimit("max", value, true, errorUtil_1.errorUtil.toString(message));
      }
      lt(value, message) {
        return this.setLimit("max", value, false, errorUtil_1.errorUtil.toString(message));
      }
      setLimit(kind, value, inclusive, message) {
        return new _ZodNumber({
          ...this._def,
          checks: [
            ...this._def.checks,
            {
              kind,
              value,
              inclusive,
              message: errorUtil_1.errorUtil.toString(message)
            }
          ]
        });
      }
      _addCheck(check) {
        return new _ZodNumber({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      int(message) {
        return this._addCheck({
          kind: "int",
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      positive(message) {
        return this._addCheck({
          kind: "min",
          value: 0,
          inclusive: false,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      negative(message) {
        return this._addCheck({
          kind: "max",
          value: 0,
          inclusive: false,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      nonpositive(message) {
        return this._addCheck({
          kind: "max",
          value: 0,
          inclusive: true,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      nonnegative(message) {
        return this._addCheck({
          kind: "min",
          value: 0,
          inclusive: true,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      multipleOf(value, message) {
        return this._addCheck({
          kind: "multipleOf",
          value,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      finite(message) {
        return this._addCheck({
          kind: "finite",
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      safe(message) {
        return this._addCheck({
          kind: "min",
          inclusive: true,
          value: Number.MIN_SAFE_INTEGER,
          message: errorUtil_1.errorUtil.toString(message)
        })._addCheck({
          kind: "max",
          inclusive: true,
          value: Number.MAX_SAFE_INTEGER,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      get minValue() {
        let min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          }
        }
        return min;
      }
      get maxValue() {
        let max = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return max;
      }
      get isInt() {
        return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util_1.util.isInteger(ch.value));
      }
      get isFinite() {
        let max = null, min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
            return true;
          } else if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          } else if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return Number.isFinite(min) && Number.isFinite(max);
      }
    };
    exports2.ZodNumber = ZodNumber2;
    ZodNumber2.create = (params) => {
      return new ZodNumber2({
        checks: [],
        typeName: ZodFirstPartyTypeKind2.ZodNumber,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams2(params)
      });
    };
    var ZodBigInt2 = class _ZodBigInt extends ZodType2 {
      constructor() {
        super(...arguments);
        this.min = this.gte;
        this.max = this.lte;
      }
      _parse(input) {
        if (this._def.coerce) {
          try {
            input.data = BigInt(input.data);
          } catch (_a) {
            return this._getInvalidInput(input);
          }
        }
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.bigint) {
          return this._getInvalidInput(input);
        }
        let ctx = void 0;
        const status = new parseUtil_1.ParseStatus();
        for (const check of this._def.checks) {
          if (check.kind === "min") {
            const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
            if (tooSmall) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_small,
                type: "bigint",
                minimum: check.value,
                inclusive: check.inclusive,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
            if (tooBig) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_big,
                type: "bigint",
                maximum: check.value,
                inclusive: check.inclusive,
                message: check.message
              });
              status.dirty();
            }
          } else if (check.kind === "multipleOf") {
            if (input.data % check.value !== BigInt(0)) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.not_multiple_of,
                multipleOf: check.value,
                message: check.message
              });
              status.dirty();
            }
          } else {
            util_1.util.assertNever(check);
          }
        }
        return { status: status.value, value: input.data };
      }
      _getInvalidInput(input) {
        const ctx = this._getOrReturnCtx(input);
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_type,
          expected: util_1.ZodParsedType.bigint,
          received: ctx.parsedType
        });
        return parseUtil_1.INVALID;
      }
      gte(value, message) {
        return this.setLimit("min", value, true, errorUtil_1.errorUtil.toString(message));
      }
      gt(value, message) {
        return this.setLimit("min", value, false, errorUtil_1.errorUtil.toString(message));
      }
      lte(value, message) {
        return this.setLimit("max", value, true, errorUtil_1.errorUtil.toString(message));
      }
      lt(value, message) {
        return this.setLimit("max", value, false, errorUtil_1.errorUtil.toString(message));
      }
      setLimit(kind, value, inclusive, message) {
        return new _ZodBigInt({
          ...this._def,
          checks: [
            ...this._def.checks,
            {
              kind,
              value,
              inclusive,
              message: errorUtil_1.errorUtil.toString(message)
            }
          ]
        });
      }
      _addCheck(check) {
        return new _ZodBigInt({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      positive(message) {
        return this._addCheck({
          kind: "min",
          value: BigInt(0),
          inclusive: false,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      negative(message) {
        return this._addCheck({
          kind: "max",
          value: BigInt(0),
          inclusive: false,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      nonpositive(message) {
        return this._addCheck({
          kind: "max",
          value: BigInt(0),
          inclusive: true,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      nonnegative(message) {
        return this._addCheck({
          kind: "min",
          value: BigInt(0),
          inclusive: true,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      multipleOf(value, message) {
        return this._addCheck({
          kind: "multipleOf",
          value,
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      get minValue() {
        let min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          }
        }
        return min;
      }
      get maxValue() {
        let max = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return max;
      }
    };
    exports2.ZodBigInt = ZodBigInt2;
    ZodBigInt2.create = (params) => {
      var _a;
      return new ZodBigInt2({
        checks: [],
        typeName: ZodFirstPartyTypeKind2.ZodBigInt,
        coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
        ...processCreateParams2(params)
      });
    };
    var ZodBoolean2 = class extends ZodType2 {
      _parse(input) {
        if (this._def.coerce) {
          input.data = Boolean(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.boolean) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.boolean,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports2.ZodBoolean = ZodBoolean2;
    ZodBoolean2.create = (params) => {
      return new ZodBoolean2({
        typeName: ZodFirstPartyTypeKind2.ZodBoolean,
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        ...processCreateParams2(params)
      });
    };
    var ZodDate2 = class _ZodDate extends ZodType2 {
      _parse(input) {
        if (this._def.coerce) {
          input.data = new Date(input.data);
        }
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.date) {
          const ctx2 = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx2, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.date,
            received: ctx2.parsedType
          });
          return parseUtil_1.INVALID;
        }
        if (isNaN(input.data.getTime())) {
          const ctx2 = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx2, {
            code: ZodError_1.ZodIssueCode.invalid_date
          });
          return parseUtil_1.INVALID;
        }
        const status = new parseUtil_1.ParseStatus();
        let ctx = void 0;
        for (const check of this._def.checks) {
          if (check.kind === "min") {
            if (input.data.getTime() < check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_small,
                message: check.message,
                inclusive: true,
                exact: false,
                minimum: check.value,
                type: "date"
              });
              status.dirty();
            }
          } else if (check.kind === "max") {
            if (input.data.getTime() > check.value) {
              ctx = this._getOrReturnCtx(input, ctx);
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.too_big,
                message: check.message,
                inclusive: true,
                exact: false,
                maximum: check.value,
                type: "date"
              });
              status.dirty();
            }
          } else {
            util_1.util.assertNever(check);
          }
        }
        return {
          status: status.value,
          value: new Date(input.data.getTime())
        };
      }
      _addCheck(check) {
        return new _ZodDate({
          ...this._def,
          checks: [...this._def.checks, check]
        });
      }
      min(minDate, message) {
        return this._addCheck({
          kind: "min",
          value: minDate.getTime(),
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      max(maxDate, message) {
        return this._addCheck({
          kind: "max",
          value: maxDate.getTime(),
          message: errorUtil_1.errorUtil.toString(message)
        });
      }
      get minDate() {
        let min = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "min") {
            if (min === null || ch.value > min)
              min = ch.value;
          }
        }
        return min != null ? new Date(min) : null;
      }
      get maxDate() {
        let max = null;
        for (const ch of this._def.checks) {
          if (ch.kind === "max") {
            if (max === null || ch.value < max)
              max = ch.value;
          }
        }
        return max != null ? new Date(max) : null;
      }
    };
    exports2.ZodDate = ZodDate2;
    ZodDate2.create = (params) => {
      return new ZodDate2({
        checks: [],
        coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
        typeName: ZodFirstPartyTypeKind2.ZodDate,
        ...processCreateParams2(params)
      });
    };
    var ZodSymbol2 = class extends ZodType2 {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.symbol) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.symbol,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports2.ZodSymbol = ZodSymbol2;
    ZodSymbol2.create = (params) => {
      return new ZodSymbol2({
        typeName: ZodFirstPartyTypeKind2.ZodSymbol,
        ...processCreateParams2(params)
      });
    };
    var ZodUndefined2 = class extends ZodType2 {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.undefined) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.undefined,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports2.ZodUndefined = ZodUndefined2;
    ZodUndefined2.create = (params) => {
      return new ZodUndefined2({
        typeName: ZodFirstPartyTypeKind2.ZodUndefined,
        ...processCreateParams2(params)
      });
    };
    var ZodNull2 = class extends ZodType2 {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.null) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.null,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports2.ZodNull = ZodNull2;
    ZodNull2.create = (params) => {
      return new ZodNull2({
        typeName: ZodFirstPartyTypeKind2.ZodNull,
        ...processCreateParams2(params)
      });
    };
    var ZodAny2 = class extends ZodType2 {
      constructor() {
        super(...arguments);
        this._any = true;
      }
      _parse(input) {
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports2.ZodAny = ZodAny2;
    ZodAny2.create = (params) => {
      return new ZodAny2({
        typeName: ZodFirstPartyTypeKind2.ZodAny,
        ...processCreateParams2(params)
      });
    };
    var ZodUnknown2 = class extends ZodType2 {
      constructor() {
        super(...arguments);
        this._unknown = true;
      }
      _parse(input) {
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports2.ZodUnknown = ZodUnknown2;
    ZodUnknown2.create = (params) => {
      return new ZodUnknown2({
        typeName: ZodFirstPartyTypeKind2.ZodUnknown,
        ...processCreateParams2(params)
      });
    };
    var ZodNever2 = class extends ZodType2 {
      _parse(input) {
        const ctx = this._getOrReturnCtx(input);
        (0, parseUtil_1.addIssueToContext)(ctx, {
          code: ZodError_1.ZodIssueCode.invalid_type,
          expected: util_1.ZodParsedType.never,
          received: ctx.parsedType
        });
        return parseUtil_1.INVALID;
      }
    };
    exports2.ZodNever = ZodNever2;
    ZodNever2.create = (params) => {
      return new ZodNever2({
        typeName: ZodFirstPartyTypeKind2.ZodNever,
        ...processCreateParams2(params)
      });
    };
    var ZodVoid2 = class extends ZodType2 {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.undefined) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.void,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
    };
    exports2.ZodVoid = ZodVoid2;
    ZodVoid2.create = (params) => {
      return new ZodVoid2({
        typeName: ZodFirstPartyTypeKind2.ZodVoid,
        ...processCreateParams2(params)
      });
    };
    var ZodArray2 = class _ZodArray extends ZodType2 {
      _parse(input) {
        const { ctx, status } = this._processInputParams(input);
        const def = this._def;
        if (ctx.parsedType !== util_1.ZodParsedType.array) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.array,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        if (def.exactLength !== null) {
          const tooBig = ctx.data.length > def.exactLength.value;
          const tooSmall = ctx.data.length < def.exactLength.value;
          if (tooBig || tooSmall) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: tooBig ? ZodError_1.ZodIssueCode.too_big : ZodError_1.ZodIssueCode.too_small,
              minimum: tooSmall ? def.exactLength.value : void 0,
              maximum: tooBig ? def.exactLength.value : void 0,
              type: "array",
              inclusive: true,
              exact: true,
              message: def.exactLength.message
            });
            status.dirty();
          }
        }
        if (def.minLength !== null) {
          if (ctx.data.length < def.minLength.value) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_small,
              minimum: def.minLength.value,
              type: "array",
              inclusive: true,
              exact: false,
              message: def.minLength.message
            });
            status.dirty();
          }
        }
        if (def.maxLength !== null) {
          if (ctx.data.length > def.maxLength.value) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_big,
              maximum: def.maxLength.value,
              type: "array",
              inclusive: true,
              exact: false,
              message: def.maxLength.message
            });
            status.dirty();
          }
        }
        if (ctx.common.async) {
          return Promise.all([...ctx.data].map((item, i) => {
            return def.type._parseAsync(new ParseInputLazyPath2(ctx, item, ctx.path, i));
          })).then((result2) => {
            return parseUtil_1.ParseStatus.mergeArray(status, result2);
          });
        }
        const result = [...ctx.data].map((item, i) => {
          return def.type._parseSync(new ParseInputLazyPath2(ctx, item, ctx.path, i));
        });
        return parseUtil_1.ParseStatus.mergeArray(status, result);
      }
      get element() {
        return this._def.type;
      }
      min(minLength, message) {
        return new _ZodArray({
          ...this._def,
          minLength: { value: minLength, message: errorUtil_1.errorUtil.toString(message) }
        });
      }
      max(maxLength, message) {
        return new _ZodArray({
          ...this._def,
          maxLength: { value: maxLength, message: errorUtil_1.errorUtil.toString(message) }
        });
      }
      length(len, message) {
        return new _ZodArray({
          ...this._def,
          exactLength: { value: len, message: errorUtil_1.errorUtil.toString(message) }
        });
      }
      nonempty(message) {
        return this.min(1, message);
      }
    };
    exports2.ZodArray = ZodArray2;
    ZodArray2.create = (schema, params) => {
      return new ZodArray2({
        type: schema,
        minLength: null,
        maxLength: null,
        exactLength: null,
        typeName: ZodFirstPartyTypeKind2.ZodArray,
        ...processCreateParams2(params)
      });
    };
    function deepPartialify2(schema) {
      if (schema instanceof ZodObject3) {
        const newShape = {};
        for (const key in schema.shape) {
          const fieldSchema = schema.shape[key];
          newShape[key] = ZodOptional2.create(deepPartialify2(fieldSchema));
        }
        return new ZodObject3({
          ...schema._def,
          shape: () => newShape
        });
      } else if (schema instanceof ZodArray2) {
        return new ZodArray2({
          ...schema._def,
          type: deepPartialify2(schema.element)
        });
      } else if (schema instanceof ZodOptional2) {
        return ZodOptional2.create(deepPartialify2(schema.unwrap()));
      } else if (schema instanceof ZodNullable2) {
        return ZodNullable2.create(deepPartialify2(schema.unwrap()));
      } else if (schema instanceof ZodTuple2) {
        return ZodTuple2.create(schema.items.map((item) => deepPartialify2(item)));
      } else {
        return schema;
      }
    }
    var ZodObject3 = class _ZodObject extends ZodType2 {
      constructor() {
        super(...arguments);
        this._cached = null;
        this.nonstrict = this.passthrough;
        this.augment = this.extend;
      }
      _getCached() {
        if (this._cached !== null)
          return this._cached;
        const shape = this._def.shape();
        const keys = util_1.util.objectKeys(shape);
        return this._cached = { shape, keys };
      }
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.object) {
          const ctx2 = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx2, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.object,
            received: ctx2.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const { status, ctx } = this._processInputParams(input);
        const { shape, keys: shapeKeys } = this._getCached();
        const extraKeys = [];
        if (!(this._def.catchall instanceof ZodNever2 && this._def.unknownKeys === "strip")) {
          for (const key in ctx.data) {
            if (!shapeKeys.includes(key)) {
              extraKeys.push(key);
            }
          }
        }
        const pairs = [];
        for (const key of shapeKeys) {
          const keyValidator = shape[key];
          const value = ctx.data[key];
          pairs.push({
            key: { status: "valid", value: key },
            value: keyValidator._parse(new ParseInputLazyPath2(ctx, value, ctx.path, key)),
            alwaysSet: key in ctx.data
          });
        }
        if (this._def.catchall instanceof ZodNever2) {
          const unknownKeys = this._def.unknownKeys;
          if (unknownKeys === "passthrough") {
            for (const key of extraKeys) {
              pairs.push({
                key: { status: "valid", value: key },
                value: { status: "valid", value: ctx.data[key] }
              });
            }
          } else if (unknownKeys === "strict") {
            if (extraKeys.length > 0) {
              (0, parseUtil_1.addIssueToContext)(ctx, {
                code: ZodError_1.ZodIssueCode.unrecognized_keys,
                keys: extraKeys
              });
              status.dirty();
            }
          } else if (unknownKeys === "strip") {
          } else {
            throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
          }
        } else {
          const catchall = this._def.catchall;
          for (const key of extraKeys) {
            const value = ctx.data[key];
            pairs.push({
              key: { status: "valid", value: key },
              value: catchall._parse(
                new ParseInputLazyPath2(ctx, value, ctx.path, key)
                //, ctx.child(key), value, getParsedType(value)
              ),
              alwaysSet: key in ctx.data
            });
          }
        }
        if (ctx.common.async) {
          return Promise.resolve().then(async () => {
            const syncPairs = [];
            for (const pair of pairs) {
              const key = await pair.key;
              const value = await pair.value;
              syncPairs.push({
                key,
                value,
                alwaysSet: pair.alwaysSet
              });
            }
            return syncPairs;
          }).then((syncPairs) => {
            return parseUtil_1.ParseStatus.mergeObjectSync(status, syncPairs);
          });
        } else {
          return parseUtil_1.ParseStatus.mergeObjectSync(status, pairs);
        }
      }
      get shape() {
        return this._def.shape();
      }
      strict(message) {
        errorUtil_1.errorUtil.errToObj;
        return new _ZodObject({
          ...this._def,
          unknownKeys: "strict",
          ...message !== void 0 ? {
            errorMap: (issue, ctx) => {
              var _a, _b, _c, _d;
              const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
              if (issue.code === "unrecognized_keys")
                return {
                  message: (_d = errorUtil_1.errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
                };
              return {
                message: defaultError
              };
            }
          } : {}
        });
      }
      strip() {
        return new _ZodObject({
          ...this._def,
          unknownKeys: "strip"
        });
      }
      passthrough() {
        return new _ZodObject({
          ...this._def,
          unknownKeys: "passthrough"
        });
      }
      // const AugmentFactory =
      //   <Def extends ZodObjectDef>(def: Def) =>
      //   <Augmentation extends ZodRawShape>(
      //     augmentation: Augmentation
      //   ): ZodObject<
      //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
      //     Def["unknownKeys"],
      //     Def["catchall"]
      //   > => {
      //     return new ZodObject({
      //       ...def,
      //       shape: () => ({
      //         ...def.shape(),
      //         ...augmentation,
      //       }),
      //     }) as any;
      //   };
      extend(augmentation) {
        return new _ZodObject({
          ...this._def,
          shape: () => ({
            ...this._def.shape(),
            ...augmentation
          })
        });
      }
      /**
       * Prior to zod@1.0.12 there was a bug in the
       * inferred type of merged objects. Please
       * upgrade if you are experiencing issues.
       */
      merge(merging) {
        const merged = new _ZodObject({
          unknownKeys: merging._def.unknownKeys,
          catchall: merging._def.catchall,
          shape: () => ({
            ...this._def.shape(),
            ...merging._def.shape()
          }),
          typeName: ZodFirstPartyTypeKind2.ZodObject
        });
        return merged;
      }
      // merge<
      //   Incoming extends AnyZodObject,
      //   Augmentation extends Incoming["shape"],
      //   NewOutput extends {
      //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
      //       ? Augmentation[k]["_output"]
      //       : k extends keyof Output
      //       ? Output[k]
      //       : never;
      //   },
      //   NewInput extends {
      //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
      //       ? Augmentation[k]["_input"]
      //       : k extends keyof Input
      //       ? Input[k]
      //       : never;
      //   }
      // >(
      //   merging: Incoming
      // ): ZodObject<
      //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
      //   Incoming["_def"]["unknownKeys"],
      //   Incoming["_def"]["catchall"],
      //   NewOutput,
      //   NewInput
      // > {
      //   const merged: any = new ZodObject({
      //     unknownKeys: merging._def.unknownKeys,
      //     catchall: merging._def.catchall,
      //     shape: () =>
      //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
      //     typeName: ZodFirstPartyTypeKind.ZodObject,
      //   }) as any;
      //   return merged;
      // }
      setKey(key, schema) {
        return this.augment({ [key]: schema });
      }
      // merge<Incoming extends AnyZodObject>(
      //   merging: Incoming
      // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
      // ZodObject<
      //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
      //   Incoming["_def"]["unknownKeys"],
      //   Incoming["_def"]["catchall"]
      // > {
      //   // const mergedShape = objectUtil.mergeShapes(
      //   //   this._def.shape(),
      //   //   merging._def.shape()
      //   // );
      //   const merged: any = new ZodObject({
      //     unknownKeys: merging._def.unknownKeys,
      //     catchall: merging._def.catchall,
      //     shape: () =>
      //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
      //     typeName: ZodFirstPartyTypeKind.ZodObject,
      //   }) as any;
      //   return merged;
      // }
      catchall(index) {
        return new _ZodObject({
          ...this._def,
          catchall: index
        });
      }
      pick(mask) {
        const shape = {};
        util_1.util.objectKeys(mask).forEach((key) => {
          if (mask[key] && this.shape[key]) {
            shape[key] = this.shape[key];
          }
        });
        return new _ZodObject({
          ...this._def,
          shape: () => shape
        });
      }
      omit(mask) {
        const shape = {};
        util_1.util.objectKeys(this.shape).forEach((key) => {
          if (!mask[key]) {
            shape[key] = this.shape[key];
          }
        });
        return new _ZodObject({
          ...this._def,
          shape: () => shape
        });
      }
      /**
       * @deprecated
       */
      deepPartial() {
        return deepPartialify2(this);
      }
      partial(mask) {
        const newShape = {};
        util_1.util.objectKeys(this.shape).forEach((key) => {
          const fieldSchema = this.shape[key];
          if (mask && !mask[key]) {
            newShape[key] = fieldSchema;
          } else {
            newShape[key] = fieldSchema.optional();
          }
        });
        return new _ZodObject({
          ...this._def,
          shape: () => newShape
        });
      }
      required(mask) {
        const newShape = {};
        util_1.util.objectKeys(this.shape).forEach((key) => {
          if (mask && !mask[key]) {
            newShape[key] = this.shape[key];
          } else {
            const fieldSchema = this.shape[key];
            let newField = fieldSchema;
            while (newField instanceof ZodOptional2) {
              newField = newField._def.innerType;
            }
            newShape[key] = newField;
          }
        });
        return new _ZodObject({
          ...this._def,
          shape: () => newShape
        });
      }
      keyof() {
        return createZodEnum2(util_1.util.objectKeys(this.shape));
      }
    };
    exports2.ZodObject = ZodObject3;
    ZodObject3.create = (shape, params) => {
      return new ZodObject3({
        shape: () => shape,
        unknownKeys: "strip",
        catchall: ZodNever2.create(),
        typeName: ZodFirstPartyTypeKind2.ZodObject,
        ...processCreateParams2(params)
      });
    };
    ZodObject3.strictCreate = (shape, params) => {
      return new ZodObject3({
        shape: () => shape,
        unknownKeys: "strict",
        catchall: ZodNever2.create(),
        typeName: ZodFirstPartyTypeKind2.ZodObject,
        ...processCreateParams2(params)
      });
    };
    ZodObject3.lazycreate = (shape, params) => {
      return new ZodObject3({
        shape,
        unknownKeys: "strip",
        catchall: ZodNever2.create(),
        typeName: ZodFirstPartyTypeKind2.ZodObject,
        ...processCreateParams2(params)
      });
    };
    var ZodUnion2 = class extends ZodType2 {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const options = this._def.options;
        function handleResults(results) {
          for (const result of results) {
            if (result.result.status === "valid") {
              return result.result;
            }
          }
          for (const result of results) {
            if (result.result.status === "dirty") {
              ctx.common.issues.push(...result.ctx.common.issues);
              return result.result;
            }
          }
          const unionErrors = results.map((result) => new ZodError_1.ZodError(result.ctx.common.issues));
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_union,
            unionErrors
          });
          return parseUtil_1.INVALID;
        }
        if (ctx.common.async) {
          return Promise.all(options.map(async (option) => {
            const childCtx = {
              ...ctx,
              common: {
                ...ctx.common,
                issues: []
              },
              parent: null
            };
            return {
              result: await option._parseAsync({
                data: ctx.data,
                path: ctx.path,
                parent: childCtx
              }),
              ctx: childCtx
            };
          })).then(handleResults);
        } else {
          let dirty = void 0;
          const issues = [];
          for (const option of options) {
            const childCtx = {
              ...ctx,
              common: {
                ...ctx.common,
                issues: []
              },
              parent: null
            };
            const result = option._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: childCtx
            });
            if (result.status === "valid") {
              return result;
            } else if (result.status === "dirty" && !dirty) {
              dirty = { result, ctx: childCtx };
            }
            if (childCtx.common.issues.length) {
              issues.push(childCtx.common.issues);
            }
          }
          if (dirty) {
            ctx.common.issues.push(...dirty.ctx.common.issues);
            return dirty.result;
          }
          const unionErrors = issues.map((issues2) => new ZodError_1.ZodError(issues2));
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_union,
            unionErrors
          });
          return parseUtil_1.INVALID;
        }
      }
      get options() {
        return this._def.options;
      }
    };
    exports2.ZodUnion = ZodUnion2;
    ZodUnion2.create = (types, params) => {
      return new ZodUnion2({
        options: types,
        typeName: ZodFirstPartyTypeKind2.ZodUnion,
        ...processCreateParams2(params)
      });
    };
    var getDiscriminator2 = (type) => {
      if (type instanceof ZodLazy2) {
        return getDiscriminator2(type.schema);
      } else if (type instanceof ZodEffects2) {
        return getDiscriminator2(type.innerType());
      } else if (type instanceof ZodLiteral2) {
        return [type.value];
      } else if (type instanceof ZodEnum2) {
        return type.options;
      } else if (type instanceof ZodNativeEnum2) {
        return util_1.util.objectValues(type.enum);
      } else if (type instanceof ZodDefault2) {
        return getDiscriminator2(type._def.innerType);
      } else if (type instanceof ZodUndefined2) {
        return [void 0];
      } else if (type instanceof ZodNull2) {
        return [null];
      } else if (type instanceof ZodOptional2) {
        return [void 0, ...getDiscriminator2(type.unwrap())];
      } else if (type instanceof ZodNullable2) {
        return [null, ...getDiscriminator2(type.unwrap())];
      } else if (type instanceof ZodBranded2) {
        return getDiscriminator2(type.unwrap());
      } else if (type instanceof ZodReadonly2) {
        return getDiscriminator2(type.unwrap());
      } else if (type instanceof ZodCatch2) {
        return getDiscriminator2(type._def.innerType);
      } else {
        return [];
      }
    };
    var ZodDiscriminatedUnion2 = class _ZodDiscriminatedUnion extends ZodType2 {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.object) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.object,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const discriminator = this.discriminator;
        const discriminatorValue = ctx.data[discriminator];
        const option = this.optionsMap.get(discriminatorValue);
        if (!option) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_union_discriminator,
            options: Array.from(this.optionsMap.keys()),
            path: [discriminator]
          });
          return parseUtil_1.INVALID;
        }
        if (ctx.common.async) {
          return option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
        } else {
          return option._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
        }
      }
      get discriminator() {
        return this._def.discriminator;
      }
      get options() {
        return this._def.options;
      }
      get optionsMap() {
        return this._def.optionsMap;
      }
      /**
       * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
       * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
       * have a different value for each object in the union.
       * @param discriminator the name of the discriminator property
       * @param types an array of object schemas
       * @param params
       */
      static create(discriminator, options, params) {
        const optionsMap = /* @__PURE__ */ new Map();
        for (const type of options) {
          const discriminatorValues = getDiscriminator2(type.shape[discriminator]);
          if (!discriminatorValues.length) {
            throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
          }
          for (const value of discriminatorValues) {
            if (optionsMap.has(value)) {
              throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
            }
            optionsMap.set(value, type);
          }
        }
        return new _ZodDiscriminatedUnion({
          typeName: ZodFirstPartyTypeKind2.ZodDiscriminatedUnion,
          discriminator,
          options,
          optionsMap,
          ...processCreateParams2(params)
        });
      }
    };
    exports2.ZodDiscriminatedUnion = ZodDiscriminatedUnion2;
    function mergeValues2(a, b) {
      const aType = (0, util_1.getParsedType)(a);
      const bType = (0, util_1.getParsedType)(b);
      if (a === b) {
        return { valid: true, data: a };
      } else if (aType === util_1.ZodParsedType.object && bType === util_1.ZodParsedType.object) {
        const bKeys = util_1.util.objectKeys(b);
        const sharedKeys = util_1.util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
        const newObj = { ...a, ...b };
        for (const key of sharedKeys) {
          const sharedValue = mergeValues2(a[key], b[key]);
          if (!sharedValue.valid) {
            return { valid: false };
          }
          newObj[key] = sharedValue.data;
        }
        return { valid: true, data: newObj };
      } else if (aType === util_1.ZodParsedType.array && bType === util_1.ZodParsedType.array) {
        if (a.length !== b.length) {
          return { valid: false };
        }
        const newArray = [];
        for (let index = 0; index < a.length; index++) {
          const itemA = a[index];
          const itemB = b[index];
          const sharedValue = mergeValues2(itemA, itemB);
          if (!sharedValue.valid) {
            return { valid: false };
          }
          newArray.push(sharedValue.data);
        }
        return { valid: true, data: newArray };
      } else if (aType === util_1.ZodParsedType.date && bType === util_1.ZodParsedType.date && +a === +b) {
        return { valid: true, data: a };
      } else {
        return { valid: false };
      }
    }
    var ZodIntersection2 = class extends ZodType2 {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const handleParsed = (parsedLeft, parsedRight) => {
          if ((0, parseUtil_1.isAborted)(parsedLeft) || (0, parseUtil_1.isAborted)(parsedRight)) {
            return parseUtil_1.INVALID;
          }
          const merged = mergeValues2(parsedLeft.value, parsedRight.value);
          if (!merged.valid) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.invalid_intersection_types
            });
            return parseUtil_1.INVALID;
          }
          if ((0, parseUtil_1.isDirty)(parsedLeft) || (0, parseUtil_1.isDirty)(parsedRight)) {
            status.dirty();
          }
          return { status: status.value, value: merged.data };
        };
        if (ctx.common.async) {
          return Promise.all([
            this._def.left._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            }),
            this._def.right._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            })
          ]).then(([left, right]) => handleParsed(left, right));
        } else {
          return handleParsed(this._def.left._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }), this._def.right._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          }));
        }
      }
    };
    exports2.ZodIntersection = ZodIntersection2;
    ZodIntersection2.create = (left, right, params) => {
      return new ZodIntersection2({
        left,
        right,
        typeName: ZodFirstPartyTypeKind2.ZodIntersection,
        ...processCreateParams2(params)
      });
    };
    var ZodTuple2 = class _ZodTuple extends ZodType2 {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.array) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.array,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        if (ctx.data.length < this._def.items.length) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.too_small,
            minimum: this._def.items.length,
            inclusive: true,
            exact: false,
            type: "array"
          });
          return parseUtil_1.INVALID;
        }
        const rest = this._def.rest;
        if (!rest && ctx.data.length > this._def.items.length) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.too_big,
            maximum: this._def.items.length,
            inclusive: true,
            exact: false,
            type: "array"
          });
          status.dirty();
        }
        const items = [...ctx.data].map((item, itemIndex) => {
          const schema = this._def.items[itemIndex] || this._def.rest;
          if (!schema)
            return null;
          return schema._parse(new ParseInputLazyPath2(ctx, item, ctx.path, itemIndex));
        }).filter((x) => !!x);
        if (ctx.common.async) {
          return Promise.all(items).then((results) => {
            return parseUtil_1.ParseStatus.mergeArray(status, results);
          });
        } else {
          return parseUtil_1.ParseStatus.mergeArray(status, items);
        }
      }
      get items() {
        return this._def.items;
      }
      rest(rest) {
        return new _ZodTuple({
          ...this._def,
          rest
        });
      }
    };
    exports2.ZodTuple = ZodTuple2;
    ZodTuple2.create = (schemas, params) => {
      if (!Array.isArray(schemas)) {
        throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
      }
      return new ZodTuple2({
        items: schemas,
        typeName: ZodFirstPartyTypeKind2.ZodTuple,
        rest: null,
        ...processCreateParams2(params)
      });
    };
    var ZodRecord2 = class _ZodRecord extends ZodType2 {
      get keySchema() {
        return this._def.keyType;
      }
      get valueSchema() {
        return this._def.valueType;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.object) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.object,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const pairs = [];
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        for (const key in ctx.data) {
          pairs.push({
            key: keyType._parse(new ParseInputLazyPath2(ctx, key, ctx.path, key)),
            value: valueType._parse(new ParseInputLazyPath2(ctx, ctx.data[key], ctx.path, key)),
            alwaysSet: key in ctx.data
          });
        }
        if (ctx.common.async) {
          return parseUtil_1.ParseStatus.mergeObjectAsync(status, pairs);
        } else {
          return parseUtil_1.ParseStatus.mergeObjectSync(status, pairs);
        }
      }
      get element() {
        return this._def.valueType;
      }
      static create(first, second, third) {
        if (second instanceof ZodType2) {
          return new _ZodRecord({
            keyType: first,
            valueType: second,
            typeName: ZodFirstPartyTypeKind2.ZodRecord,
            ...processCreateParams2(third)
          });
        }
        return new _ZodRecord({
          keyType: ZodString2.create(),
          valueType: first,
          typeName: ZodFirstPartyTypeKind2.ZodRecord,
          ...processCreateParams2(second)
        });
      }
    };
    exports2.ZodRecord = ZodRecord2;
    var ZodMap2 = class extends ZodType2 {
      get keySchema() {
        return this._def.keyType;
      }
      get valueSchema() {
        return this._def.valueType;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.map) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.map,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const keyType = this._def.keyType;
        const valueType = this._def.valueType;
        const pairs = [...ctx.data.entries()].map(([key, value], index) => {
          return {
            key: keyType._parse(new ParseInputLazyPath2(ctx, key, ctx.path, [index, "key"])),
            value: valueType._parse(new ParseInputLazyPath2(ctx, value, ctx.path, [index, "value"]))
          };
        });
        if (ctx.common.async) {
          const finalMap = /* @__PURE__ */ new Map();
          return Promise.resolve().then(async () => {
            for (const pair of pairs) {
              const key = await pair.key;
              const value = await pair.value;
              if (key.status === "aborted" || value.status === "aborted") {
                return parseUtil_1.INVALID;
              }
              if (key.status === "dirty" || value.status === "dirty") {
                status.dirty();
              }
              finalMap.set(key.value, value.value);
            }
            return { status: status.value, value: finalMap };
          });
        } else {
          const finalMap = /* @__PURE__ */ new Map();
          for (const pair of pairs) {
            const key = pair.key;
            const value = pair.value;
            if (key.status === "aborted" || value.status === "aborted") {
              return parseUtil_1.INVALID;
            }
            if (key.status === "dirty" || value.status === "dirty") {
              status.dirty();
            }
            finalMap.set(key.value, value.value);
          }
          return { status: status.value, value: finalMap };
        }
      }
    };
    exports2.ZodMap = ZodMap2;
    ZodMap2.create = (keyType, valueType, params) => {
      return new ZodMap2({
        valueType,
        keyType,
        typeName: ZodFirstPartyTypeKind2.ZodMap,
        ...processCreateParams2(params)
      });
    };
    var ZodSet2 = class _ZodSet extends ZodType2 {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.set) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.set,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const def = this._def;
        if (def.minSize !== null) {
          if (ctx.data.size < def.minSize.value) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_small,
              minimum: def.minSize.value,
              type: "set",
              inclusive: true,
              exact: false,
              message: def.minSize.message
            });
            status.dirty();
          }
        }
        if (def.maxSize !== null) {
          if (ctx.data.size > def.maxSize.value) {
            (0, parseUtil_1.addIssueToContext)(ctx, {
              code: ZodError_1.ZodIssueCode.too_big,
              maximum: def.maxSize.value,
              type: "set",
              inclusive: true,
              exact: false,
              message: def.maxSize.message
            });
            status.dirty();
          }
        }
        const valueType = this._def.valueType;
        function finalizeSet(elements2) {
          const parsedSet = /* @__PURE__ */ new Set();
          for (const element of elements2) {
            if (element.status === "aborted")
              return parseUtil_1.INVALID;
            if (element.status === "dirty")
              status.dirty();
            parsedSet.add(element.value);
          }
          return { status: status.value, value: parsedSet };
        }
        const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath2(ctx, item, ctx.path, i)));
        if (ctx.common.async) {
          return Promise.all(elements).then((elements2) => finalizeSet(elements2));
        } else {
          return finalizeSet(elements);
        }
      }
      min(minSize, message) {
        return new _ZodSet({
          ...this._def,
          minSize: { value: minSize, message: errorUtil_1.errorUtil.toString(message) }
        });
      }
      max(maxSize, message) {
        return new _ZodSet({
          ...this._def,
          maxSize: { value: maxSize, message: errorUtil_1.errorUtil.toString(message) }
        });
      }
      size(size, message) {
        return this.min(size, message).max(size, message);
      }
      nonempty(message) {
        return this.min(1, message);
      }
    };
    exports2.ZodSet = ZodSet2;
    ZodSet2.create = (valueType, params) => {
      return new ZodSet2({
        valueType,
        minSize: null,
        maxSize: null,
        typeName: ZodFirstPartyTypeKind2.ZodSet,
        ...processCreateParams2(params)
      });
    };
    var ZodFunction2 = class _ZodFunction extends ZodType2 {
      constructor() {
        super(...arguments);
        this.validate = this.implement;
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.function) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.function,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        function makeArgsIssue(args, error) {
          return (0, parseUtil_1.makeIssue)({
            data: args,
            path: ctx.path,
            errorMaps: [
              ctx.common.contextualErrorMap,
              ctx.schemaErrorMap,
              (0, errors_1.getErrorMap)(),
              errors_1.defaultErrorMap
            ].filter((x) => !!x),
            issueData: {
              code: ZodError_1.ZodIssueCode.invalid_arguments,
              argumentsError: error
            }
          });
        }
        function makeReturnsIssue(returns, error) {
          return (0, parseUtil_1.makeIssue)({
            data: returns,
            path: ctx.path,
            errorMaps: [
              ctx.common.contextualErrorMap,
              ctx.schemaErrorMap,
              (0, errors_1.getErrorMap)(),
              errors_1.defaultErrorMap
            ].filter((x) => !!x),
            issueData: {
              code: ZodError_1.ZodIssueCode.invalid_return_type,
              returnTypeError: error
            }
          });
        }
        const params = { errorMap: ctx.common.contextualErrorMap };
        const fn = ctx.data;
        if (this._def.returns instanceof ZodPromise2) {
          const me = this;
          return (0, parseUtil_1.OK)(async function(...args) {
            const error = new ZodError_1.ZodError([]);
            const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {
              error.addIssue(makeArgsIssue(args, e));
              throw error;
            });
            const result = await Reflect.apply(fn, this, parsedArgs);
            const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e) => {
              error.addIssue(makeReturnsIssue(result, e));
              throw error;
            });
            return parsedReturns;
          });
        } else {
          const me = this;
          return (0, parseUtil_1.OK)(function(...args) {
            const parsedArgs = me._def.args.safeParse(args, params);
            if (!parsedArgs.success) {
              throw new ZodError_1.ZodError([makeArgsIssue(args, parsedArgs.error)]);
            }
            const result = Reflect.apply(fn, this, parsedArgs.data);
            const parsedReturns = me._def.returns.safeParse(result, params);
            if (!parsedReturns.success) {
              throw new ZodError_1.ZodError([makeReturnsIssue(result, parsedReturns.error)]);
            }
            return parsedReturns.data;
          });
        }
      }
      parameters() {
        return this._def.args;
      }
      returnType() {
        return this._def.returns;
      }
      args(...items) {
        return new _ZodFunction({
          ...this._def,
          args: ZodTuple2.create(items).rest(ZodUnknown2.create())
        });
      }
      returns(returnType) {
        return new _ZodFunction({
          ...this._def,
          returns: returnType
        });
      }
      implement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
      }
      strictImplement(func) {
        const validatedFunc = this.parse(func);
        return validatedFunc;
      }
      static create(args, returns, params) {
        return new _ZodFunction({
          args: args ? args : ZodTuple2.create([]).rest(ZodUnknown2.create()),
          returns: returns || ZodUnknown2.create(),
          typeName: ZodFirstPartyTypeKind2.ZodFunction,
          ...processCreateParams2(params)
        });
      }
    };
    exports2.ZodFunction = ZodFunction2;
    var ZodLazy2 = class extends ZodType2 {
      get schema() {
        return this._def.getter();
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const lazySchema = this._def.getter();
        return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
      }
    };
    exports2.ZodLazy = ZodLazy2;
    ZodLazy2.create = (getter, params) => {
      return new ZodLazy2({
        getter,
        typeName: ZodFirstPartyTypeKind2.ZodLazy,
        ...processCreateParams2(params)
      });
    };
    var ZodLiteral2 = class extends ZodType2 {
      _parse(input) {
        if (input.data !== this._def.value) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            received: ctx.data,
            code: ZodError_1.ZodIssueCode.invalid_literal,
            expected: this._def.value
          });
          return parseUtil_1.INVALID;
        }
        return { status: "valid", value: input.data };
      }
      get value() {
        return this._def.value;
      }
    };
    exports2.ZodLiteral = ZodLiteral2;
    ZodLiteral2.create = (value, params) => {
      return new ZodLiteral2({
        value,
        typeName: ZodFirstPartyTypeKind2.ZodLiteral,
        ...processCreateParams2(params)
      });
    };
    function createZodEnum2(values, params) {
      return new ZodEnum2({
        values,
        typeName: ZodFirstPartyTypeKind2.ZodEnum,
        ...processCreateParams2(params)
      });
    }
    var ZodEnum2 = class _ZodEnum extends ZodType2 {
      constructor() {
        super(...arguments);
        _ZodEnum_cache2.set(this, void 0);
      }
      _parse(input) {
        if (typeof input.data !== "string") {
          const ctx = this._getOrReturnCtx(input);
          const expectedValues = this._def.values;
          (0, parseUtil_1.addIssueToContext)(ctx, {
            expected: util_1.util.joinValues(expectedValues),
            received: ctx.parsedType,
            code: ZodError_1.ZodIssueCode.invalid_type
          });
          return parseUtil_1.INVALID;
        }
        if (!__classPrivateFieldGet2(this, _ZodEnum_cache2, "f")) {
          __classPrivateFieldSet2(this, _ZodEnum_cache2, new Set(this._def.values), "f");
        }
        if (!__classPrivateFieldGet2(this, _ZodEnum_cache2, "f").has(input.data)) {
          const ctx = this._getOrReturnCtx(input);
          const expectedValues = this._def.values;
          (0, parseUtil_1.addIssueToContext)(ctx, {
            received: ctx.data,
            code: ZodError_1.ZodIssueCode.invalid_enum_value,
            options: expectedValues
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
      get options() {
        return this._def.values;
      }
      get enum() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      get Values() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      get Enum() {
        const enumValues = {};
        for (const val of this._def.values) {
          enumValues[val] = val;
        }
        return enumValues;
      }
      extract(values, newDef = this._def) {
        return _ZodEnum.create(values, {
          ...this._def,
          ...newDef
        });
      }
      exclude(values, newDef = this._def) {
        return _ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
          ...this._def,
          ...newDef
        });
      }
    };
    exports2.ZodEnum = ZodEnum2;
    _ZodEnum_cache2 = /* @__PURE__ */ new WeakMap();
    ZodEnum2.create = createZodEnum2;
    var ZodNativeEnum2 = class extends ZodType2 {
      constructor() {
        super(...arguments);
        _ZodNativeEnum_cache2.set(this, void 0);
      }
      _parse(input) {
        const nativeEnumValues = util_1.util.getValidEnumValues(this._def.values);
        const ctx = this._getOrReturnCtx(input);
        if (ctx.parsedType !== util_1.ZodParsedType.string && ctx.parsedType !== util_1.ZodParsedType.number) {
          const expectedValues = util_1.util.objectValues(nativeEnumValues);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            expected: util_1.util.joinValues(expectedValues),
            received: ctx.parsedType,
            code: ZodError_1.ZodIssueCode.invalid_type
          });
          return parseUtil_1.INVALID;
        }
        if (!__classPrivateFieldGet2(this, _ZodNativeEnum_cache2, "f")) {
          __classPrivateFieldSet2(this, _ZodNativeEnum_cache2, new Set(util_1.util.getValidEnumValues(this._def.values)), "f");
        }
        if (!__classPrivateFieldGet2(this, _ZodNativeEnum_cache2, "f").has(input.data)) {
          const expectedValues = util_1.util.objectValues(nativeEnumValues);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            received: ctx.data,
            code: ZodError_1.ZodIssueCode.invalid_enum_value,
            options: expectedValues
          });
          return parseUtil_1.INVALID;
        }
        return (0, parseUtil_1.OK)(input.data);
      }
      get enum() {
        return this._def.values;
      }
    };
    exports2.ZodNativeEnum = ZodNativeEnum2;
    _ZodNativeEnum_cache2 = /* @__PURE__ */ new WeakMap();
    ZodNativeEnum2.create = (values, params) => {
      return new ZodNativeEnum2({
        values,
        typeName: ZodFirstPartyTypeKind2.ZodNativeEnum,
        ...processCreateParams2(params)
      });
    };
    var ZodPromise2 = class extends ZodType2 {
      unwrap() {
        return this._def.type;
      }
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        if (ctx.parsedType !== util_1.ZodParsedType.promise && ctx.common.async === false) {
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.promise,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        const promisified = ctx.parsedType === util_1.ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
        return (0, parseUtil_1.OK)(promisified.then((data) => {
          return this._def.type.parseAsync(data, {
            path: ctx.path,
            errorMap: ctx.common.contextualErrorMap
          });
        }));
      }
    };
    exports2.ZodPromise = ZodPromise2;
    ZodPromise2.create = (schema, params) => {
      return new ZodPromise2({
        type: schema,
        typeName: ZodFirstPartyTypeKind2.ZodPromise,
        ...processCreateParams2(params)
      });
    };
    var ZodEffects2 = class extends ZodType2 {
      innerType() {
        return this._def.schema;
      }
      sourceType() {
        return this._def.schema._def.typeName === ZodFirstPartyTypeKind2.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
      }
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        const effect = this._def.effect || null;
        const checkCtx = {
          addIssue: (arg) => {
            (0, parseUtil_1.addIssueToContext)(ctx, arg);
            if (arg.fatal) {
              status.abort();
            } else {
              status.dirty();
            }
          },
          get path() {
            return ctx.path;
          }
        };
        checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
        if (effect.type === "preprocess") {
          const processed = effect.transform(ctx.data, checkCtx);
          if (ctx.common.async) {
            return Promise.resolve(processed).then(async (processed2) => {
              if (status.value === "aborted")
                return parseUtil_1.INVALID;
              const result = await this._def.schema._parseAsync({
                data: processed2,
                path: ctx.path,
                parent: ctx
              });
              if (result.status === "aborted")
                return parseUtil_1.INVALID;
              if (result.status === "dirty")
                return (0, parseUtil_1.DIRTY)(result.value);
              if (status.value === "dirty")
                return (0, parseUtil_1.DIRTY)(result.value);
              return result;
            });
          } else {
            if (status.value === "aborted")
              return parseUtil_1.INVALID;
            const result = this._def.schema._parseSync({
              data: processed,
              path: ctx.path,
              parent: ctx
            });
            if (result.status === "aborted")
              return parseUtil_1.INVALID;
            if (result.status === "dirty")
              return (0, parseUtil_1.DIRTY)(result.value);
            if (status.value === "dirty")
              return (0, parseUtil_1.DIRTY)(result.value);
            return result;
          }
        }
        if (effect.type === "refinement") {
          const executeRefinement = (acc) => {
            const result = effect.refinement(acc, checkCtx);
            if (ctx.common.async) {
              return Promise.resolve(result);
            }
            if (result instanceof Promise) {
              throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
            }
            return acc;
          };
          if (ctx.common.async === false) {
            const inner = this._def.schema._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (inner.status === "aborted")
              return parseUtil_1.INVALID;
            if (inner.status === "dirty")
              status.dirty();
            executeRefinement(inner.value);
            return { status: status.value, value: inner.value };
          } else {
            return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
              if (inner.status === "aborted")
                return parseUtil_1.INVALID;
              if (inner.status === "dirty")
                status.dirty();
              return executeRefinement(inner.value).then(() => {
                return { status: status.value, value: inner.value };
              });
            });
          }
        }
        if (effect.type === "transform") {
          if (ctx.common.async === false) {
            const base = this._def.schema._parseSync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (!(0, parseUtil_1.isValid)(base))
              return base;
            const result = effect.transform(base.value, checkCtx);
            if (result instanceof Promise) {
              throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
            }
            return { status: status.value, value: result };
          } else {
            return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
              if (!(0, parseUtil_1.isValid)(base))
                return base;
              return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
            });
          }
        }
        util_1.util.assertNever(effect);
      }
    };
    exports2.ZodEffects = ZodEffects2;
    exports2.ZodTransformer = ZodEffects2;
    ZodEffects2.create = (schema, effect, params) => {
      return new ZodEffects2({
        schema,
        typeName: ZodFirstPartyTypeKind2.ZodEffects,
        effect,
        ...processCreateParams2(params)
      });
    };
    ZodEffects2.createWithPreprocess = (preprocess, schema, params) => {
      return new ZodEffects2({
        schema,
        effect: { type: "preprocess", transform: preprocess },
        typeName: ZodFirstPartyTypeKind2.ZodEffects,
        ...processCreateParams2(params)
      });
    };
    var ZodOptional2 = class extends ZodType2 {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === util_1.ZodParsedType.undefined) {
          return (0, parseUtil_1.OK)(void 0);
        }
        return this._def.innerType._parse(input);
      }
      unwrap() {
        return this._def.innerType;
      }
    };
    exports2.ZodOptional = ZodOptional2;
    ZodOptional2.create = (type, params) => {
      return new ZodOptional2({
        innerType: type,
        typeName: ZodFirstPartyTypeKind2.ZodOptional,
        ...processCreateParams2(params)
      });
    };
    var ZodNullable2 = class extends ZodType2 {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType === util_1.ZodParsedType.null) {
          return (0, parseUtil_1.OK)(null);
        }
        return this._def.innerType._parse(input);
      }
      unwrap() {
        return this._def.innerType;
      }
    };
    exports2.ZodNullable = ZodNullable2;
    ZodNullable2.create = (type, params) => {
      return new ZodNullable2({
        innerType: type,
        typeName: ZodFirstPartyTypeKind2.ZodNullable,
        ...processCreateParams2(params)
      });
    };
    var ZodDefault2 = class extends ZodType2 {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        let data = ctx.data;
        if (ctx.parsedType === util_1.ZodParsedType.undefined) {
          data = this._def.defaultValue();
        }
        return this._def.innerType._parse({
          data,
          path: ctx.path,
          parent: ctx
        });
      }
      removeDefault() {
        return this._def.innerType;
      }
    };
    exports2.ZodDefault = ZodDefault2;
    ZodDefault2.create = (type, params) => {
      return new ZodDefault2({
        innerType: type,
        typeName: ZodFirstPartyTypeKind2.ZodDefault,
        defaultValue: typeof params.default === "function" ? params.default : () => params.default,
        ...processCreateParams2(params)
      });
    };
    var ZodCatch2 = class extends ZodType2 {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const newCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          }
        };
        const result = this._def.innerType._parse({
          data: newCtx.data,
          path: newCtx.path,
          parent: {
            ...newCtx
          }
        });
        if ((0, parseUtil_1.isAsync)(result)) {
          return result.then((result2) => {
            return {
              status: "valid",
              value: result2.status === "valid" ? result2.value : this._def.catchValue({
                get error() {
                  return new ZodError_1.ZodError(newCtx.common.issues);
                },
                input: newCtx.data
              })
            };
          });
        } else {
          return {
            status: "valid",
            value: result.status === "valid" ? result.value : this._def.catchValue({
              get error() {
                return new ZodError_1.ZodError(newCtx.common.issues);
              },
              input: newCtx.data
            })
          };
        }
      }
      removeCatch() {
        return this._def.innerType;
      }
    };
    exports2.ZodCatch = ZodCatch2;
    ZodCatch2.create = (type, params) => {
      return new ZodCatch2({
        innerType: type,
        typeName: ZodFirstPartyTypeKind2.ZodCatch,
        catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
        ...processCreateParams2(params)
      });
    };
    var ZodNaN2 = class extends ZodType2 {
      _parse(input) {
        const parsedType = this._getType(input);
        if (parsedType !== util_1.ZodParsedType.nan) {
          const ctx = this._getOrReturnCtx(input);
          (0, parseUtil_1.addIssueToContext)(ctx, {
            code: ZodError_1.ZodIssueCode.invalid_type,
            expected: util_1.ZodParsedType.nan,
            received: ctx.parsedType
          });
          return parseUtil_1.INVALID;
        }
        return { status: "valid", value: input.data };
      }
    };
    exports2.ZodNaN = ZodNaN2;
    ZodNaN2.create = (params) => {
      return new ZodNaN2({
        typeName: ZodFirstPartyTypeKind2.ZodNaN,
        ...processCreateParams2(params)
      });
    };
    exports2.BRAND = Symbol("zod_brand");
    var ZodBranded2 = class extends ZodType2 {
      _parse(input) {
        const { ctx } = this._processInputParams(input);
        const data = ctx.data;
        return this._def.type._parse({
          data,
          path: ctx.path,
          parent: ctx
        });
      }
      unwrap() {
        return this._def.type;
      }
    };
    exports2.ZodBranded = ZodBranded2;
    var ZodPipeline2 = class _ZodPipeline extends ZodType2 {
      _parse(input) {
        const { status, ctx } = this._processInputParams(input);
        if (ctx.common.async) {
          const handleAsync = async () => {
            const inResult = await this._def.in._parseAsync({
              data: ctx.data,
              path: ctx.path,
              parent: ctx
            });
            if (inResult.status === "aborted")
              return parseUtil_1.INVALID;
            if (inResult.status === "dirty") {
              status.dirty();
              return (0, parseUtil_1.DIRTY)(inResult.value);
            } else {
              return this._def.out._parseAsync({
                data: inResult.value,
                path: ctx.path,
                parent: ctx
              });
            }
          };
          return handleAsync();
        } else {
          const inResult = this._def.in._parseSync({
            data: ctx.data,
            path: ctx.path,
            parent: ctx
          });
          if (inResult.status === "aborted")
            return parseUtil_1.INVALID;
          if (inResult.status === "dirty") {
            status.dirty();
            return {
              status: "dirty",
              value: inResult.value
            };
          } else {
            return this._def.out._parseSync({
              data: inResult.value,
              path: ctx.path,
              parent: ctx
            });
          }
        }
      }
      static create(a, b) {
        return new _ZodPipeline({
          in: a,
          out: b,
          typeName: ZodFirstPartyTypeKind2.ZodPipeline
        });
      }
    };
    exports2.ZodPipeline = ZodPipeline2;
    var ZodReadonly2 = class extends ZodType2 {
      _parse(input) {
        const result = this._def.innerType._parse(input);
        const freeze = (data) => {
          if ((0, parseUtil_1.isValid)(data)) {
            data.value = Object.freeze(data.value);
          }
          return data;
        };
        return (0, parseUtil_1.isAsync)(result) ? result.then((data) => freeze(data)) : freeze(result);
      }
      unwrap() {
        return this._def.innerType;
      }
    };
    exports2.ZodReadonly = ZodReadonly2;
    ZodReadonly2.create = (type, params) => {
      return new ZodReadonly2({
        innerType: type,
        typeName: ZodFirstPartyTypeKind2.ZodReadonly,
        ...processCreateParams2(params)
      });
    };
    function cleanParams2(params, data) {
      const p = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
      const p2 = typeof p === "string" ? { message: p } : p;
      return p2;
    }
    function custom2(check, _params = {}, fatal) {
      if (check)
        return ZodAny2.create().superRefine((data, ctx) => {
          var _a, _b;
          const r = check(data);
          if (r instanceof Promise) {
            return r.then((r2) => {
              var _a2, _b2;
              if (!r2) {
                const params = cleanParams2(_params, data);
                const _fatal = (_b2 = (_a2 = params.fatal) !== null && _a2 !== void 0 ? _a2 : fatal) !== null && _b2 !== void 0 ? _b2 : true;
                ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
              }
            });
          }
          if (!r) {
            const params = cleanParams2(_params, data);
            const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
            ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
          }
          return;
        });
      return ZodAny2.create();
    }
    exports2.custom = custom2;
    exports2.late = {
      object: ZodObject3.lazycreate
    };
    var ZodFirstPartyTypeKind2;
    (function(ZodFirstPartyTypeKind3) {
      ZodFirstPartyTypeKind3["ZodString"] = "ZodString";
      ZodFirstPartyTypeKind3["ZodNumber"] = "ZodNumber";
      ZodFirstPartyTypeKind3["ZodNaN"] = "ZodNaN";
      ZodFirstPartyTypeKind3["ZodBigInt"] = "ZodBigInt";
      ZodFirstPartyTypeKind3["ZodBoolean"] = "ZodBoolean";
      ZodFirstPartyTypeKind3["ZodDate"] = "ZodDate";
      ZodFirstPartyTypeKind3["ZodSymbol"] = "ZodSymbol";
      ZodFirstPartyTypeKind3["ZodUndefined"] = "ZodUndefined";
      ZodFirstPartyTypeKind3["ZodNull"] = "ZodNull";
      ZodFirstPartyTypeKind3["ZodAny"] = "ZodAny";
      ZodFirstPartyTypeKind3["ZodUnknown"] = "ZodUnknown";
      ZodFirstPartyTypeKind3["ZodNever"] = "ZodNever";
      ZodFirstPartyTypeKind3["ZodVoid"] = "ZodVoid";
      ZodFirstPartyTypeKind3["ZodArray"] = "ZodArray";
      ZodFirstPartyTypeKind3["ZodObject"] = "ZodObject";
      ZodFirstPartyTypeKind3["ZodUnion"] = "ZodUnion";
      ZodFirstPartyTypeKind3["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
      ZodFirstPartyTypeKind3["ZodIntersection"] = "ZodIntersection";
      ZodFirstPartyTypeKind3["ZodTuple"] = "ZodTuple";
      ZodFirstPartyTypeKind3["ZodRecord"] = "ZodRecord";
      ZodFirstPartyTypeKind3["ZodMap"] = "ZodMap";
      ZodFirstPartyTypeKind3["ZodSet"] = "ZodSet";
      ZodFirstPartyTypeKind3["ZodFunction"] = "ZodFunction";
      ZodFirstPartyTypeKind3["ZodLazy"] = "ZodLazy";
      ZodFirstPartyTypeKind3["ZodLiteral"] = "ZodLiteral";
      ZodFirstPartyTypeKind3["ZodEnum"] = "ZodEnum";
      ZodFirstPartyTypeKind3["ZodEffects"] = "ZodEffects";
      ZodFirstPartyTypeKind3["ZodNativeEnum"] = "ZodNativeEnum";
      ZodFirstPartyTypeKind3["ZodOptional"] = "ZodOptional";
      ZodFirstPartyTypeKind3["ZodNullable"] = "ZodNullable";
      ZodFirstPartyTypeKind3["ZodDefault"] = "ZodDefault";
      ZodFirstPartyTypeKind3["ZodCatch"] = "ZodCatch";
      ZodFirstPartyTypeKind3["ZodPromise"] = "ZodPromise";
      ZodFirstPartyTypeKind3["ZodBranded"] = "ZodBranded";
      ZodFirstPartyTypeKind3["ZodPipeline"] = "ZodPipeline";
      ZodFirstPartyTypeKind3["ZodReadonly"] = "ZodReadonly";
    })(ZodFirstPartyTypeKind2 || (exports2.ZodFirstPartyTypeKind = ZodFirstPartyTypeKind2 = {}));
    var instanceOfType2 = (cls, params = {
      message: `Input not instance of ${cls.name}`
    }) => custom2((data) => data instanceof cls, params);
    exports2.instanceof = instanceOfType2;
    var stringType2 = ZodString2.create;
    exports2.string = stringType2;
    var numberType2 = ZodNumber2.create;
    exports2.number = numberType2;
    var nanType2 = ZodNaN2.create;
    exports2.nan = nanType2;
    var bigIntType2 = ZodBigInt2.create;
    exports2.bigint = bigIntType2;
    var booleanType2 = ZodBoolean2.create;
    exports2.boolean = booleanType2;
    var dateType2 = ZodDate2.create;
    exports2.date = dateType2;
    var symbolType2 = ZodSymbol2.create;
    exports2.symbol = symbolType2;
    var undefinedType2 = ZodUndefined2.create;
    exports2.undefined = undefinedType2;
    var nullType2 = ZodNull2.create;
    exports2.null = nullType2;
    var anyType2 = ZodAny2.create;
    exports2.any = anyType2;
    var unknownType2 = ZodUnknown2.create;
    exports2.unknown = unknownType2;
    var neverType2 = ZodNever2.create;
    exports2.never = neverType2;
    var voidType2 = ZodVoid2.create;
    exports2.void = voidType2;
    var arrayType2 = ZodArray2.create;
    exports2.array = arrayType2;
    var objectType2 = ZodObject3.create;
    exports2.object = objectType2;
    var strictObjectType2 = ZodObject3.strictCreate;
    exports2.strictObject = strictObjectType2;
    var unionType2 = ZodUnion2.create;
    exports2.union = unionType2;
    var discriminatedUnionType2 = ZodDiscriminatedUnion2.create;
    exports2.discriminatedUnion = discriminatedUnionType2;
    var intersectionType2 = ZodIntersection2.create;
    exports2.intersection = intersectionType2;
    var tupleType2 = ZodTuple2.create;
    exports2.tuple = tupleType2;
    var recordType2 = ZodRecord2.create;
    exports2.record = recordType2;
    var mapType2 = ZodMap2.create;
    exports2.map = mapType2;
    var setType2 = ZodSet2.create;
    exports2.set = setType2;
    var functionType2 = ZodFunction2.create;
    exports2.function = functionType2;
    var lazyType2 = ZodLazy2.create;
    exports2.lazy = lazyType2;
    var literalType2 = ZodLiteral2.create;
    exports2.literal = literalType2;
    var enumType2 = ZodEnum2.create;
    exports2.enum = enumType2;
    var nativeEnumType2 = ZodNativeEnum2.create;
    exports2.nativeEnum = nativeEnumType2;
    var promiseType2 = ZodPromise2.create;
    exports2.promise = promiseType2;
    var effectsType2 = ZodEffects2.create;
    exports2.effect = effectsType2;
    exports2.transformer = effectsType2;
    var optionalType2 = ZodOptional2.create;
    exports2.optional = optionalType2;
    var nullableType2 = ZodNullable2.create;
    exports2.nullable = nullableType2;
    var preprocessType2 = ZodEffects2.createWithPreprocess;
    exports2.preprocess = preprocessType2;
    var pipelineType2 = ZodPipeline2.create;
    exports2.pipeline = pipelineType2;
    var ostring2 = () => stringType2().optional();
    exports2.ostring = ostring2;
    var onumber2 = () => numberType2().optional();
    exports2.onumber = onumber2;
    var oboolean2 = () => booleanType2().optional();
    exports2.oboolean = oboolean2;
    exports2.coerce = {
      string: (arg) => ZodString2.create({ ...arg, coerce: true }),
      number: (arg) => ZodNumber2.create({ ...arg, coerce: true }),
      boolean: (arg) => ZodBoolean2.create({
        ...arg,
        coerce: true
      }),
      bigint: (arg) => ZodBigInt2.create({ ...arg, coerce: true }),
      date: (arg) => ZodDate2.create({ ...arg, coerce: true })
    };
    exports2.NEVER = parseUtil_1.INVALID;
  }
});

// node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/external.js
var require_external = __commonJS({
  "node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/external.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_errors(), exports2);
    __exportStar(require_parseUtil(), exports2);
    __exportStar(require_typeAliases(), exports2);
    __exportStar(require_util(), exports2);
    __exportStar(require_types(), exports2);
    __exportStar(require_ZodError(), exports2);
  }
});

// node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/index.js
var require_lib = __commonJS({
  "node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.z = void 0;
    var z2 = __importStar(require_external());
    exports2.z = z2;
    __exportStar(require_external(), exports2);
    exports2.default = z2;
  }
});

// node_modules/.pnpm/@ai-sdk+anthropic@1.2.0_zod@3.24.2/node_modules/@ai-sdk/anthropic/dist/index.js
var require_dist4 = __commonJS({
  "node_modules/.pnpm/@ai-sdk+anthropic@1.2.0_zod@3.24.2/node_modules/@ai-sdk/anthropic/dist/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      anthropic: () => anthropic,
      createAnthropic: () => createAnthropic
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_provider4 = require_dist();
    var import_provider_utils4 = require_dist3();
    var import_provider3 = require_dist();
    var import_provider_utils3 = require_dist3();
    var import_zod2 = require_lib();
    var import_provider_utils = require_dist3();
    var import_zod3 = require_lib();
    var anthropicErrorDataSchema = import_zod3.z.object({
      type: import_zod3.z.literal("error"),
      error: import_zod3.z.object({
        type: import_zod3.z.string(),
        message: import_zod3.z.string()
      })
    });
    var anthropicFailedResponseHandler = (0, import_provider_utils.createJsonErrorResponseHandler)({
      errorSchema: anthropicErrorDataSchema,
      errorToMessage: (data) => data.error.message
    });
    var import_provider = require_dist();
    function prepareTools(mode) {
      var _a;
      const tools = ((_a = mode.tools) == null ? void 0 : _a.length) ? mode.tools : void 0;
      const toolWarnings = [];
      const betas = /* @__PURE__ */ new Set();
      if (tools == null) {
        return { tools: void 0, tool_choice: void 0, toolWarnings, betas };
      }
      const anthropicTools2 = [];
      for (const tool of tools) {
        switch (tool.type) {
          case "function":
            anthropicTools2.push({
              name: tool.name,
              description: tool.description,
              input_schema: tool.parameters
            });
            break;
          case "provider-defined":
            switch (tool.id) {
              case "anthropic.computer_20250124":
                betas.add("computer-use-2025-01-24");
                anthropicTools2.push({
                  name: tool.name,
                  type: "computer_20250124",
                  display_width_px: tool.args.displayWidthPx,
                  display_height_px: tool.args.displayHeightPx,
                  display_number: tool.args.displayNumber
                });
                break;
              case "anthropic.computer_20241022":
                betas.add("computer-use-2024-10-22");
                anthropicTools2.push({
                  name: tool.name,
                  type: "computer_20241022",
                  display_width_px: tool.args.displayWidthPx,
                  display_height_px: tool.args.displayHeightPx,
                  display_number: tool.args.displayNumber
                });
                break;
              case "anthropic.text_editor_20250124":
                betas.add("computer-use-2025-01-24");
                anthropicTools2.push({
                  name: tool.name,
                  type: "text_editor_20250124"
                });
                break;
              case "anthropic.text_editor_20241022":
                betas.add("computer-use-2024-10-22");
                anthropicTools2.push({
                  name: tool.name,
                  type: "text_editor_20241022"
                });
                break;
              case "anthropic.bash_20250124":
                betas.add("computer-use-2025-01-24");
                anthropicTools2.push({
                  name: tool.name,
                  type: "bash_20250124"
                });
                break;
              case "anthropic.bash_20241022":
                betas.add("computer-use-2024-10-22");
                anthropicTools2.push({
                  name: tool.name,
                  type: "bash_20241022"
                });
                break;
              default:
                toolWarnings.push({ type: "unsupported-tool", tool });
                break;
            }
            break;
          default:
            toolWarnings.push({ type: "unsupported-tool", tool });
            break;
        }
      }
      const toolChoice = mode.toolChoice;
      if (toolChoice == null) {
        return {
          tools: anthropicTools2,
          tool_choice: void 0,
          toolWarnings,
          betas
        };
      }
      const type = toolChoice.type;
      switch (type) {
        case "auto":
          return {
            tools: anthropicTools2,
            tool_choice: { type: "auto" },
            toolWarnings,
            betas
          };
        case "required":
          return {
            tools: anthropicTools2,
            tool_choice: { type: "any" },
            toolWarnings,
            betas
          };
        case "none":
          return { tools: void 0, tool_choice: void 0, toolWarnings, betas };
        case "tool":
          return {
            tools: anthropicTools2,
            tool_choice: { type: "tool", name: toolChoice.toolName },
            toolWarnings,
            betas
          };
        default: {
          const _exhaustiveCheck = type;
          throw new import_provider.UnsupportedFunctionalityError({
            functionality: `Unsupported tool choice type: ${_exhaustiveCheck}`
          });
        }
      }
    }
    var import_provider2 = require_dist();
    var import_provider_utils2 = require_dist3();
    function convertToAnthropicMessagesPrompt({
      prompt,
      sendReasoning,
      warnings
    }) {
      var _a, _b, _c, _d;
      const betas = /* @__PURE__ */ new Set();
      const blocks = groupIntoBlocks(prompt);
      let system = void 0;
      const messages = [];
      function getCacheControl(providerMetadata) {
        var _a2;
        const anthropic2 = providerMetadata == null ? void 0 : providerMetadata.anthropic;
        const cacheControlValue = (_a2 = anthropic2 == null ? void 0 : anthropic2.cacheControl) != null ? _a2 : anthropic2 == null ? void 0 : anthropic2.cache_control;
        return cacheControlValue;
      }
      for (let i = 0; i < blocks.length; i++) {
        const block = blocks[i];
        const isLastBlock = i === blocks.length - 1;
        const type = block.type;
        switch (type) {
          case "system": {
            if (system != null) {
              throw new import_provider2.UnsupportedFunctionalityError({
                functionality: "Multiple system messages that are separated by user/assistant messages"
              });
            }
            system = block.messages.map(({ content, providerMetadata }) => ({
              type: "text",
              text: content,
              cache_control: getCacheControl(providerMetadata)
            }));
            break;
          }
          case "user": {
            const anthropicContent = [];
            for (const message of block.messages) {
              const { role, content } = message;
              switch (role) {
                case "user": {
                  for (let j = 0; j < content.length; j++) {
                    const part = content[j];
                    const isLastPart = j === content.length - 1;
                    const cacheControl = (_a = getCacheControl(part.providerMetadata)) != null ? _a : isLastPart ? getCacheControl(message.providerMetadata) : void 0;
                    switch (part.type) {
                      case "text": {
                        anthropicContent.push({
                          type: "text",
                          text: part.text,
                          cache_control: cacheControl
                        });
                        break;
                      }
                      case "image": {
                        anthropicContent.push({
                          type: "image",
                          source: part.image instanceof URL ? {
                            type: "url",
                            url: part.image.toString()
                          } : {
                            type: "base64",
                            media_type: (_b = part.mimeType) != null ? _b : "image/jpeg",
                            data: (0, import_provider_utils2.convertUint8ArrayToBase64)(part.image)
                          },
                          cache_control: cacheControl
                        });
                        break;
                      }
                      case "file": {
                        if (part.data instanceof URL) {
                          throw new import_provider2.UnsupportedFunctionalityError({
                            functionality: "Image URLs in user messages"
                          });
                        }
                        if (part.mimeType !== "application/pdf") {
                          throw new import_provider2.UnsupportedFunctionalityError({
                            functionality: "Non-PDF files in user messages"
                          });
                        }
                        betas.add("pdfs-2024-09-25");
                        anthropicContent.push({
                          type: "document",
                          source: {
                            type: "base64",
                            media_type: "application/pdf",
                            data: part.data
                          },
                          cache_control: cacheControl
                        });
                        break;
                      }
                    }
                  }
                  break;
                }
                case "tool": {
                  for (let i2 = 0; i2 < content.length; i2++) {
                    const part = content[i2];
                    const isLastPart = i2 === content.length - 1;
                    const cacheControl = (_c = getCacheControl(part.providerMetadata)) != null ? _c : isLastPart ? getCacheControl(message.providerMetadata) : void 0;
                    const toolResultContent = part.content != null ? part.content.map((part2) => {
                      var _a2;
                      switch (part2.type) {
                        case "text":
                          return {
                            type: "text",
                            text: part2.text,
                            cache_control: void 0
                          };
                        case "image":
                          return {
                            type: "image",
                            source: {
                              type: "base64",
                              media_type: (_a2 = part2.mimeType) != null ? _a2 : "image/jpeg",
                              data: part2.data
                            },
                            cache_control: void 0
                          };
                      }
                    }) : JSON.stringify(part.result);
                    anthropicContent.push({
                      type: "tool_result",
                      tool_use_id: part.toolCallId,
                      content: toolResultContent,
                      is_error: part.isError,
                      cache_control: cacheControl
                    });
                  }
                  break;
                }
                default: {
                  const _exhaustiveCheck = role;
                  throw new Error(`Unsupported role: ${_exhaustiveCheck}`);
                }
              }
            }
            messages.push({ role: "user", content: anthropicContent });
            break;
          }
          case "assistant": {
            const anthropicContent = [];
            for (let j = 0; j < block.messages.length; j++) {
              const message = block.messages[j];
              const isLastMessage = j === block.messages.length - 1;
              const { content } = message;
              for (let k = 0; k < content.length; k++) {
                const part = content[k];
                const isLastContentPart = k === content.length - 1;
                const cacheControl = (_d = getCacheControl(part.providerMetadata)) != null ? _d : isLastContentPart ? getCacheControl(message.providerMetadata) : void 0;
                switch (part.type) {
                  case "text": {
                    anthropicContent.push({
                      type: "text",
                      text: (
                        // trim the last text part if it's the last message in the block
                        // because Anthropic does not allow trailing whitespace
                        // in pre-filled assistant responses
                        isLastBlock && isLastMessage && isLastContentPart ? part.text.trim() : part.text
                      ),
                      cache_control: cacheControl
                    });
                    break;
                  }
                  case "reasoning": {
                    if (sendReasoning) {
                      anthropicContent.push({
                        type: "thinking",
                        thinking: part.text,
                        signature: part.signature,
                        cache_control: cacheControl
                      });
                    } else {
                      warnings.push({
                        type: "other",
                        message: "sending reasoning content is disabled for this model"
                      });
                    }
                    break;
                  }
                  case "redacted-reasoning": {
                    anthropicContent.push({
                      type: "redacted_thinking",
                      data: part.data,
                      cache_control: cacheControl
                    });
                    break;
                  }
                  case "tool-call": {
                    anthropicContent.push({
                      type: "tool_use",
                      id: part.toolCallId,
                      name: part.toolName,
                      input: part.args,
                      cache_control: cacheControl
                    });
                    break;
                  }
                }
              }
            }
            messages.push({ role: "assistant", content: anthropicContent });
            break;
          }
          default: {
            const _exhaustiveCheck = type;
            throw new Error(`Unsupported type: ${_exhaustiveCheck}`);
          }
        }
      }
      return {
        prompt: { system, messages },
        betas
      };
    }
    function groupIntoBlocks(prompt) {
      const blocks = [];
      let currentBlock = void 0;
      for (const message of prompt) {
        const { role } = message;
        switch (role) {
          case "system": {
            if ((currentBlock == null ? void 0 : currentBlock.type) !== "system") {
              currentBlock = { type: "system", messages: [] };
              blocks.push(currentBlock);
            }
            currentBlock.messages.push(message);
            break;
          }
          case "assistant": {
            if ((currentBlock == null ? void 0 : currentBlock.type) !== "assistant") {
              currentBlock = { type: "assistant", messages: [] };
              blocks.push(currentBlock);
            }
            currentBlock.messages.push(message);
            break;
          }
          case "user": {
            if ((currentBlock == null ? void 0 : currentBlock.type) !== "user") {
              currentBlock = { type: "user", messages: [] };
              blocks.push(currentBlock);
            }
            currentBlock.messages.push(message);
            break;
          }
          case "tool": {
            if ((currentBlock == null ? void 0 : currentBlock.type) !== "user") {
              currentBlock = { type: "user", messages: [] };
              blocks.push(currentBlock);
            }
            currentBlock.messages.push(message);
            break;
          }
          default: {
            const _exhaustiveCheck = role;
            throw new Error(`Unsupported role: ${_exhaustiveCheck}`);
          }
        }
      }
      return blocks;
    }
    function mapAnthropicStopReason(finishReason) {
      switch (finishReason) {
        case "end_turn":
        case "stop_sequence":
          return "stop";
        case "tool_use":
          return "tool-calls";
        case "max_tokens":
          return "length";
        default:
          return "unknown";
      }
    }
    var AnthropicMessagesLanguageModel = class {
      constructor(modelId, settings, config) {
        this.specificationVersion = "v1";
        this.defaultObjectGenerationMode = "tool";
        this.supportsImageUrls = true;
        this.modelId = modelId;
        this.settings = settings;
        this.config = config;
      }
      get provider() {
        return this.config.provider;
      }
      async getArgs({
        mode,
        prompt,
        maxTokens = 4096,
        // 4096: max model output tokens TODO update default in v5
        temperature,
        topP,
        topK,
        frequencyPenalty,
        presencePenalty,
        stopSequences,
        responseFormat,
        seed,
        providerMetadata: providerOptions
      }) {
        var _a, _b, _c, _d;
        const type = mode.type;
        const warnings = [];
        if (frequencyPenalty != null) {
          warnings.push({
            type: "unsupported-setting",
            setting: "frequencyPenalty"
          });
        }
        if (presencePenalty != null) {
          warnings.push({
            type: "unsupported-setting",
            setting: "presencePenalty"
          });
        }
        if (seed != null) {
          warnings.push({
            type: "unsupported-setting",
            setting: "seed"
          });
        }
        if (responseFormat != null && responseFormat.type !== "text") {
          warnings.push({
            type: "unsupported-setting",
            setting: "responseFormat",
            details: "JSON response format is not supported."
          });
        }
        const { prompt: messagesPrompt, betas: messagesBetas } = convertToAnthropicMessagesPrompt({
          prompt,
          sendReasoning: (_a = this.settings.sendReasoning) != null ? _a : true,
          warnings
        });
        const thinkingOptions = thinkingOptionsSchema.safeParse(
          (_b = providerOptions == null ? void 0 : providerOptions.anthropic) == null ? void 0 : _b.thinking
        );
        if (!thinkingOptions.success) {
          throw new import_provider3.InvalidArgumentError({
            argument: "providerOptions.anthropic.thinking",
            message: "invalid thinking options",
            cause: thinkingOptions.error
          });
        }
        const isThinking = ((_c = thinkingOptions.data) == null ? void 0 : _c.type) === "enabled";
        const thinkingBudget = (_d = thinkingOptions.data) == null ? void 0 : _d.budgetTokens;
        const baseArgs = {
          // model id:
          model: this.modelId,
          // standardized settings:
          max_tokens: maxTokens,
          temperature,
          top_k: topK,
          top_p: topP,
          stop_sequences: stopSequences,
          // provider specific settings:
          ...isThinking && {
            thinking: { type: "enabled", budget_tokens: thinkingBudget }
          },
          // prompt:
          system: messagesPrompt.system,
          messages: messagesPrompt.messages
        };
        if (isThinking) {
          if (thinkingBudget == null) {
            throw new import_provider3.UnsupportedFunctionalityError({
              functionality: "thinking requires a budget"
            });
          }
          if (baseArgs.temperature != null) {
            baseArgs.temperature = void 0;
            warnings.push({
              type: "unsupported-setting",
              setting: "temperature",
              details: "temperature is not supported when thinking is enabled"
            });
          }
          if (topK != null) {
            baseArgs.top_k = void 0;
            warnings.push({
              type: "unsupported-setting",
              setting: "topK",
              details: "topK is not supported when thinking is enabled"
            });
          }
          if (topP != null) {
            baseArgs.top_p = void 0;
            warnings.push({
              type: "unsupported-setting",
              setting: "topP",
              details: "topP is not supported when thinking is enabled"
            });
          }
          baseArgs.max_tokens = maxTokens + thinkingBudget;
        }
        switch (type) {
          case "regular": {
            const {
              tools,
              tool_choice,
              toolWarnings,
              betas: toolsBetas
            } = prepareTools(mode);
            return {
              args: { ...baseArgs, tools, tool_choice },
              warnings: [...warnings, ...toolWarnings],
              betas: /* @__PURE__ */ new Set([...messagesBetas, ...toolsBetas])
            };
          }
          case "object-json": {
            throw new import_provider3.UnsupportedFunctionalityError({
              functionality: "json-mode object generation"
            });
          }
          case "object-tool": {
            const { name, description, parameters } = mode.tool;
            return {
              args: {
                ...baseArgs,
                tools: [{ name, description, input_schema: parameters }],
                tool_choice: { type: "tool", name }
              },
              warnings,
              betas: messagesBetas
            };
          }
          default: {
            const _exhaustiveCheck = type;
            throw new Error(`Unsupported type: ${_exhaustiveCheck}`);
          }
        }
      }
      async getHeaders({
        betas,
        headers
      }) {
        return (0, import_provider_utils3.combineHeaders)(
          await (0, import_provider_utils3.resolve)(this.config.headers),
          betas.size > 0 ? { "anthropic-beta": Array.from(betas).join(",") } : {},
          headers
        );
      }
      buildRequestUrl(isStreaming) {
        var _a, _b, _c;
        return (_c = (_b = (_a = this.config).buildRequestUrl) == null ? void 0 : _b.call(_a, this.config.baseURL, isStreaming)) != null ? _c : `${this.config.baseURL}/messages`;
      }
      transformRequestBody(args) {
        var _a, _b, _c;
        return (_c = (_b = (_a = this.config).transformRequestBody) == null ? void 0 : _b.call(_a, args)) != null ? _c : args;
      }
      async doGenerate(options) {
        var _a, _b, _c, _d;
        const { args, warnings, betas } = await this.getArgs(options);
        const {
          responseHeaders,
          value: response,
          rawValue: rawResponse
        } = await (0, import_provider_utils3.postJsonToApi)({
          url: this.buildRequestUrl(false),
          headers: await this.getHeaders({ betas, headers: options.headers }),
          body: this.transformRequestBody(args),
          failedResponseHandler: anthropicFailedResponseHandler,
          successfulResponseHandler: (0, import_provider_utils3.createJsonResponseHandler)(
            anthropicMessagesResponseSchema
          ),
          abortSignal: options.abortSignal,
          fetch: this.config.fetch
        });
        const { messages: rawPrompt, ...rawSettings } = args;
        let text = "";
        for (const content of response.content) {
          if (content.type === "text") {
            text += content.text;
          }
        }
        let toolCalls = void 0;
        if (response.content.some((content) => content.type === "tool_use")) {
          toolCalls = [];
          for (const content of response.content) {
            if (content.type === "tool_use") {
              toolCalls.push({
                toolCallType: "function",
                toolCallId: content.id,
                toolName: content.name,
                args: JSON.stringify(content.input)
              });
            }
          }
        }
        const reasoning = response.content.filter(
          (content) => content.type === "redacted_thinking" || content.type === "thinking"
        ).map(
          (content) => content.type === "thinking" ? {
            type: "text",
            text: content.thinking,
            signature: content.signature
          } : {
            type: "redacted",
            data: content.data
          }
        );
        return {
          text,
          reasoning: reasoning.length > 0 ? reasoning : void 0,
          toolCalls,
          finishReason: mapAnthropicStopReason(response.stop_reason),
          usage: {
            promptTokens: response.usage.input_tokens,
            completionTokens: response.usage.output_tokens
          },
          rawCall: { rawPrompt, rawSettings },
          rawResponse: {
            headers: responseHeaders,
            body: rawResponse
          },
          response: {
            id: (_a = response.id) != null ? _a : void 0,
            modelId: (_b = response.model) != null ? _b : void 0
          },
          warnings,
          providerMetadata: {
            anthropic: {
              cacheCreationInputTokens: (_c = response.usage.cache_creation_input_tokens) != null ? _c : null,
              cacheReadInputTokens: (_d = response.usage.cache_read_input_tokens) != null ? _d : null
            }
          },
          request: { body: JSON.stringify(args) }
        };
      }
      async doStream(options) {
        const { args, warnings, betas } = await this.getArgs(options);
        const body = { ...args, stream: true };
        const { responseHeaders, value: response } = await (0, import_provider_utils3.postJsonToApi)({
          url: this.buildRequestUrl(true),
          headers: await this.getHeaders({ betas, headers: options.headers }),
          body: this.transformRequestBody(body),
          failedResponseHandler: anthropicFailedResponseHandler,
          successfulResponseHandler: (0, import_provider_utils3.createEventSourceResponseHandler)(
            anthropicMessagesChunkSchema
          ),
          abortSignal: options.abortSignal,
          fetch: this.config.fetch
        });
        const { messages: rawPrompt, ...rawSettings } = args;
        let finishReason = "unknown";
        const usage = {
          promptTokens: Number.NaN,
          completionTokens: Number.NaN
        };
        const toolCallContentBlocks = {};
        let providerMetadata = void 0;
        let blockType = void 0;
        return {
          stream: response.pipeThrough(
            new TransformStream({
              transform(chunk, controller) {
                var _a, _b, _c, _d;
                if (!chunk.success) {
                  controller.enqueue({ type: "error", error: chunk.error });
                  return;
                }
                const value = chunk.value;
                switch (value.type) {
                  case "ping": {
                    return;
                  }
                  case "content_block_start": {
                    const contentBlockType = value.content_block.type;
                    blockType = contentBlockType;
                    switch (contentBlockType) {
                      case "text":
                      case "thinking": {
                        return;
                      }
                      case "redacted_thinking": {
                        controller.enqueue({
                          type: "redacted-reasoning",
                          data: value.content_block.data
                        });
                        return;
                      }
                      case "tool_use": {
                        toolCallContentBlocks[value.index] = {
                          toolCallId: value.content_block.id,
                          toolName: value.content_block.name,
                          jsonText: ""
                        };
                        return;
                      }
                      default: {
                        const _exhaustiveCheck = contentBlockType;
                        throw new Error(
                          `Unsupported content block type: ${_exhaustiveCheck}`
                        );
                      }
                    }
                  }
                  case "content_block_stop": {
                    if (toolCallContentBlocks[value.index] != null) {
                      const contentBlock = toolCallContentBlocks[value.index];
                      controller.enqueue({
                        type: "tool-call",
                        toolCallType: "function",
                        toolCallId: contentBlock.toolCallId,
                        toolName: contentBlock.toolName,
                        args: contentBlock.jsonText
                      });
                      delete toolCallContentBlocks[value.index];
                    }
                    blockType = void 0;
                    return;
                  }
                  case "content_block_delta": {
                    const deltaType = value.delta.type;
                    switch (deltaType) {
                      case "text_delta": {
                        controller.enqueue({
                          type: "text-delta",
                          textDelta: value.delta.text
                        });
                        return;
                      }
                      case "thinking_delta": {
                        controller.enqueue({
                          type: "reasoning",
                          textDelta: value.delta.thinking
                        });
                        return;
                      }
                      case "signature_delta": {
                        if (blockType === "thinking") {
                          controller.enqueue({
                            type: "reasoning-signature",
                            signature: value.delta.signature
                          });
                        }
                        return;
                      }
                      case "input_json_delta": {
                        const contentBlock = toolCallContentBlocks[value.index];
                        controller.enqueue({
                          type: "tool-call-delta",
                          toolCallType: "function",
                          toolCallId: contentBlock.toolCallId,
                          toolName: contentBlock.toolName,
                          argsTextDelta: value.delta.partial_json
                        });
                        contentBlock.jsonText += value.delta.partial_json;
                        return;
                      }
                      default: {
                        const _exhaustiveCheck = deltaType;
                        throw new Error(
                          `Unsupported delta type: ${_exhaustiveCheck}`
                        );
                      }
                    }
                  }
                  case "message_start": {
                    usage.promptTokens = value.message.usage.input_tokens;
                    usage.completionTokens = value.message.usage.output_tokens;
                    providerMetadata = {
                      anthropic: {
                        cacheCreationInputTokens: (_a = value.message.usage.cache_creation_input_tokens) != null ? _a : null,
                        cacheReadInputTokens: (_b = value.message.usage.cache_read_input_tokens) != null ? _b : null
                      }
                    };
                    controller.enqueue({
                      type: "response-metadata",
                      id: (_c = value.message.id) != null ? _c : void 0,
                      modelId: (_d = value.message.model) != null ? _d : void 0
                    });
                    return;
                  }
                  case "message_delta": {
                    usage.completionTokens = value.usage.output_tokens;
                    finishReason = mapAnthropicStopReason(value.delta.stop_reason);
                    return;
                  }
                  case "message_stop": {
                    controller.enqueue({
                      type: "finish",
                      finishReason,
                      usage,
                      providerMetadata
                    });
                    return;
                  }
                  case "error": {
                    controller.enqueue({ type: "error", error: value.error });
                    return;
                  }
                  default: {
                    const _exhaustiveCheck = value;
                    throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);
                  }
                }
              }
            })
          ),
          rawCall: { rawPrompt, rawSettings },
          rawResponse: { headers: responseHeaders },
          warnings,
          request: { body: JSON.stringify(body) }
        };
      }
    };
    var anthropicMessagesResponseSchema = import_zod2.z.object({
      type: import_zod2.z.literal("message"),
      id: import_zod2.z.string().nullish(),
      model: import_zod2.z.string().nullish(),
      content: import_zod2.z.array(
        import_zod2.z.discriminatedUnion("type", [
          import_zod2.z.object({
            type: import_zod2.z.literal("text"),
            text: import_zod2.z.string()
          }),
          import_zod2.z.object({
            type: import_zod2.z.literal("thinking"),
            thinking: import_zod2.z.string(),
            signature: import_zod2.z.string()
          }),
          import_zod2.z.object({
            type: import_zod2.z.literal("redacted_thinking"),
            data: import_zod2.z.string()
          }),
          import_zod2.z.object({
            type: import_zod2.z.literal("tool_use"),
            id: import_zod2.z.string(),
            name: import_zod2.z.string(),
            input: import_zod2.z.unknown()
          })
        ])
      ),
      stop_reason: import_zod2.z.string().nullish(),
      usage: import_zod2.z.object({
        input_tokens: import_zod2.z.number(),
        output_tokens: import_zod2.z.number(),
        cache_creation_input_tokens: import_zod2.z.number().nullish(),
        cache_read_input_tokens: import_zod2.z.number().nullish()
      })
    });
    var anthropicMessagesChunkSchema = import_zod2.z.discriminatedUnion("type", [
      import_zod2.z.object({
        type: import_zod2.z.literal("message_start"),
        message: import_zod2.z.object({
          id: import_zod2.z.string().nullish(),
          model: import_zod2.z.string().nullish(),
          usage: import_zod2.z.object({
            input_tokens: import_zod2.z.number(),
            output_tokens: import_zod2.z.number(),
            cache_creation_input_tokens: import_zod2.z.number().nullish(),
            cache_read_input_tokens: import_zod2.z.number().nullish()
          })
        })
      }),
      import_zod2.z.object({
        type: import_zod2.z.literal("content_block_start"),
        index: import_zod2.z.number(),
        content_block: import_zod2.z.discriminatedUnion("type", [
          import_zod2.z.object({
            type: import_zod2.z.literal("text"),
            text: import_zod2.z.string()
          }),
          import_zod2.z.object({
            type: import_zod2.z.literal("thinking"),
            thinking: import_zod2.z.string()
          }),
          import_zod2.z.object({
            type: import_zod2.z.literal("tool_use"),
            id: import_zod2.z.string(),
            name: import_zod2.z.string()
          }),
          import_zod2.z.object({
            type: import_zod2.z.literal("redacted_thinking"),
            data: import_zod2.z.string()
          })
        ])
      }),
      import_zod2.z.object({
        type: import_zod2.z.literal("content_block_delta"),
        index: import_zod2.z.number(),
        delta: import_zod2.z.discriminatedUnion("type", [
          import_zod2.z.object({
            type: import_zod2.z.literal("input_json_delta"),
            partial_json: import_zod2.z.string()
          }),
          import_zod2.z.object({
            type: import_zod2.z.literal("text_delta"),
            text: import_zod2.z.string()
          }),
          import_zod2.z.object({
            type: import_zod2.z.literal("thinking_delta"),
            thinking: import_zod2.z.string()
          }),
          import_zod2.z.object({
            type: import_zod2.z.literal("signature_delta"),
            signature: import_zod2.z.string()
          })
        ])
      }),
      import_zod2.z.object({
        type: import_zod2.z.literal("content_block_stop"),
        index: import_zod2.z.number()
      }),
      import_zod2.z.object({
        type: import_zod2.z.literal("error"),
        error: import_zod2.z.object({
          type: import_zod2.z.string(),
          message: import_zod2.z.string()
        })
      }),
      import_zod2.z.object({
        type: import_zod2.z.literal("message_delta"),
        delta: import_zod2.z.object({ stop_reason: import_zod2.z.string().nullish() }),
        usage: import_zod2.z.object({ output_tokens: import_zod2.z.number() })
      }),
      import_zod2.z.object({
        type: import_zod2.z.literal("message_stop")
      }),
      import_zod2.z.object({
        type: import_zod2.z.literal("ping")
      })
    ]);
    var thinkingOptionsSchema = import_zod2.z.object({
      type: import_zod2.z.union([import_zod2.z.literal("enabled"), import_zod2.z.literal("disabled")]),
      budgetTokens: import_zod2.z.number().optional()
    }).optional();
    var import_zod32 = require_lib();
    var Bash20241022Parameters = import_zod32.z.object({
      command: import_zod32.z.string(),
      restart: import_zod32.z.boolean().optional()
    });
    function bashTool_20241022(options = {}) {
      return {
        type: "provider-defined",
        id: "anthropic.bash_20241022",
        args: {},
        parameters: Bash20241022Parameters,
        execute: options.execute,
        experimental_toToolResultContent: options.experimental_toToolResultContent
      };
    }
    var Bash20250124Parameters = import_zod32.z.object({
      command: import_zod32.z.string(),
      restart: import_zod32.z.boolean().optional()
    });
    function bashTool_20250124(options = {}) {
      return {
        type: "provider-defined",
        id: "anthropic.bash_20250124",
        args: {},
        parameters: Bash20250124Parameters,
        execute: options.execute,
        experimental_toToolResultContent: options.experimental_toToolResultContent
      };
    }
    var TextEditor20241022Parameters = import_zod32.z.object({
      command: import_zod32.z.enum(["view", "create", "str_replace", "insert", "undo_edit"]),
      path: import_zod32.z.string(),
      file_text: import_zod32.z.string().optional(),
      insert_line: import_zod32.z.number().int().optional(),
      new_str: import_zod32.z.string().optional(),
      old_str: import_zod32.z.string().optional(),
      view_range: import_zod32.z.array(import_zod32.z.number().int()).optional()
    });
    function textEditorTool_20241022(options = {}) {
      return {
        type: "provider-defined",
        id: "anthropic.text_editor_20241022",
        args: {},
        parameters: TextEditor20241022Parameters,
        execute: options.execute,
        experimental_toToolResultContent: options.experimental_toToolResultContent
      };
    }
    var TextEditor20250124Parameters = import_zod32.z.object({
      command: import_zod32.z.enum(["view", "create", "str_replace", "insert", "undo_edit"]),
      path: import_zod32.z.string(),
      file_text: import_zod32.z.string().optional(),
      insert_line: import_zod32.z.number().int().optional(),
      new_str: import_zod32.z.string().optional(),
      old_str: import_zod32.z.string().optional(),
      view_range: import_zod32.z.array(import_zod32.z.number().int()).optional()
    });
    function textEditorTool_20250124(options = {}) {
      return {
        type: "provider-defined",
        id: "anthropic.text_editor_20250124",
        args: {},
        parameters: TextEditor20250124Parameters,
        execute: options.execute,
        experimental_toToolResultContent: options.experimental_toToolResultContent
      };
    }
    var Computer20241022Parameters = import_zod32.z.object({
      action: import_zod32.z.enum([
        "key",
        "type",
        "mouse_move",
        "left_click",
        "left_click_drag",
        "right_click",
        "middle_click",
        "double_click",
        "screenshot",
        "cursor_position"
      ]),
      coordinate: import_zod32.z.array(import_zod32.z.number().int()).optional(),
      text: import_zod32.z.string().optional()
    });
    function computerTool_20241022(options) {
      return {
        type: "provider-defined",
        id: "anthropic.computer_20241022",
        args: {
          displayWidthPx: options.displayWidthPx,
          displayHeightPx: options.displayHeightPx,
          displayNumber: options.displayNumber
        },
        parameters: Computer20241022Parameters,
        execute: options.execute,
        experimental_toToolResultContent: options.experimental_toToolResultContent
      };
    }
    var Computer20250124Parameters = import_zod32.z.object({
      action: import_zod32.z.enum([
        "key",
        "hold_key",
        "type",
        "cursor_position",
        "mouse_move",
        "left_mouse_down",
        "left_mouse_up",
        "left_click",
        "left_click_drag",
        "right_click",
        "middle_click",
        "double_click",
        "triple_click",
        "scroll",
        "wait",
        "screenshot"
      ]),
      coordinate: import_zod32.z.tuple([import_zod32.z.number().int(), import_zod32.z.number().int()]).optional(),
      duration: import_zod32.z.number().optional(),
      scroll_amount: import_zod32.z.number().optional(),
      scroll_direction: import_zod32.z.enum(["up", "down", "left", "right"]).optional(),
      start_coordinate: import_zod32.z.tuple([import_zod32.z.number().int(), import_zod32.z.number().int()]).optional(),
      text: import_zod32.z.string().optional()
    });
    function computerTool_20250124(options) {
      return {
        type: "provider-defined",
        id: "anthropic.computer_20250124",
        args: {
          displayWidthPx: options.displayWidthPx,
          displayHeightPx: options.displayHeightPx,
          displayNumber: options.displayNumber
        },
        parameters: Computer20250124Parameters,
        execute: options.execute,
        experimental_toToolResultContent: options.experimental_toToolResultContent
      };
    }
    var anthropicTools = {
      bash_20241022: bashTool_20241022,
      bash_20250124: bashTool_20250124,
      textEditor_20241022: textEditorTool_20241022,
      textEditor_20250124: textEditorTool_20250124,
      computer_20241022: computerTool_20241022,
      computer_20250124: computerTool_20250124
    };
    function createAnthropic(options = {}) {
      var _a;
      const baseURL = (_a = (0, import_provider_utils4.withoutTrailingSlash)(options.baseURL)) != null ? _a : "https://api.anthropic.com/v1";
      const getHeaders = () => ({
        "anthropic-version": "2023-06-01",
        "x-api-key": (0, import_provider_utils4.loadApiKey)({
          apiKey: options.apiKey,
          environmentVariableName: "ANTHROPIC_API_KEY",
          description: "Anthropic"
        }),
        ...options.headers
      });
      const createChatModel = (modelId, settings = {}) => new AnthropicMessagesLanguageModel(modelId, settings, {
        provider: "anthropic.messages",
        baseURL,
        headers: getHeaders,
        fetch: options.fetch
      });
      const provider = function(modelId, settings) {
        if (new.target) {
          throw new Error(
            "The Anthropic model function cannot be called with the new keyword."
          );
        }
        return createChatModel(modelId, settings);
      };
      provider.languageModel = createChatModel;
      provider.chat = createChatModel;
      provider.messages = createChatModel;
      provider.textEmbeddingModel = (modelId) => {
        throw new import_provider4.NoSuchModelError({ modelId, modelType: "textEmbeddingModel" });
      };
      provider.tools = anthropicTools;
      return provider;
    }
    var anthropic = createAnthropic();
  }
});

// node_modules/.pnpm/@ai-sdk+google@1.2.1_zod@3.24.2/node_modules/@ai-sdk/google/dist/index.js
var require_dist5 = __commonJS({
  "node_modules/.pnpm/@ai-sdk+google@1.2.1_zod@3.24.2/node_modules/@ai-sdk/google/dist/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      createGoogleGenerativeAI: () => createGoogleGenerativeAI,
      google: () => google
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_provider_utils5 = require_dist3();
    var import_provider_utils3 = require_dist3();
    var import_zod2 = require_lib();
    function convertJSONSchemaToOpenAPISchema(jsonSchema2) {
      if (isEmptyObjectSchema(jsonSchema2)) {
        return void 0;
      }
      if (typeof jsonSchema2 === "boolean") {
        return { type: "boolean", properties: {} };
      }
      const {
        type,
        description,
        required,
        properties,
        items,
        allOf,
        anyOf,
        oneOf,
        format,
        const: constValue,
        minLength,
        enum: enumValues
      } = jsonSchema2;
      const result = {};
      if (description)
        result.description = description;
      if (required)
        result.required = required;
      if (format)
        result.format = format;
      if (constValue !== void 0) {
        result.enum = [constValue];
      }
      if (type) {
        if (Array.isArray(type)) {
          if (type.includes("null")) {
            result.type = type.filter((t) => t !== "null")[0];
            result.nullable = true;
          } else {
            result.type = type;
          }
        } else if (type === "null") {
          result.type = "null";
        } else {
          result.type = type;
        }
      }
      if (enumValues !== void 0) {
        result.enum = enumValues;
      }
      if (properties != null) {
        result.properties = Object.entries(properties).reduce(
          (acc, [key, value]) => {
            acc[key] = convertJSONSchemaToOpenAPISchema(value);
            return acc;
          },
          {}
        );
      }
      if (items) {
        result.items = Array.isArray(items) ? items.map(convertJSONSchemaToOpenAPISchema) : convertJSONSchemaToOpenAPISchema(items);
      }
      if (allOf) {
        result.allOf = allOf.map(convertJSONSchemaToOpenAPISchema);
      }
      if (anyOf) {
        if (anyOf.some(
          (schema) => typeof schema === "object" && (schema == null ? void 0 : schema.type) === "null"
        )) {
          const nonNullSchemas = anyOf.filter(
            (schema) => !(typeof schema === "object" && (schema == null ? void 0 : schema.type) === "null")
          );
          if (nonNullSchemas.length === 1) {
            const converted = convertJSONSchemaToOpenAPISchema(nonNullSchemas[0]);
            if (typeof converted === "object") {
              result.nullable = true;
              Object.assign(result, converted);
            }
          } else {
            result.anyOf = nonNullSchemas.map(convertJSONSchemaToOpenAPISchema);
            result.nullable = true;
          }
        } else {
          result.anyOf = anyOf.map(convertJSONSchemaToOpenAPISchema);
        }
      }
      if (oneOf) {
        result.oneOf = oneOf.map(convertJSONSchemaToOpenAPISchema);
      }
      if (minLength !== void 0) {
        result.minLength = minLength;
      }
      return result;
    }
    function isEmptyObjectSchema(jsonSchema2) {
      return jsonSchema2 != null && typeof jsonSchema2 === "object" && jsonSchema2.type === "object" && (jsonSchema2.properties == null || Object.keys(jsonSchema2.properties).length === 0);
    }
    var import_provider = require_dist();
    var import_provider_utils = require_dist3();
    function convertToGoogleGenerativeAIMessages(prompt) {
      var _a, _b;
      const systemInstructionParts = [];
      const contents = [];
      let systemMessagesAllowed = true;
      for (const { role, content } of prompt) {
        switch (role) {
          case "system": {
            if (!systemMessagesAllowed) {
              throw new import_provider.UnsupportedFunctionalityError({
                functionality: "system messages are only supported at the beginning of the conversation"
              });
            }
            systemInstructionParts.push({ text: content });
            break;
          }
          case "user": {
            systemMessagesAllowed = false;
            const parts = [];
            for (const part of content) {
              switch (part.type) {
                case "text": {
                  parts.push({ text: part.text });
                  break;
                }
                case "image": {
                  parts.push(
                    part.image instanceof URL ? {
                      fileData: {
                        mimeType: (_a = part.mimeType) != null ? _a : "image/jpeg",
                        fileUri: part.image.toString()
                      }
                    } : {
                      inlineData: {
                        mimeType: (_b = part.mimeType) != null ? _b : "image/jpeg",
                        data: (0, import_provider_utils.convertUint8ArrayToBase64)(part.image)
                      }
                    }
                  );
                  break;
                }
                case "file": {
                  parts.push(
                    part.data instanceof URL ? {
                      fileData: {
                        mimeType: part.mimeType,
                        fileUri: part.data.toString()
                      }
                    } : {
                      inlineData: {
                        mimeType: part.mimeType,
                        data: part.data
                      }
                    }
                  );
                  break;
                }
              }
            }
            contents.push({ role: "user", parts });
            break;
          }
          case "assistant": {
            systemMessagesAllowed = false;
            contents.push({
              role: "model",
              parts: content.map((part) => {
                switch (part.type) {
                  case "text": {
                    return part.text.length === 0 ? void 0 : { text: part.text };
                  }
                  case "file": {
                    if (part.mimeType !== "image/png") {
                      throw new import_provider.UnsupportedFunctionalityError({
                        functionality: "Only PNG images are supported in assistant messages"
                      });
                    }
                    if (part.data instanceof URL) {
                      throw new import_provider.UnsupportedFunctionalityError({
                        functionality: "File data URLs in assistant messages are not supported"
                      });
                    }
                    return {
                      inlineData: {
                        mimeType: part.mimeType,
                        data: part.data
                      }
                    };
                  }
                  case "tool-call": {
                    return {
                      functionCall: {
                        name: part.toolName,
                        args: part.args
                      }
                    };
                  }
                }
              }).filter((part) => part !== void 0)
            });
            break;
          }
          case "tool": {
            systemMessagesAllowed = false;
            contents.push({
              role: "user",
              parts: content.map((part) => ({
                functionResponse: {
                  name: part.toolName,
                  response: {
                    name: part.toolName,
                    content: part.result
                  }
                }
              }))
            });
            break;
          }
        }
      }
      return {
        systemInstruction: systemInstructionParts.length > 0 ? { parts: systemInstructionParts } : void 0,
        contents
      };
    }
    function getModelPath(modelId) {
      return modelId.includes("/") ? modelId : `models/${modelId}`;
    }
    var import_provider_utils2 = require_dist3();
    var import_zod3 = require_lib();
    var googleErrorDataSchema = import_zod3.z.object({
      error: import_zod3.z.object({
        code: import_zod3.z.number().nullable(),
        message: import_zod3.z.string(),
        status: import_zod3.z.string()
      })
    });
    var googleFailedResponseHandler = (0, import_provider_utils2.createJsonErrorResponseHandler)({
      errorSchema: googleErrorDataSchema,
      errorToMessage: (data) => data.error.message
    });
    var import_provider2 = require_dist();
    function prepareTools(mode, useSearchGrounding, dynamicRetrievalConfig, modelId) {
      var _a, _b;
      const tools = ((_a = mode.tools) == null ? void 0 : _a.length) ? mode.tools : void 0;
      const toolWarnings = [];
      const isGemini2 = modelId.includes("gemini-2");
      const supportsDynamicRetrieval = modelId.includes("gemini-1.5-flash") && !modelId.includes("-8b");
      if (useSearchGrounding) {
        return {
          tools: isGemini2 ? { googleSearch: {} } : {
            googleSearchRetrieval: !supportsDynamicRetrieval || !dynamicRetrievalConfig ? {} : { dynamicRetrievalConfig }
          },
          toolConfig: void 0,
          toolWarnings
        };
      }
      if (tools == null) {
        return { tools: void 0, toolConfig: void 0, toolWarnings };
      }
      const functionDeclarations = [];
      for (const tool of tools) {
        if (tool.type === "provider-defined") {
          toolWarnings.push({ type: "unsupported-tool", tool });
        } else {
          functionDeclarations.push({
            name: tool.name,
            description: (_b = tool.description) != null ? _b : "",
            parameters: convertJSONSchemaToOpenAPISchema(tool.parameters)
          });
        }
      }
      const toolChoice = mode.toolChoice;
      if (toolChoice == null) {
        return {
          tools: { functionDeclarations },
          toolConfig: void 0,
          toolWarnings
        };
      }
      const type = toolChoice.type;
      switch (type) {
        case "auto":
          return {
            tools: { functionDeclarations },
            toolConfig: { functionCallingConfig: { mode: "AUTO" } },
            toolWarnings
          };
        case "none":
          return {
            tools: { functionDeclarations },
            toolConfig: { functionCallingConfig: { mode: "NONE" } },
            toolWarnings
          };
        case "required":
          return {
            tools: { functionDeclarations },
            toolConfig: { functionCallingConfig: { mode: "ANY" } },
            toolWarnings
          };
        case "tool":
          return {
            tools: { functionDeclarations },
            toolConfig: {
              functionCallingConfig: {
                mode: "ANY",
                allowedFunctionNames: [toolChoice.toolName]
              }
            },
            toolWarnings
          };
        default: {
          const _exhaustiveCheck = type;
          throw new import_provider2.UnsupportedFunctionalityError({
            functionality: `Unsupported tool choice type: ${_exhaustiveCheck}`
          });
        }
      }
    }
    function mapGoogleGenerativeAIFinishReason({
      finishReason,
      hasToolCalls
    }) {
      switch (finishReason) {
        case "STOP":
          return hasToolCalls ? "tool-calls" : "stop";
        case "MAX_TOKENS":
          return "length";
        case "IMAGE_SAFETY":
        case "RECITATION":
        case "SAFETY":
        case "BLOCKLIST":
        case "PROHIBITED_CONTENT":
        case "SPII":
          return "content-filter";
        case "FINISH_REASON_UNSPECIFIED":
        case "OTHER":
          return "other";
        case "MALFORMED_FUNCTION_CALL":
          return "error";
        default:
          return "unknown";
      }
    }
    var GoogleGenerativeAILanguageModel = class {
      constructor(modelId, settings, config) {
        this.specificationVersion = "v1";
        this.defaultObjectGenerationMode = "json";
        this.supportsImageUrls = false;
        this.modelId = modelId;
        this.settings = settings;
        this.config = config;
      }
      get supportsStructuredOutputs() {
        var _a;
        return (_a = this.settings.structuredOutputs) != null ? _a : true;
      }
      get provider() {
        return this.config.provider;
      }
      async getArgs({
        mode,
        prompt,
        maxTokens,
        temperature,
        topP,
        topK,
        frequencyPenalty,
        presencePenalty,
        stopSequences,
        responseFormat,
        seed,
        providerMetadata
      }) {
        var _a, _b;
        const type = mode.type;
        const warnings = [];
        const googleOptions = (0, import_provider_utils3.parseProviderOptions)({
          provider: "google",
          providerOptions: providerMetadata,
          schema: import_zod2.z.object({
            responseModalities: import_zod2.z.array(import_zod2.z.enum(["TEXT", "IMAGE"])).nullish()
          })
        });
        const generationConfig = {
          // standardized settings:
          maxOutputTokens: maxTokens,
          temperature,
          topK,
          topP,
          frequencyPenalty,
          presencePenalty,
          stopSequences,
          seed,
          // response format:
          responseMimeType: (responseFormat == null ? void 0 : responseFormat.type) === "json" ? "application/json" : void 0,
          responseSchema: (responseFormat == null ? void 0 : responseFormat.type) === "json" && responseFormat.schema != null && // Google GenAI does not support all OpenAPI Schema features,
          // so this is needed as an escape hatch:
          this.supportsStructuredOutputs ? convertJSONSchemaToOpenAPISchema(responseFormat.schema) : void 0,
          ...this.settings.audioTimestamp && {
            audioTimestamp: this.settings.audioTimestamp
          },
          // provider options:
          responseModalities: googleOptions == null ? void 0 : googleOptions.responseModalities
        };
        const { contents, systemInstruction } = convertToGoogleGenerativeAIMessages(prompt);
        switch (type) {
          case "regular": {
            const { tools, toolConfig, toolWarnings } = prepareTools(
              mode,
              (_a = this.settings.useSearchGrounding) != null ? _a : false,
              this.settings.dynamicRetrievalConfig,
              this.modelId
            );
            return {
              args: {
                generationConfig,
                contents,
                systemInstruction,
                safetySettings: this.settings.safetySettings,
                tools,
                toolConfig,
                cachedContent: this.settings.cachedContent
              },
              warnings: [...warnings, ...toolWarnings]
            };
          }
          case "object-json": {
            return {
              args: {
                generationConfig: {
                  ...generationConfig,
                  responseMimeType: "application/json",
                  responseSchema: mode.schema != null && // Google GenAI does not support all OpenAPI Schema features,
                  // so this is needed as an escape hatch:
                  this.supportsStructuredOutputs ? convertJSONSchemaToOpenAPISchema(mode.schema) : void 0
                },
                contents,
                systemInstruction,
                safetySettings: this.settings.safetySettings,
                cachedContent: this.settings.cachedContent
              },
              warnings
            };
          }
          case "object-tool": {
            return {
              args: {
                generationConfig,
                contents,
                tools: {
                  functionDeclarations: [
                    {
                      name: mode.tool.name,
                      description: (_b = mode.tool.description) != null ? _b : "",
                      parameters: convertJSONSchemaToOpenAPISchema(
                        mode.tool.parameters
                      )
                    }
                  ]
                },
                toolConfig: { functionCallingConfig: { mode: "ANY" } },
                safetySettings: this.settings.safetySettings,
                cachedContent: this.settings.cachedContent
              },
              warnings
            };
          }
          default: {
            const _exhaustiveCheck = type;
            throw new Error(`Unsupported type: ${_exhaustiveCheck}`);
          }
        }
      }
      supportsUrl(url) {
        return this.config.isSupportedUrl(url);
      }
      async doGenerate(options) {
        var _a, _b, _c, _d, _e;
        const { args, warnings } = await this.getArgs(options);
        const body = JSON.stringify(args);
        const mergedHeaders = (0, import_provider_utils3.combineHeaders)(
          await (0, import_provider_utils3.resolve)(this.config.headers),
          options.headers
        );
        const {
          responseHeaders,
          value: response,
          rawValue: rawResponse
        } = await (0, import_provider_utils3.postJsonToApi)({
          url: `${this.config.baseURL}/${getModelPath(
            this.modelId
          )}:generateContent`,
          headers: mergedHeaders,
          body: args,
          failedResponseHandler: googleFailedResponseHandler,
          successfulResponseHandler: (0, import_provider_utils3.createJsonResponseHandler)(responseSchema),
          abortSignal: options.abortSignal,
          fetch: this.config.fetch
        });
        const { contents: rawPrompt, ...rawSettings } = args;
        const candidate = response.candidates[0];
        const parts = candidate.content == null || typeof candidate.content !== "object" || !("parts" in candidate.content) ? [] : candidate.content.parts;
        const toolCalls = getToolCallsFromParts({
          parts,
          generateId: this.config.generateId
        });
        const usageMetadata = response.usageMetadata;
        return {
          text: getTextFromParts(parts),
          files: (_a = getInlineDataParts(parts)) == null ? void 0 : _a.map((part) => ({
            data: part.inlineData.data,
            mimeType: part.inlineData.mimeType
          })),
          toolCalls,
          finishReason: mapGoogleGenerativeAIFinishReason({
            finishReason: candidate.finishReason,
            hasToolCalls: toolCalls != null && toolCalls.length > 0
          }),
          usage: {
            promptTokens: (_b = usageMetadata == null ? void 0 : usageMetadata.promptTokenCount) != null ? _b : NaN,
            completionTokens: (_c = usageMetadata == null ? void 0 : usageMetadata.candidatesTokenCount) != null ? _c : NaN
          },
          rawCall: { rawPrompt, rawSettings },
          rawResponse: { headers: responseHeaders, body: rawResponse },
          warnings,
          providerMetadata: {
            google: {
              groundingMetadata: (_d = candidate.groundingMetadata) != null ? _d : null,
              safetyRatings: (_e = candidate.safetyRatings) != null ? _e : null
            }
          },
          sources: extractSources({
            groundingMetadata: candidate.groundingMetadata,
            generateId: this.config.generateId
          }),
          request: { body }
        };
      }
      async doStream(options) {
        const { args, warnings } = await this.getArgs(options);
        const body = JSON.stringify(args);
        const headers = (0, import_provider_utils3.combineHeaders)(
          await (0, import_provider_utils3.resolve)(this.config.headers),
          options.headers
        );
        const { responseHeaders, value: response } = await (0, import_provider_utils3.postJsonToApi)({
          url: `${this.config.baseURL}/${getModelPath(
            this.modelId
          )}:streamGenerateContent?alt=sse`,
          headers,
          body: args,
          failedResponseHandler: googleFailedResponseHandler,
          successfulResponseHandler: (0, import_provider_utils3.createEventSourceResponseHandler)(chunkSchema),
          abortSignal: options.abortSignal,
          fetch: this.config.fetch
        });
        const { contents: rawPrompt, ...rawSettings } = args;
        let finishReason = "unknown";
        let usage = {
          promptTokens: Number.NaN,
          completionTokens: Number.NaN
        };
        let providerMetadata = void 0;
        const generateId2 = this.config.generateId;
        let hasToolCalls = false;
        return {
          stream: response.pipeThrough(
            new TransformStream({
              transform(chunk, controller) {
                var _a, _b, _c, _d, _e, _f;
                if (!chunk.success) {
                  controller.enqueue({ type: "error", error: chunk.error });
                  return;
                }
                const value = chunk.value;
                const usageMetadata = value.usageMetadata;
                if (usageMetadata != null) {
                  usage = {
                    promptTokens: (_a = usageMetadata.promptTokenCount) != null ? _a : NaN,
                    completionTokens: (_b = usageMetadata.candidatesTokenCount) != null ? _b : NaN
                  };
                }
                const candidate = (_c = value.candidates) == null ? void 0 : _c[0];
                if (candidate == null) {
                  return;
                }
                const content = candidate.content;
                if (content != null) {
                  const deltaText = getTextFromParts(content.parts);
                  if (deltaText != null) {
                    controller.enqueue({
                      type: "text-delta",
                      textDelta: deltaText
                    });
                  }
                  const inlineDataParts = getInlineDataParts(content.parts);
                  if (inlineDataParts != null) {
                    for (const part of inlineDataParts) {
                      controller.enqueue({
                        type: "file",
                        mimeType: part.inlineData.mimeType,
                        data: part.inlineData.data
                      });
                    }
                  }
                  const toolCallDeltas = getToolCallsFromParts({
                    parts: content.parts,
                    generateId: generateId2
                  });
                  if (toolCallDeltas != null) {
                    for (const toolCall of toolCallDeltas) {
                      controller.enqueue({
                        type: "tool-call-delta",
                        toolCallType: "function",
                        toolCallId: toolCall.toolCallId,
                        toolName: toolCall.toolName,
                        argsTextDelta: toolCall.args
                      });
                      controller.enqueue({
                        type: "tool-call",
                        toolCallType: "function",
                        toolCallId: toolCall.toolCallId,
                        toolName: toolCall.toolName,
                        args: toolCall.args
                      });
                      hasToolCalls = true;
                    }
                  }
                }
                if (candidate.finishReason != null) {
                  finishReason = mapGoogleGenerativeAIFinishReason({
                    finishReason: candidate.finishReason,
                    hasToolCalls
                  });
                  const sources = (_d = extractSources({
                    groundingMetadata: candidate.groundingMetadata,
                    generateId: generateId2
                  })) != null ? _d : [];
                  for (const source of sources) {
                    controller.enqueue({ type: "source", source });
                  }
                  providerMetadata = {
                    google: {
                      groundingMetadata: (_e = candidate.groundingMetadata) != null ? _e : null,
                      safetyRatings: (_f = candidate.safetyRatings) != null ? _f : null
                    }
                  };
                }
              },
              flush(controller) {
                controller.enqueue({
                  type: "finish",
                  finishReason,
                  usage,
                  providerMetadata
                });
              }
            })
          ),
          rawCall: { rawPrompt, rawSettings },
          rawResponse: { headers: responseHeaders },
          warnings,
          request: { body }
        };
      }
    };
    function getToolCallsFromParts({
      parts,
      generateId: generateId2
    }) {
      const functionCallParts = parts == null ? void 0 : parts.filter(
        (part) => "functionCall" in part
      );
      return functionCallParts == null || functionCallParts.length === 0 ? void 0 : functionCallParts.map((part) => ({
        toolCallType: "function",
        toolCallId: generateId2(),
        toolName: part.functionCall.name,
        args: JSON.stringify(part.functionCall.args)
      }));
    }
    function getTextFromParts(parts) {
      const textParts = parts == null ? void 0 : parts.filter((part) => "text" in part);
      return textParts == null || textParts.length === 0 ? void 0 : textParts.map((part) => part.text).join("");
    }
    function getInlineDataParts(parts) {
      return parts == null ? void 0 : parts.filter(
        (part) => "inlineData" in part
      );
    }
    function extractSources({
      groundingMetadata,
      generateId: generateId2
    }) {
      var _a;
      return (_a = groundingMetadata == null ? void 0 : groundingMetadata.groundingChunks) == null ? void 0 : _a.filter(
        (chunk) => chunk.web != null
      ).map((chunk) => ({
        sourceType: "url",
        id: generateId2(),
        url: chunk.web.uri,
        title: chunk.web.title
      }));
    }
    var contentSchema = import_zod2.z.object({
      role: import_zod2.z.string(),
      parts: import_zod2.z.array(
        import_zod2.z.union([
          import_zod2.z.object({
            text: import_zod2.z.string()
          }),
          import_zod2.z.object({
            functionCall: import_zod2.z.object({
              name: import_zod2.z.string(),
              args: import_zod2.z.unknown()
            })
          }),
          import_zod2.z.object({
            inlineData: import_zod2.z.object({
              mimeType: import_zod2.z.string(),
              data: import_zod2.z.string()
            })
          })
        ])
      ).nullish()
    });
    var groundingChunkSchema = import_zod2.z.object({
      web: import_zod2.z.object({ uri: import_zod2.z.string(), title: import_zod2.z.string() }).nullish(),
      retrievedContext: import_zod2.z.object({ uri: import_zod2.z.string(), title: import_zod2.z.string() }).nullish()
    });
    var groundingMetadataSchema = import_zod2.z.object({
      webSearchQueries: import_zod2.z.array(import_zod2.z.string()).nullish(),
      retrievalQueries: import_zod2.z.array(import_zod2.z.string()).nullish(),
      searchEntryPoint: import_zod2.z.object({ renderedContent: import_zod2.z.string() }).nullish(),
      groundingChunks: import_zod2.z.array(groundingChunkSchema).nullish(),
      groundingSupports: import_zod2.z.array(
        import_zod2.z.object({
          segment: import_zod2.z.object({
            startIndex: import_zod2.z.number().nullish(),
            endIndex: import_zod2.z.number().nullish(),
            text: import_zod2.z.string().nullish()
          }),
          segment_text: import_zod2.z.string().nullish(),
          groundingChunkIndices: import_zod2.z.array(import_zod2.z.number()).nullish(),
          supportChunkIndices: import_zod2.z.array(import_zod2.z.number()).nullish(),
          confidenceScores: import_zod2.z.array(import_zod2.z.number()).nullish(),
          confidenceScore: import_zod2.z.array(import_zod2.z.number()).nullish()
        })
      ).nullish(),
      retrievalMetadata: import_zod2.z.union([
        import_zod2.z.object({
          webDynamicRetrievalScore: import_zod2.z.number()
        }),
        import_zod2.z.object({})
      ]).nullish()
    });
    var safetyRatingSchema = import_zod2.z.object({
      category: import_zod2.z.string(),
      probability: import_zod2.z.string(),
      probabilityScore: import_zod2.z.number().nullish(),
      severity: import_zod2.z.string().nullish(),
      severityScore: import_zod2.z.number().nullish(),
      blocked: import_zod2.z.boolean().nullish()
    });
    var responseSchema = import_zod2.z.object({
      candidates: import_zod2.z.array(
        import_zod2.z.object({
          content: contentSchema.nullish().or(import_zod2.z.object({}).strict()),
          finishReason: import_zod2.z.string().nullish(),
          safetyRatings: import_zod2.z.array(safetyRatingSchema).nullish(),
          groundingMetadata: groundingMetadataSchema.nullish()
        })
      ),
      usageMetadata: import_zod2.z.object({
        promptTokenCount: import_zod2.z.number().nullish(),
        candidatesTokenCount: import_zod2.z.number().nullish(),
        totalTokenCount: import_zod2.z.number().nullish()
      }).nullish()
    });
    var chunkSchema = import_zod2.z.object({
      candidates: import_zod2.z.array(
        import_zod2.z.object({
          content: contentSchema.nullish(),
          finishReason: import_zod2.z.string().nullish(),
          safetyRatings: import_zod2.z.array(safetyRatingSchema).nullish(),
          groundingMetadata: groundingMetadataSchema.nullish()
        })
      ).nullish(),
      usageMetadata: import_zod2.z.object({
        promptTokenCount: import_zod2.z.number().nullish(),
        candidatesTokenCount: import_zod2.z.number().nullish(),
        totalTokenCount: import_zod2.z.number().nullish()
      }).nullish()
    });
    var import_provider3 = require_dist();
    var import_provider_utils4 = require_dist3();
    var import_zod32 = require_lib();
    var GoogleGenerativeAIEmbeddingModel = class {
      constructor(modelId, settings, config) {
        this.specificationVersion = "v1";
        this.modelId = modelId;
        this.settings = settings;
        this.config = config;
      }
      get provider() {
        return this.config.provider;
      }
      get maxEmbeddingsPerCall() {
        return 2048;
      }
      get supportsParallelCalls() {
        return true;
      }
      async doEmbed({
        values,
        headers,
        abortSignal
      }) {
        if (values.length > this.maxEmbeddingsPerCall) {
          throw new import_provider3.TooManyEmbeddingValuesForCallError({
            provider: this.provider,
            modelId: this.modelId,
            maxEmbeddingsPerCall: this.maxEmbeddingsPerCall,
            values
          });
        }
        const mergedHeaders = (0, import_provider_utils4.combineHeaders)(
          await (0, import_provider_utils4.resolve)(this.config.headers),
          headers
        );
        const { responseHeaders, value: response } = await (0, import_provider_utils4.postJsonToApi)({
          url: `${this.config.baseURL}/models/${this.modelId}:batchEmbedContents`,
          headers: mergedHeaders,
          body: {
            requests: values.map((value) => ({
              model: `models/${this.modelId}`,
              content: { role: "user", parts: [{ text: value }] },
              outputDimensionality: this.settings.outputDimensionality
            }))
          },
          failedResponseHandler: googleFailedResponseHandler,
          successfulResponseHandler: (0, import_provider_utils4.createJsonResponseHandler)(
            googleGenerativeAITextEmbeddingResponseSchema
          ),
          abortSignal,
          fetch: this.config.fetch
        });
        return {
          embeddings: response.embeddings.map((item) => item.values),
          usage: void 0,
          rawResponse: { headers: responseHeaders }
        };
      }
    };
    var googleGenerativeAITextEmbeddingResponseSchema = import_zod32.z.object({
      embeddings: import_zod32.z.array(import_zod32.z.object({ values: import_zod32.z.array(import_zod32.z.number()) }))
    });
    function isSupportedFileUrl(url) {
      return url.toString().startsWith("https://generativelanguage.googleapis.com/v1beta/files/");
    }
    function createGoogleGenerativeAI(options = {}) {
      var _a;
      const baseURL = (_a = (0, import_provider_utils5.withoutTrailingSlash)(options.baseURL)) != null ? _a : "https://generativelanguage.googleapis.com/v1beta";
      const getHeaders = () => ({
        "x-goog-api-key": (0, import_provider_utils5.loadApiKey)({
          apiKey: options.apiKey,
          environmentVariableName: "GOOGLE_GENERATIVE_AI_API_KEY",
          description: "Google Generative AI"
        }),
        ...options.headers
      });
      const createChatModel = (modelId, settings = {}) => {
        var _a2;
        return new GoogleGenerativeAILanguageModel(modelId, settings, {
          provider: "google.generative-ai",
          baseURL,
          headers: getHeaders,
          generateId: (_a2 = options.generateId) != null ? _a2 : import_provider_utils5.generateId,
          isSupportedUrl: isSupportedFileUrl,
          fetch: options.fetch
        });
      };
      const createEmbeddingModel = (modelId, settings = {}) => new GoogleGenerativeAIEmbeddingModel(modelId, settings, {
        provider: "google.generative-ai",
        baseURL,
        headers: getHeaders,
        fetch: options.fetch
      });
      const provider = function(modelId, settings) {
        if (new.target) {
          throw new Error(
            "The Google Generative AI model function cannot be called with the new keyword."
          );
        }
        return createChatModel(modelId, settings);
      };
      provider.languageModel = createChatModel;
      provider.chat = createChatModel;
      provider.generativeAI = createChatModel;
      provider.embedding = createEmbeddingModel;
      provider.textEmbedding = createEmbeddingModel;
      provider.textEmbeddingModel = createEmbeddingModel;
      return provider;
    }
    var google = createGoogleGenerativeAI();
  }
});

// node_modules/.pnpm/@ai-sdk+openai@1.3.0_zod@3.24.2/node_modules/@ai-sdk/openai/dist/index.js
var require_dist6 = __commonJS({
  "node_modules/.pnpm/@ai-sdk+openai@1.3.0_zod@3.24.2/node_modules/@ai-sdk/openai/dist/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      createOpenAI: () => createOpenAI,
      openai: () => openai
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_provider_utils9 = require_dist3();
    var import_provider3 = require_dist();
    var import_provider_utils3 = require_dist3();
    var import_zod2 = require_lib();
    var import_provider = require_dist();
    var import_provider_utils = require_dist3();
    function convertToOpenAIChatMessages({
      prompt,
      useLegacyFunctionCalling = false,
      systemMessageMode = "system"
    }) {
      const messages = [];
      const warnings = [];
      for (const { role, content } of prompt) {
        switch (role) {
          case "system": {
            switch (systemMessageMode) {
              case "system": {
                messages.push({ role: "system", content });
                break;
              }
              case "developer": {
                messages.push({ role: "developer", content });
                break;
              }
              case "remove": {
                warnings.push({
                  type: "other",
                  message: "system messages are removed for this model"
                });
                break;
              }
              default: {
                const _exhaustiveCheck = systemMessageMode;
                throw new Error(
                  `Unsupported system message mode: ${_exhaustiveCheck}`
                );
              }
            }
            break;
          }
          case "user": {
            if (content.length === 1 && content[0].type === "text") {
              messages.push({ role: "user", content: content[0].text });
              break;
            }
            messages.push({
              role: "user",
              content: content.map((part, index) => {
                var _a, _b, _c, _d;
                switch (part.type) {
                  case "text": {
                    return { type: "text", text: part.text };
                  }
                  case "image": {
                    return {
                      type: "image_url",
                      image_url: {
                        url: part.image instanceof URL ? part.image.toString() : `data:${(_a = part.mimeType) != null ? _a : "image/jpeg"};base64,${(0, import_provider_utils.convertUint8ArrayToBase64)(part.image)}`,
                        // OpenAI specific extension: image detail
                        detail: (_c = (_b = part.providerMetadata) == null ? void 0 : _b.openai) == null ? void 0 : _c.imageDetail
                      }
                    };
                  }
                  case "file": {
                    if (part.data instanceof URL) {
                      throw new import_provider.UnsupportedFunctionalityError({
                        functionality: "'File content parts with URL data' functionality not supported."
                      });
                    }
                    switch (part.mimeType) {
                      case "audio/wav": {
                        return {
                          type: "input_audio",
                          input_audio: { data: part.data, format: "wav" }
                        };
                      }
                      case "audio/mp3":
                      case "audio/mpeg": {
                        return {
                          type: "input_audio",
                          input_audio: { data: part.data, format: "mp3" }
                        };
                      }
                      case "application/pdf": {
                        return {
                          type: "file",
                          file: {
                            filename: (_d = part.filename) != null ? _d : `part-${index}.pdf`,
                            file_data: `data:application/pdf;base64,${part.data}`
                          }
                        };
                      }
                      default: {
                        throw new import_provider.UnsupportedFunctionalityError({
                          functionality: `File content part type ${part.mimeType} in user messages`
                        });
                      }
                    }
                  }
                }
              })
            });
            break;
          }
          case "assistant": {
            let text = "";
            const toolCalls = [];
            for (const part of content) {
              switch (part.type) {
                case "text": {
                  text += part.text;
                  break;
                }
                case "tool-call": {
                  toolCalls.push({
                    id: part.toolCallId,
                    type: "function",
                    function: {
                      name: part.toolName,
                      arguments: JSON.stringify(part.args)
                    }
                  });
                  break;
                }
              }
            }
            if (useLegacyFunctionCalling) {
              if (toolCalls.length > 1) {
                throw new import_provider.UnsupportedFunctionalityError({
                  functionality: "useLegacyFunctionCalling with multiple tool calls in one message"
                });
              }
              messages.push({
                role: "assistant",
                content: text,
                function_call: toolCalls.length > 0 ? toolCalls[0].function : void 0
              });
            } else {
              messages.push({
                role: "assistant",
                content: text,
                tool_calls: toolCalls.length > 0 ? toolCalls : void 0
              });
            }
            break;
          }
          case "tool": {
            for (const toolResponse of content) {
              if (useLegacyFunctionCalling) {
                messages.push({
                  role: "function",
                  name: toolResponse.toolName,
                  content: JSON.stringify(toolResponse.result)
                });
              } else {
                messages.push({
                  role: "tool",
                  tool_call_id: toolResponse.toolCallId,
                  content: JSON.stringify(toolResponse.result)
                });
              }
            }
            break;
          }
          default: {
            const _exhaustiveCheck = role;
            throw new Error(`Unsupported role: ${_exhaustiveCheck}`);
          }
        }
      }
      return { messages, warnings };
    }
    function mapOpenAIChatLogProbsOutput(logprobs) {
      var _a, _b;
      return (_b = (_a = logprobs == null ? void 0 : logprobs.content) == null ? void 0 : _a.map(({ token, logprob, top_logprobs }) => ({
        token,
        logprob,
        topLogprobs: top_logprobs ? top_logprobs.map(({ token: token2, logprob: logprob2 }) => ({
          token: token2,
          logprob: logprob2
        })) : []
      }))) != null ? _b : void 0;
    }
    function mapOpenAIFinishReason(finishReason) {
      switch (finishReason) {
        case "stop":
          return "stop";
        case "length":
          return "length";
        case "content_filter":
          return "content-filter";
        case "function_call":
        case "tool_calls":
          return "tool-calls";
        default:
          return "unknown";
      }
    }
    var import_zod3 = require_lib();
    var import_provider_utils2 = require_dist3();
    var openaiErrorDataSchema = import_zod3.z.object({
      error: import_zod3.z.object({
        message: import_zod3.z.string(),
        // The additional information below is handled loosely to support
        // OpenAI-compatible providers that have slightly different error
        // responses:
        type: import_zod3.z.string().nullish(),
        param: import_zod3.z.any().nullish(),
        code: import_zod3.z.union([import_zod3.z.string(), import_zod3.z.number()]).nullish()
      })
    });
    var openaiFailedResponseHandler = (0, import_provider_utils2.createJsonErrorResponseHandler)({
      errorSchema: openaiErrorDataSchema,
      errorToMessage: (data) => data.error.message
    });
    function getResponseMetadata({
      id,
      model,
      created
    }) {
      return {
        id: id != null ? id : void 0,
        modelId: model != null ? model : void 0,
        timestamp: created != null ? new Date(created * 1e3) : void 0
      };
    }
    var import_provider2 = require_dist();
    function prepareTools({
      mode,
      useLegacyFunctionCalling = false,
      structuredOutputs
    }) {
      var _a;
      const tools = ((_a = mode.tools) == null ? void 0 : _a.length) ? mode.tools : void 0;
      const toolWarnings = [];
      if (tools == null) {
        return { tools: void 0, tool_choice: void 0, toolWarnings };
      }
      const toolChoice = mode.toolChoice;
      if (useLegacyFunctionCalling) {
        const openaiFunctions = [];
        for (const tool of tools) {
          if (tool.type === "provider-defined") {
            toolWarnings.push({ type: "unsupported-tool", tool });
          } else {
            openaiFunctions.push({
              name: tool.name,
              description: tool.description,
              parameters: tool.parameters
            });
          }
        }
        if (toolChoice == null) {
          return {
            functions: openaiFunctions,
            function_call: void 0,
            toolWarnings
          };
        }
        const type2 = toolChoice.type;
        switch (type2) {
          case "auto":
          case "none":
          case void 0:
            return {
              functions: openaiFunctions,
              function_call: void 0,
              toolWarnings
            };
          case "required":
            throw new import_provider2.UnsupportedFunctionalityError({
              functionality: "useLegacyFunctionCalling and toolChoice: required"
            });
          default:
            return {
              functions: openaiFunctions,
              function_call: { name: toolChoice.toolName },
              toolWarnings
            };
        }
      }
      const openaiTools2 = [];
      for (const tool of tools) {
        if (tool.type === "provider-defined") {
          toolWarnings.push({ type: "unsupported-tool", tool });
        } else {
          openaiTools2.push({
            type: "function",
            function: {
              name: tool.name,
              description: tool.description,
              parameters: tool.parameters,
              strict: structuredOutputs ? true : void 0
            }
          });
        }
      }
      if (toolChoice == null) {
        return { tools: openaiTools2, tool_choice: void 0, toolWarnings };
      }
      const type = toolChoice.type;
      switch (type) {
        case "auto":
        case "none":
        case "required":
          return { tools: openaiTools2, tool_choice: type, toolWarnings };
        case "tool":
          return {
            tools: openaiTools2,
            tool_choice: {
              type: "function",
              function: {
                name: toolChoice.toolName
              }
            },
            toolWarnings
          };
        default: {
          const _exhaustiveCheck = type;
          throw new import_provider2.UnsupportedFunctionalityError({
            functionality: `Unsupported tool choice type: ${_exhaustiveCheck}`
          });
        }
      }
    }
    var OpenAIChatLanguageModel = class {
      constructor(modelId, settings, config) {
        this.specificationVersion = "v1";
        this.modelId = modelId;
        this.settings = settings;
        this.config = config;
      }
      get supportsStructuredOutputs() {
        var _a;
        return (_a = this.settings.structuredOutputs) != null ? _a : isReasoningModel(this.modelId);
      }
      get defaultObjectGenerationMode() {
        if (isAudioModel(this.modelId)) {
          return "tool";
        }
        return this.supportsStructuredOutputs ? "json" : "tool";
      }
      get provider() {
        return this.config.provider;
      }
      get supportsImageUrls() {
        return !this.settings.downloadImages;
      }
      getArgs({
        mode,
        prompt,
        maxTokens,
        temperature,
        topP,
        topK,
        frequencyPenalty,
        presencePenalty,
        stopSequences,
        responseFormat,
        seed,
        providerMetadata
      }) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const type = mode.type;
        const warnings = [];
        if (topK != null) {
          warnings.push({
            type: "unsupported-setting",
            setting: "topK"
          });
        }
        if ((responseFormat == null ? void 0 : responseFormat.type) === "json" && responseFormat.schema != null && !this.supportsStructuredOutputs) {
          warnings.push({
            type: "unsupported-setting",
            setting: "responseFormat",
            details: "JSON response format schema is only supported with structuredOutputs"
          });
        }
        const useLegacyFunctionCalling = this.settings.useLegacyFunctionCalling;
        if (useLegacyFunctionCalling && this.settings.parallelToolCalls === true) {
          throw new import_provider3.UnsupportedFunctionalityError({
            functionality: "useLegacyFunctionCalling with parallelToolCalls"
          });
        }
        if (useLegacyFunctionCalling && this.supportsStructuredOutputs) {
          throw new import_provider3.UnsupportedFunctionalityError({
            functionality: "structuredOutputs with useLegacyFunctionCalling"
          });
        }
        const { messages, warnings: messageWarnings } = convertToOpenAIChatMessages(
          {
            prompt,
            useLegacyFunctionCalling,
            systemMessageMode: getSystemMessageMode(this.modelId)
          }
        );
        warnings.push(...messageWarnings);
        const baseArgs = {
          // model id:
          model: this.modelId,
          // model specific settings:
          logit_bias: this.settings.logitBias,
          logprobs: this.settings.logprobs === true || typeof this.settings.logprobs === "number" ? true : void 0,
          top_logprobs: typeof this.settings.logprobs === "number" ? this.settings.logprobs : typeof this.settings.logprobs === "boolean" ? this.settings.logprobs ? 0 : void 0 : void 0,
          user: this.settings.user,
          parallel_tool_calls: this.settings.parallelToolCalls,
          // standardized settings:
          max_tokens: maxTokens,
          temperature,
          top_p: topP,
          frequency_penalty: frequencyPenalty,
          presence_penalty: presencePenalty,
          response_format: (responseFormat == null ? void 0 : responseFormat.type) === "json" ? this.supportsStructuredOutputs && responseFormat.schema != null ? {
            type: "json_schema",
            json_schema: {
              schema: responseFormat.schema,
              strict: true,
              name: (_a = responseFormat.name) != null ? _a : "response",
              description: responseFormat.description
            }
          } : { type: "json_object" } : void 0,
          stop: stopSequences,
          seed,
          // openai specific settings:
          // TODO remove in next major version; we auto-map maxTokens now
          max_completion_tokens: (_b = providerMetadata == null ? void 0 : providerMetadata.openai) == null ? void 0 : _b.maxCompletionTokens,
          store: (_c = providerMetadata == null ? void 0 : providerMetadata.openai) == null ? void 0 : _c.store,
          metadata: (_d = providerMetadata == null ? void 0 : providerMetadata.openai) == null ? void 0 : _d.metadata,
          prediction: (_e = providerMetadata == null ? void 0 : providerMetadata.openai) == null ? void 0 : _e.prediction,
          reasoning_effort: (_g = (_f = providerMetadata == null ? void 0 : providerMetadata.openai) == null ? void 0 : _f.reasoningEffort) != null ? _g : this.settings.reasoningEffort,
          // messages:
          messages
        };
        if (isReasoningModel(this.modelId)) {
          if (baseArgs.temperature != null) {
            baseArgs.temperature = void 0;
            warnings.push({
              type: "unsupported-setting",
              setting: "temperature",
              details: "temperature is not supported for reasoning models"
            });
          }
          if (baseArgs.top_p != null) {
            baseArgs.top_p = void 0;
            warnings.push({
              type: "unsupported-setting",
              setting: "topP",
              details: "topP is not supported for reasoning models"
            });
          }
          if (baseArgs.frequency_penalty != null) {
            baseArgs.frequency_penalty = void 0;
            warnings.push({
              type: "unsupported-setting",
              setting: "frequencyPenalty",
              details: "frequencyPenalty is not supported for reasoning models"
            });
          }
          if (baseArgs.presence_penalty != null) {
            baseArgs.presence_penalty = void 0;
            warnings.push({
              type: "unsupported-setting",
              setting: "presencePenalty",
              details: "presencePenalty is not supported for reasoning models"
            });
          }
          if (baseArgs.logit_bias != null) {
            baseArgs.logit_bias = void 0;
            warnings.push({
              type: "other",
              message: "logitBias is not supported for reasoning models"
            });
          }
          if (baseArgs.logprobs != null) {
            baseArgs.logprobs = void 0;
            warnings.push({
              type: "other",
              message: "logprobs is not supported for reasoning models"
            });
          }
          if (baseArgs.top_logprobs != null) {
            baseArgs.top_logprobs = void 0;
            warnings.push({
              type: "other",
              message: "topLogprobs is not supported for reasoning models"
            });
          }
          if (baseArgs.max_tokens != null) {
            if (baseArgs.max_completion_tokens == null) {
              baseArgs.max_completion_tokens = baseArgs.max_tokens;
            }
            baseArgs.max_tokens = void 0;
          }
        }
        switch (type) {
          case "regular": {
            const { tools, tool_choice, functions, function_call, toolWarnings } = prepareTools({
              mode,
              useLegacyFunctionCalling,
              structuredOutputs: this.supportsStructuredOutputs
            });
            return {
              args: {
                ...baseArgs,
                tools,
                tool_choice,
                functions,
                function_call
              },
              warnings: [...warnings, ...toolWarnings]
            };
          }
          case "object-json": {
            return {
              args: {
                ...baseArgs,
                response_format: this.supportsStructuredOutputs && mode.schema != null ? {
                  type: "json_schema",
                  json_schema: {
                    schema: mode.schema,
                    strict: true,
                    name: (_h = mode.name) != null ? _h : "response",
                    description: mode.description
                  }
                } : { type: "json_object" }
              },
              warnings
            };
          }
          case "object-tool": {
            return {
              args: useLegacyFunctionCalling ? {
                ...baseArgs,
                function_call: {
                  name: mode.tool.name
                },
                functions: [
                  {
                    name: mode.tool.name,
                    description: mode.tool.description,
                    parameters: mode.tool.parameters
                  }
                ]
              } : {
                ...baseArgs,
                tool_choice: {
                  type: "function",
                  function: { name: mode.tool.name }
                },
                tools: [
                  {
                    type: "function",
                    function: {
                      name: mode.tool.name,
                      description: mode.tool.description,
                      parameters: mode.tool.parameters,
                      strict: this.supportsStructuredOutputs ? true : void 0
                    }
                  }
                ]
              },
              warnings
            };
          }
          default: {
            const _exhaustiveCheck = type;
            throw new Error(`Unsupported type: ${_exhaustiveCheck}`);
          }
        }
      }
      async doGenerate(options) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        const { args: body, warnings } = this.getArgs(options);
        const {
          responseHeaders,
          value: response,
          rawValue: rawResponse
        } = await (0, import_provider_utils3.postJsonToApi)({
          url: this.config.url({
            path: "/chat/completions",
            modelId: this.modelId
          }),
          headers: (0, import_provider_utils3.combineHeaders)(this.config.headers(), options.headers),
          body,
          failedResponseHandler: openaiFailedResponseHandler,
          successfulResponseHandler: (0, import_provider_utils3.createJsonResponseHandler)(
            openaiChatResponseSchema
          ),
          abortSignal: options.abortSignal,
          fetch: this.config.fetch
        });
        const { messages: rawPrompt, ...rawSettings } = body;
        const choice = response.choices[0];
        const completionTokenDetails = (_a = response.usage) == null ? void 0 : _a.completion_tokens_details;
        const promptTokenDetails = (_b = response.usage) == null ? void 0 : _b.prompt_tokens_details;
        const providerMetadata = { openai: {} };
        if ((completionTokenDetails == null ? void 0 : completionTokenDetails.reasoning_tokens) != null) {
          providerMetadata.openai.reasoningTokens = completionTokenDetails == null ? void 0 : completionTokenDetails.reasoning_tokens;
        }
        if ((completionTokenDetails == null ? void 0 : completionTokenDetails.accepted_prediction_tokens) != null) {
          providerMetadata.openai.acceptedPredictionTokens = completionTokenDetails == null ? void 0 : completionTokenDetails.accepted_prediction_tokens;
        }
        if ((completionTokenDetails == null ? void 0 : completionTokenDetails.rejected_prediction_tokens) != null) {
          providerMetadata.openai.rejectedPredictionTokens = completionTokenDetails == null ? void 0 : completionTokenDetails.rejected_prediction_tokens;
        }
        if ((promptTokenDetails == null ? void 0 : promptTokenDetails.cached_tokens) != null) {
          providerMetadata.openai.cachedPromptTokens = promptTokenDetails == null ? void 0 : promptTokenDetails.cached_tokens;
        }
        return {
          text: (_c = choice.message.content) != null ? _c : void 0,
          toolCalls: this.settings.useLegacyFunctionCalling && choice.message.function_call ? [
            {
              toolCallType: "function",
              toolCallId: (0, import_provider_utils3.generateId)(),
              toolName: choice.message.function_call.name,
              args: choice.message.function_call.arguments
            }
          ] : (_d = choice.message.tool_calls) == null ? void 0 : _d.map((toolCall) => {
            var _a2;
            return {
              toolCallType: "function",
              toolCallId: (_a2 = toolCall.id) != null ? _a2 : (0, import_provider_utils3.generateId)(),
              toolName: toolCall.function.name,
              args: toolCall.function.arguments
            };
          }),
          finishReason: mapOpenAIFinishReason(choice.finish_reason),
          usage: {
            promptTokens: (_f = (_e = response.usage) == null ? void 0 : _e.prompt_tokens) != null ? _f : NaN,
            completionTokens: (_h = (_g = response.usage) == null ? void 0 : _g.completion_tokens) != null ? _h : NaN
          },
          rawCall: { rawPrompt, rawSettings },
          rawResponse: { headers: responseHeaders, body: rawResponse },
          request: { body: JSON.stringify(body) },
          response: getResponseMetadata(response),
          warnings,
          logprobs: mapOpenAIChatLogProbsOutput(choice.logprobs),
          providerMetadata
        };
      }
      async doStream(options) {
        if (this.settings.simulateStreaming) {
          const result = await this.doGenerate(options);
          const simulatedStream = new ReadableStream({
            start(controller) {
              controller.enqueue({ type: "response-metadata", ...result.response });
              if (result.text) {
                controller.enqueue({
                  type: "text-delta",
                  textDelta: result.text
                });
              }
              if (result.toolCalls) {
                for (const toolCall of result.toolCalls) {
                  controller.enqueue({
                    type: "tool-call-delta",
                    toolCallType: "function",
                    toolCallId: toolCall.toolCallId,
                    toolName: toolCall.toolName,
                    argsTextDelta: toolCall.args
                  });
                  controller.enqueue({
                    type: "tool-call",
                    ...toolCall
                  });
                }
              }
              controller.enqueue({
                type: "finish",
                finishReason: result.finishReason,
                usage: result.usage,
                logprobs: result.logprobs,
                providerMetadata: result.providerMetadata
              });
              controller.close();
            }
          });
          return {
            stream: simulatedStream,
            rawCall: result.rawCall,
            rawResponse: result.rawResponse,
            warnings: result.warnings
          };
        }
        const { args, warnings } = this.getArgs(options);
        const body = {
          ...args,
          stream: true,
          // only include stream_options when in strict compatibility mode:
          stream_options: this.config.compatibility === "strict" ? { include_usage: true } : void 0
        };
        const { responseHeaders, value: response } = await (0, import_provider_utils3.postJsonToApi)({
          url: this.config.url({
            path: "/chat/completions",
            modelId: this.modelId
          }),
          headers: (0, import_provider_utils3.combineHeaders)(this.config.headers(), options.headers),
          body,
          failedResponseHandler: openaiFailedResponseHandler,
          successfulResponseHandler: (0, import_provider_utils3.createEventSourceResponseHandler)(
            openaiChatChunkSchema
          ),
          abortSignal: options.abortSignal,
          fetch: this.config.fetch
        });
        const { messages: rawPrompt, ...rawSettings } = args;
        const toolCalls = [];
        let finishReason = "unknown";
        let usage = {
          promptTokens: void 0,
          completionTokens: void 0
        };
        let logprobs;
        let isFirstChunk = true;
        const { useLegacyFunctionCalling } = this.settings;
        const providerMetadata = { openai: {} };
        return {
          stream: response.pipeThrough(
            new TransformStream({
              transform(chunk, controller) {
                var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
                if (!chunk.success) {
                  finishReason = "error";
                  controller.enqueue({ type: "error", error: chunk.error });
                  return;
                }
                const value = chunk.value;
                if ("error" in value) {
                  finishReason = "error";
                  controller.enqueue({ type: "error", error: value.error });
                  return;
                }
                if (isFirstChunk) {
                  isFirstChunk = false;
                  controller.enqueue({
                    type: "response-metadata",
                    ...getResponseMetadata(value)
                  });
                }
                if (value.usage != null) {
                  const {
                    prompt_tokens,
                    completion_tokens,
                    prompt_tokens_details,
                    completion_tokens_details
                  } = value.usage;
                  usage = {
                    promptTokens: prompt_tokens != null ? prompt_tokens : void 0,
                    completionTokens: completion_tokens != null ? completion_tokens : void 0
                  };
                  if ((completion_tokens_details == null ? void 0 : completion_tokens_details.reasoning_tokens) != null) {
                    providerMetadata.openai.reasoningTokens = completion_tokens_details == null ? void 0 : completion_tokens_details.reasoning_tokens;
                  }
                  if ((completion_tokens_details == null ? void 0 : completion_tokens_details.accepted_prediction_tokens) != null) {
                    providerMetadata.openai.acceptedPredictionTokens = completion_tokens_details == null ? void 0 : completion_tokens_details.accepted_prediction_tokens;
                  }
                  if ((completion_tokens_details == null ? void 0 : completion_tokens_details.rejected_prediction_tokens) != null) {
                    providerMetadata.openai.rejectedPredictionTokens = completion_tokens_details == null ? void 0 : completion_tokens_details.rejected_prediction_tokens;
                  }
                  if ((prompt_tokens_details == null ? void 0 : prompt_tokens_details.cached_tokens) != null) {
                    providerMetadata.openai.cachedPromptTokens = prompt_tokens_details == null ? void 0 : prompt_tokens_details.cached_tokens;
                  }
                }
                const choice = value.choices[0];
                if ((choice == null ? void 0 : choice.finish_reason) != null) {
                  finishReason = mapOpenAIFinishReason(choice.finish_reason);
                }
                if ((choice == null ? void 0 : choice.delta) == null) {
                  return;
                }
                const delta = choice.delta;
                if (delta.content != null) {
                  controller.enqueue({
                    type: "text-delta",
                    textDelta: delta.content
                  });
                }
                const mappedLogprobs = mapOpenAIChatLogProbsOutput(
                  choice == null ? void 0 : choice.logprobs
                );
                if (mappedLogprobs == null ? void 0 : mappedLogprobs.length) {
                  if (logprobs === void 0)
                    logprobs = [];
                  logprobs.push(...mappedLogprobs);
                }
                const mappedToolCalls = useLegacyFunctionCalling && delta.function_call != null ? [
                  {
                    type: "function",
                    id: (0, import_provider_utils3.generateId)(),
                    function: delta.function_call,
                    index: 0
                  }
                ] : delta.tool_calls;
                if (mappedToolCalls != null) {
                  for (const toolCallDelta of mappedToolCalls) {
                    const index = toolCallDelta.index;
                    if (toolCalls[index] == null) {
                      if (toolCallDelta.type !== "function") {
                        throw new import_provider3.InvalidResponseDataError({
                          data: toolCallDelta,
                          message: `Expected 'function' type.`
                        });
                      }
                      if (toolCallDelta.id == null) {
                        throw new import_provider3.InvalidResponseDataError({
                          data: toolCallDelta,
                          message: `Expected 'id' to be a string.`
                        });
                      }
                      if (((_a = toolCallDelta.function) == null ? void 0 : _a.name) == null) {
                        throw new import_provider3.InvalidResponseDataError({
                          data: toolCallDelta,
                          message: `Expected 'function.name' to be a string.`
                        });
                      }
                      toolCalls[index] = {
                        id: toolCallDelta.id,
                        type: "function",
                        function: {
                          name: toolCallDelta.function.name,
                          arguments: (_b = toolCallDelta.function.arguments) != null ? _b : ""
                        },
                        hasFinished: false
                      };
                      const toolCall2 = toolCalls[index];
                      if (((_c = toolCall2.function) == null ? void 0 : _c.name) != null && ((_d = toolCall2.function) == null ? void 0 : _d.arguments) != null) {
                        if (toolCall2.function.arguments.length > 0) {
                          controller.enqueue({
                            type: "tool-call-delta",
                            toolCallType: "function",
                            toolCallId: toolCall2.id,
                            toolName: toolCall2.function.name,
                            argsTextDelta: toolCall2.function.arguments
                          });
                        }
                        if ((0, import_provider_utils3.isParsableJson)(toolCall2.function.arguments)) {
                          controller.enqueue({
                            type: "tool-call",
                            toolCallType: "function",
                            toolCallId: (_e = toolCall2.id) != null ? _e : (0, import_provider_utils3.generateId)(),
                            toolName: toolCall2.function.name,
                            args: toolCall2.function.arguments
                          });
                          toolCall2.hasFinished = true;
                        }
                      }
                      continue;
                    }
                    const toolCall = toolCalls[index];
                    if (toolCall.hasFinished) {
                      continue;
                    }
                    if (((_f = toolCallDelta.function) == null ? void 0 : _f.arguments) != null) {
                      toolCall.function.arguments += (_h = (_g = toolCallDelta.function) == null ? void 0 : _g.arguments) != null ? _h : "";
                    }
                    controller.enqueue({
                      type: "tool-call-delta",
                      toolCallType: "function",
                      toolCallId: toolCall.id,
                      toolName: toolCall.function.name,
                      argsTextDelta: (_i = toolCallDelta.function.arguments) != null ? _i : ""
                    });
                    if (((_j = toolCall.function) == null ? void 0 : _j.name) != null && ((_k = toolCall.function) == null ? void 0 : _k.arguments) != null && (0, import_provider_utils3.isParsableJson)(toolCall.function.arguments)) {
                      controller.enqueue({
                        type: "tool-call",
                        toolCallType: "function",
                        toolCallId: (_l = toolCall.id) != null ? _l : (0, import_provider_utils3.generateId)(),
                        toolName: toolCall.function.name,
                        args: toolCall.function.arguments
                      });
                      toolCall.hasFinished = true;
                    }
                  }
                }
              },
              flush(controller) {
                var _a, _b;
                controller.enqueue({
                  type: "finish",
                  finishReason,
                  logprobs,
                  usage: {
                    promptTokens: (_a = usage.promptTokens) != null ? _a : NaN,
                    completionTokens: (_b = usage.completionTokens) != null ? _b : NaN
                  },
                  ...providerMetadata != null ? { providerMetadata } : {}
                });
              }
            })
          ),
          rawCall: { rawPrompt, rawSettings },
          rawResponse: { headers: responseHeaders },
          request: { body: JSON.stringify(body) },
          warnings
        };
      }
    };
    var openaiTokenUsageSchema = import_zod2.z.object({
      prompt_tokens: import_zod2.z.number().nullish(),
      completion_tokens: import_zod2.z.number().nullish(),
      prompt_tokens_details: import_zod2.z.object({
        cached_tokens: import_zod2.z.number().nullish()
      }).nullish(),
      completion_tokens_details: import_zod2.z.object({
        reasoning_tokens: import_zod2.z.number().nullish(),
        accepted_prediction_tokens: import_zod2.z.number().nullish(),
        rejected_prediction_tokens: import_zod2.z.number().nullish()
      }).nullish()
    }).nullish();
    var openaiChatResponseSchema = import_zod2.z.object({
      id: import_zod2.z.string().nullish(),
      created: import_zod2.z.number().nullish(),
      model: import_zod2.z.string().nullish(),
      choices: import_zod2.z.array(
        import_zod2.z.object({
          message: import_zod2.z.object({
            role: import_zod2.z.literal("assistant").nullish(),
            content: import_zod2.z.string().nullish(),
            function_call: import_zod2.z.object({
              arguments: import_zod2.z.string(),
              name: import_zod2.z.string()
            }).nullish(),
            tool_calls: import_zod2.z.array(
              import_zod2.z.object({
                id: import_zod2.z.string().nullish(),
                type: import_zod2.z.literal("function"),
                function: import_zod2.z.object({
                  name: import_zod2.z.string(),
                  arguments: import_zod2.z.string()
                })
              })
            ).nullish()
          }),
          index: import_zod2.z.number(),
          logprobs: import_zod2.z.object({
            content: import_zod2.z.array(
              import_zod2.z.object({
                token: import_zod2.z.string(),
                logprob: import_zod2.z.number(),
                top_logprobs: import_zod2.z.array(
                  import_zod2.z.object({
                    token: import_zod2.z.string(),
                    logprob: import_zod2.z.number()
                  })
                )
              })
            ).nullable()
          }).nullish(),
          finish_reason: import_zod2.z.string().nullish()
        })
      ),
      usage: openaiTokenUsageSchema
    });
    var openaiChatChunkSchema = import_zod2.z.union([
      import_zod2.z.object({
        id: import_zod2.z.string().nullish(),
        created: import_zod2.z.number().nullish(),
        model: import_zod2.z.string().nullish(),
        choices: import_zod2.z.array(
          import_zod2.z.object({
            delta: import_zod2.z.object({
              role: import_zod2.z.enum(["assistant"]).nullish(),
              content: import_zod2.z.string().nullish(),
              function_call: import_zod2.z.object({
                name: import_zod2.z.string().optional(),
                arguments: import_zod2.z.string().optional()
              }).nullish(),
              tool_calls: import_zod2.z.array(
                import_zod2.z.object({
                  index: import_zod2.z.number(),
                  id: import_zod2.z.string().nullish(),
                  type: import_zod2.z.literal("function").optional(),
                  function: import_zod2.z.object({
                    name: import_zod2.z.string().nullish(),
                    arguments: import_zod2.z.string().nullish()
                  })
                })
              ).nullish()
            }).nullish(),
            logprobs: import_zod2.z.object({
              content: import_zod2.z.array(
                import_zod2.z.object({
                  token: import_zod2.z.string(),
                  logprob: import_zod2.z.number(),
                  top_logprobs: import_zod2.z.array(
                    import_zod2.z.object({
                      token: import_zod2.z.string(),
                      logprob: import_zod2.z.number()
                    })
                  )
                })
              ).nullable()
            }).nullish(),
            finish_reason: import_zod2.z.string().nullable().optional(),
            index: import_zod2.z.number()
          })
        ),
        usage: openaiTokenUsageSchema
      }),
      openaiErrorDataSchema
    ]);
    function isReasoningModel(modelId) {
      return modelId === "o1" || modelId.startsWith("o1-") || modelId === "o3" || modelId.startsWith("o3-");
    }
    function isAudioModel(modelId) {
      return modelId.startsWith("gpt-4o-audio-preview");
    }
    function getSystemMessageMode(modelId) {
      var _a, _b;
      if (!isReasoningModel(modelId)) {
        return "system";
      }
      return (_b = (_a = reasoningModels[modelId]) == null ? void 0 : _a.systemMessageMode) != null ? _b : "developer";
    }
    var reasoningModels = {
      "o1-mini": {
        systemMessageMode: "remove"
      },
      "o1-mini-2024-09-12": {
        systemMessageMode: "remove"
      },
      "o1-preview": {
        systemMessageMode: "remove"
      },
      "o1-preview-2024-09-12": {
        systemMessageMode: "remove"
      },
      "o3-mini": {
        systemMessageMode: "developer"
      },
      "o3-mini-2025-01-31": {
        systemMessageMode: "developer"
      }
    };
    var import_provider5 = require_dist();
    var import_provider_utils4 = require_dist3();
    var import_zod32 = require_lib();
    var import_provider4 = require_dist();
    function convertToOpenAICompletionPrompt({
      prompt,
      inputFormat,
      user = "user",
      assistant = "assistant"
    }) {
      if (inputFormat === "prompt" && prompt.length === 1 && prompt[0].role === "user" && prompt[0].content.length === 1 && prompt[0].content[0].type === "text") {
        return { prompt: prompt[0].content[0].text };
      }
      let text = "";
      if (prompt[0].role === "system") {
        text += `${prompt[0].content}

`;
        prompt = prompt.slice(1);
      }
      for (const { role, content } of prompt) {
        switch (role) {
          case "system": {
            throw new import_provider4.InvalidPromptError({
              message: "Unexpected system message in prompt: ${content}",
              prompt
            });
          }
          case "user": {
            const userMessage = content.map((part) => {
              switch (part.type) {
                case "text": {
                  return part.text;
                }
                case "image": {
                  throw new import_provider4.UnsupportedFunctionalityError({
                    functionality: "images"
                  });
                }
              }
            }).join("");
            text += `${user}:
${userMessage}

`;
            break;
          }
          case "assistant": {
            const assistantMessage = content.map((part) => {
              switch (part.type) {
                case "text": {
                  return part.text;
                }
                case "tool-call": {
                  throw new import_provider4.UnsupportedFunctionalityError({
                    functionality: "tool-call messages"
                  });
                }
              }
            }).join("");
            text += `${assistant}:
${assistantMessage}

`;
            break;
          }
          case "tool": {
            throw new import_provider4.UnsupportedFunctionalityError({
              functionality: "tool messages"
            });
          }
          default: {
            const _exhaustiveCheck = role;
            throw new Error(`Unsupported role: ${_exhaustiveCheck}`);
          }
        }
      }
      text += `${assistant}:
`;
      return {
        prompt: text,
        stopSequences: [`
${user}:`]
      };
    }
    function mapOpenAICompletionLogProbs(logprobs) {
      return logprobs == null ? void 0 : logprobs.tokens.map((token, index) => ({
        token,
        logprob: logprobs.token_logprobs[index],
        topLogprobs: logprobs.top_logprobs ? Object.entries(logprobs.top_logprobs[index]).map(
          ([token2, logprob]) => ({
            token: token2,
            logprob
          })
        ) : []
      }));
    }
    var OpenAICompletionLanguageModel = class {
      constructor(modelId, settings, config) {
        this.specificationVersion = "v1";
        this.defaultObjectGenerationMode = void 0;
        this.modelId = modelId;
        this.settings = settings;
        this.config = config;
      }
      get provider() {
        return this.config.provider;
      }
      getArgs({
        mode,
        inputFormat,
        prompt,
        maxTokens,
        temperature,
        topP,
        topK,
        frequencyPenalty,
        presencePenalty,
        stopSequences: userStopSequences,
        responseFormat,
        seed
      }) {
        var _a;
        const type = mode.type;
        const warnings = [];
        if (topK != null) {
          warnings.push({
            type: "unsupported-setting",
            setting: "topK"
          });
        }
        if (responseFormat != null && responseFormat.type !== "text") {
          warnings.push({
            type: "unsupported-setting",
            setting: "responseFormat",
            details: "JSON response format is not supported."
          });
        }
        const { prompt: completionPrompt, stopSequences } = convertToOpenAICompletionPrompt({ prompt, inputFormat });
        const stop = [...stopSequences != null ? stopSequences : [], ...userStopSequences != null ? userStopSequences : []];
        const baseArgs = {
          // model id:
          model: this.modelId,
          // model specific settings:
          echo: this.settings.echo,
          logit_bias: this.settings.logitBias,
          logprobs: typeof this.settings.logprobs === "number" ? this.settings.logprobs : typeof this.settings.logprobs === "boolean" ? this.settings.logprobs ? 0 : void 0 : void 0,
          suffix: this.settings.suffix,
          user: this.settings.user,
          // standardized settings:
          max_tokens: maxTokens,
          temperature,
          top_p: topP,
          frequency_penalty: frequencyPenalty,
          presence_penalty: presencePenalty,
          seed,
          // prompt:
          prompt: completionPrompt,
          // stop sequences:
          stop: stop.length > 0 ? stop : void 0
        };
        switch (type) {
          case "regular": {
            if ((_a = mode.tools) == null ? void 0 : _a.length) {
              throw new import_provider5.UnsupportedFunctionalityError({
                functionality: "tools"
              });
            }
            if (mode.toolChoice) {
              throw new import_provider5.UnsupportedFunctionalityError({
                functionality: "toolChoice"
              });
            }
            return { args: baseArgs, warnings };
          }
          case "object-json": {
            throw new import_provider5.UnsupportedFunctionalityError({
              functionality: "object-json mode"
            });
          }
          case "object-tool": {
            throw new import_provider5.UnsupportedFunctionalityError({
              functionality: "object-tool mode"
            });
          }
          default: {
            const _exhaustiveCheck = type;
            throw new Error(`Unsupported type: ${_exhaustiveCheck}`);
          }
        }
      }
      async doGenerate(options) {
        const { args, warnings } = this.getArgs(options);
        const {
          responseHeaders,
          value: response,
          rawValue: rawResponse
        } = await (0, import_provider_utils4.postJsonToApi)({
          url: this.config.url({
            path: "/completions",
            modelId: this.modelId
          }),
          headers: (0, import_provider_utils4.combineHeaders)(this.config.headers(), options.headers),
          body: args,
          failedResponseHandler: openaiFailedResponseHandler,
          successfulResponseHandler: (0, import_provider_utils4.createJsonResponseHandler)(
            openaiCompletionResponseSchema
          ),
          abortSignal: options.abortSignal,
          fetch: this.config.fetch
        });
        const { prompt: rawPrompt, ...rawSettings } = args;
        const choice = response.choices[0];
        return {
          text: choice.text,
          usage: {
            promptTokens: response.usage.prompt_tokens,
            completionTokens: response.usage.completion_tokens
          },
          finishReason: mapOpenAIFinishReason(choice.finish_reason),
          logprobs: mapOpenAICompletionLogProbs(choice.logprobs),
          rawCall: { rawPrompt, rawSettings },
          rawResponse: { headers: responseHeaders, body: rawResponse },
          response: getResponseMetadata(response),
          warnings,
          request: { body: JSON.stringify(args) }
        };
      }
      async doStream(options) {
        const { args, warnings } = this.getArgs(options);
        const body = {
          ...args,
          stream: true,
          // only include stream_options when in strict compatibility mode:
          stream_options: this.config.compatibility === "strict" ? { include_usage: true } : void 0
        };
        const { responseHeaders, value: response } = await (0, import_provider_utils4.postJsonToApi)({
          url: this.config.url({
            path: "/completions",
            modelId: this.modelId
          }),
          headers: (0, import_provider_utils4.combineHeaders)(this.config.headers(), options.headers),
          body,
          failedResponseHandler: openaiFailedResponseHandler,
          successfulResponseHandler: (0, import_provider_utils4.createEventSourceResponseHandler)(
            openaiCompletionChunkSchema
          ),
          abortSignal: options.abortSignal,
          fetch: this.config.fetch
        });
        const { prompt: rawPrompt, ...rawSettings } = args;
        let finishReason = "unknown";
        let usage = {
          promptTokens: Number.NaN,
          completionTokens: Number.NaN
        };
        let logprobs;
        let isFirstChunk = true;
        return {
          stream: response.pipeThrough(
            new TransformStream({
              transform(chunk, controller) {
                if (!chunk.success) {
                  finishReason = "error";
                  controller.enqueue({ type: "error", error: chunk.error });
                  return;
                }
                const value = chunk.value;
                if ("error" in value) {
                  finishReason = "error";
                  controller.enqueue({ type: "error", error: value.error });
                  return;
                }
                if (isFirstChunk) {
                  isFirstChunk = false;
                  controller.enqueue({
                    type: "response-metadata",
                    ...getResponseMetadata(value)
                  });
                }
                if (value.usage != null) {
                  usage = {
                    promptTokens: value.usage.prompt_tokens,
                    completionTokens: value.usage.completion_tokens
                  };
                }
                const choice = value.choices[0];
                if ((choice == null ? void 0 : choice.finish_reason) != null) {
                  finishReason = mapOpenAIFinishReason(choice.finish_reason);
                }
                if ((choice == null ? void 0 : choice.text) != null) {
                  controller.enqueue({
                    type: "text-delta",
                    textDelta: choice.text
                  });
                }
                const mappedLogprobs = mapOpenAICompletionLogProbs(
                  choice == null ? void 0 : choice.logprobs
                );
                if (mappedLogprobs == null ? void 0 : mappedLogprobs.length) {
                  if (logprobs === void 0)
                    logprobs = [];
                  logprobs.push(...mappedLogprobs);
                }
              },
              flush(controller) {
                controller.enqueue({
                  type: "finish",
                  finishReason,
                  logprobs,
                  usage
                });
              }
            })
          ),
          rawCall: { rawPrompt, rawSettings },
          rawResponse: { headers: responseHeaders },
          warnings,
          request: { body: JSON.stringify(body) }
        };
      }
    };
    var openaiCompletionResponseSchema = import_zod32.z.object({
      id: import_zod32.z.string().nullish(),
      created: import_zod32.z.number().nullish(),
      model: import_zod32.z.string().nullish(),
      choices: import_zod32.z.array(
        import_zod32.z.object({
          text: import_zod32.z.string(),
          finish_reason: import_zod32.z.string(),
          logprobs: import_zod32.z.object({
            tokens: import_zod32.z.array(import_zod32.z.string()),
            token_logprobs: import_zod32.z.array(import_zod32.z.number()),
            top_logprobs: import_zod32.z.array(import_zod32.z.record(import_zod32.z.string(), import_zod32.z.number())).nullable()
          }).nullish()
        })
      ),
      usage: import_zod32.z.object({
        prompt_tokens: import_zod32.z.number(),
        completion_tokens: import_zod32.z.number()
      })
    });
    var openaiCompletionChunkSchema = import_zod32.z.union([
      import_zod32.z.object({
        id: import_zod32.z.string().nullish(),
        created: import_zod32.z.number().nullish(),
        model: import_zod32.z.string().nullish(),
        choices: import_zod32.z.array(
          import_zod32.z.object({
            text: import_zod32.z.string(),
            finish_reason: import_zod32.z.string().nullish(),
            index: import_zod32.z.number(),
            logprobs: import_zod32.z.object({
              tokens: import_zod32.z.array(import_zod32.z.string()),
              token_logprobs: import_zod32.z.array(import_zod32.z.number()),
              top_logprobs: import_zod32.z.array(import_zod32.z.record(import_zod32.z.string(), import_zod32.z.number())).nullable()
            }).nullish()
          })
        ),
        usage: import_zod32.z.object({
          prompt_tokens: import_zod32.z.number(),
          completion_tokens: import_zod32.z.number()
        }).nullish()
      }),
      openaiErrorDataSchema
    ]);
    var import_provider6 = require_dist();
    var import_provider_utils5 = require_dist3();
    var import_zod4 = require_lib();
    var OpenAIEmbeddingModel = class {
      constructor(modelId, settings, config) {
        this.specificationVersion = "v1";
        this.modelId = modelId;
        this.settings = settings;
        this.config = config;
      }
      get provider() {
        return this.config.provider;
      }
      get maxEmbeddingsPerCall() {
        var _a;
        return (_a = this.settings.maxEmbeddingsPerCall) != null ? _a : 2048;
      }
      get supportsParallelCalls() {
        var _a;
        return (_a = this.settings.supportsParallelCalls) != null ? _a : true;
      }
      async doEmbed({
        values,
        headers,
        abortSignal
      }) {
        if (values.length > this.maxEmbeddingsPerCall) {
          throw new import_provider6.TooManyEmbeddingValuesForCallError({
            provider: this.provider,
            modelId: this.modelId,
            maxEmbeddingsPerCall: this.maxEmbeddingsPerCall,
            values
          });
        }
        const { responseHeaders, value: response } = await (0, import_provider_utils5.postJsonToApi)({
          url: this.config.url({
            path: "/embeddings",
            modelId: this.modelId
          }),
          headers: (0, import_provider_utils5.combineHeaders)(this.config.headers(), headers),
          body: {
            model: this.modelId,
            input: values,
            encoding_format: "float",
            dimensions: this.settings.dimensions,
            user: this.settings.user
          },
          failedResponseHandler: openaiFailedResponseHandler,
          successfulResponseHandler: (0, import_provider_utils5.createJsonResponseHandler)(
            openaiTextEmbeddingResponseSchema
          ),
          abortSignal,
          fetch: this.config.fetch
        });
        return {
          embeddings: response.data.map((item) => item.embedding),
          usage: response.usage ? { tokens: response.usage.prompt_tokens } : void 0,
          rawResponse: { headers: responseHeaders }
        };
      }
    };
    var openaiTextEmbeddingResponseSchema = import_zod4.z.object({
      data: import_zod4.z.array(import_zod4.z.object({ embedding: import_zod4.z.array(import_zod4.z.number()) })),
      usage: import_zod4.z.object({ prompt_tokens: import_zod4.z.number() }).nullish()
    });
    var import_provider_utils6 = require_dist3();
    var import_zod5 = require_lib();
    var modelMaxImagesPerCall = {
      "dall-e-3": 1,
      "dall-e-2": 10
    };
    var OpenAIImageModel = class {
      constructor(modelId, settings, config) {
        this.modelId = modelId;
        this.settings = settings;
        this.config = config;
        this.specificationVersion = "v1";
      }
      get maxImagesPerCall() {
        var _a, _b;
        return (_b = (_a = this.settings.maxImagesPerCall) != null ? _a : modelMaxImagesPerCall[this.modelId]) != null ? _b : 1;
      }
      get provider() {
        return this.config.provider;
      }
      async doGenerate({
        prompt,
        n,
        size,
        aspectRatio,
        seed,
        providerOptions,
        headers,
        abortSignal
      }) {
        var _a, _b, _c, _d;
        const warnings = [];
        if (aspectRatio != null) {
          warnings.push({
            type: "unsupported-setting",
            setting: "aspectRatio",
            details: "This model does not support aspect ratio. Use `size` instead."
          });
        }
        if (seed != null) {
          warnings.push({ type: "unsupported-setting", setting: "seed" });
        }
        const currentDate = (_c = (_b = (_a = this.config._internal) == null ? void 0 : _a.currentDate) == null ? void 0 : _b.call(_a)) != null ? _c : /* @__PURE__ */ new Date();
        const { value: response, responseHeaders } = await (0, import_provider_utils6.postJsonToApi)({
          url: this.config.url({
            path: "/images/generations",
            modelId: this.modelId
          }),
          headers: (0, import_provider_utils6.combineHeaders)(this.config.headers(), headers),
          body: {
            model: this.modelId,
            prompt,
            n,
            size,
            ...(_d = providerOptions.openai) != null ? _d : {},
            response_format: "b64_json"
          },
          failedResponseHandler: openaiFailedResponseHandler,
          successfulResponseHandler: (0, import_provider_utils6.createJsonResponseHandler)(
            openaiImageResponseSchema
          ),
          abortSignal,
          fetch: this.config.fetch
        });
        return {
          images: response.data.map((item) => item.b64_json),
          warnings,
          response: {
            timestamp: currentDate,
            modelId: this.modelId,
            headers: responseHeaders
          }
        };
      }
    };
    var openaiImageResponseSchema = import_zod5.z.object({
      data: import_zod5.z.array(import_zod5.z.object({ b64_json: import_zod5.z.string() }))
    });
    var import_provider9 = require_dist();
    var import_provider_utils8 = require_dist3();
    var import_zod6 = require_lib();
    var import_provider7 = require_dist();
    var import_provider_utils7 = require_dist3();
    function convertToOpenAIResponsesMessages({
      prompt,
      systemMessageMode
    }) {
      const messages = [];
      const warnings = [];
      for (const { role, content } of prompt) {
        switch (role) {
          case "system": {
            switch (systemMessageMode) {
              case "system": {
                messages.push({ role: "system", content });
                break;
              }
              case "developer": {
                messages.push({ role: "developer", content });
                break;
              }
              case "remove": {
                warnings.push({
                  type: "other",
                  message: "system messages are removed for this model"
                });
                break;
              }
              default: {
                const _exhaustiveCheck = systemMessageMode;
                throw new Error(
                  `Unsupported system message mode: ${_exhaustiveCheck}`
                );
              }
            }
            break;
          }
          case "user": {
            messages.push({
              role: "user",
              content: content.map((part, index) => {
                var _a, _b, _c, _d;
                switch (part.type) {
                  case "text": {
                    return { type: "input_text", text: part.text };
                  }
                  case "image": {
                    return {
                      type: "input_image",
                      image_url: part.image instanceof URL ? part.image.toString() : `data:${(_a = part.mimeType) != null ? _a : "image/jpeg"};base64,${(0, import_provider_utils7.convertUint8ArrayToBase64)(part.image)}`,
                      // OpenAI specific extension: image detail
                      detail: (_c = (_b = part.providerMetadata) == null ? void 0 : _b.openai) == null ? void 0 : _c.imageDetail
                    };
                  }
                  case "file": {
                    if (part.data instanceof URL) {
                      throw new import_provider7.UnsupportedFunctionalityError({
                        functionality: "File URLs in user messages"
                      });
                    }
                    switch (part.mimeType) {
                      case "application/pdf": {
                        return {
                          type: "input_file",
                          filename: (_d = part.filename) != null ? _d : `part-${index}.pdf`,
                          file_data: `data:application/pdf;base64,${part.data}`
                        };
                      }
                      default: {
                        throw new import_provider7.UnsupportedFunctionalityError({
                          functionality: "Only PDF files are supported in user messages"
                        });
                      }
                    }
                  }
                }
              })
            });
            break;
          }
          case "assistant": {
            for (const part of content) {
              switch (part.type) {
                case "text": {
                  messages.push({
                    role: "assistant",
                    content: [{ type: "output_text", text: part.text }]
                  });
                  break;
                }
                case "tool-call": {
                  messages.push({
                    type: "function_call",
                    call_id: part.toolCallId,
                    name: part.toolName,
                    arguments: JSON.stringify(part.args)
                  });
                  break;
                }
              }
            }
            break;
          }
          case "tool": {
            for (const part of content) {
              messages.push({
                type: "function_call_output",
                call_id: part.toolCallId,
                output: JSON.stringify(part.result)
              });
            }
            break;
          }
          default: {
            const _exhaustiveCheck = role;
            throw new Error(`Unsupported role: ${_exhaustiveCheck}`);
          }
        }
      }
      return { messages, warnings };
    }
    function mapOpenAIResponseFinishReason({
      finishReason,
      hasToolCalls
    }) {
      switch (finishReason) {
        case void 0:
        case null:
          return hasToolCalls ? "tool-calls" : "stop";
        case "max_output_tokens":
          return "length";
        case "content_filter":
          return "content-filter";
        default:
          return hasToolCalls ? "tool-calls" : "unknown";
      }
    }
    var import_provider8 = require_dist();
    function prepareResponsesTools({
      mode,
      strict
    }) {
      var _a;
      const tools = ((_a = mode.tools) == null ? void 0 : _a.length) ? mode.tools : void 0;
      const toolWarnings = [];
      if (tools == null) {
        return { tools: void 0, tool_choice: void 0, toolWarnings };
      }
      const toolChoice = mode.toolChoice;
      const openaiTools2 = [];
      for (const tool of tools) {
        switch (tool.type) {
          case "function":
            openaiTools2.push({
              type: "function",
              name: tool.name,
              description: tool.description,
              parameters: tool.parameters,
              strict: strict ? true : void 0
            });
            break;
          case "provider-defined":
            switch (tool.id) {
              case "openai.web_search_preview":
                openaiTools2.push({
                  type: "web_search_preview",
                  search_context_size: tool.args.searchContextSize,
                  user_location: tool.args.userLocation
                });
                break;
              default:
                toolWarnings.push({ type: "unsupported-tool", tool });
                break;
            }
            break;
          default:
            toolWarnings.push({ type: "unsupported-tool", tool });
            break;
        }
      }
      if (toolChoice == null) {
        return { tools: openaiTools2, tool_choice: void 0, toolWarnings };
      }
      const type = toolChoice.type;
      switch (type) {
        case "auto":
        case "none":
        case "required":
          return { tools: openaiTools2, tool_choice: type, toolWarnings };
        case "tool":
          return {
            tools: openaiTools2,
            tool_choice: {
              type: "function",
              name: toolChoice.toolName
            },
            toolWarnings
          };
        default: {
          const _exhaustiveCheck = type;
          throw new import_provider8.UnsupportedFunctionalityError({
            functionality: `Unsupported tool choice type: ${_exhaustiveCheck}`
          });
        }
      }
    }
    var OpenAIResponsesLanguageModel = class {
      constructor(modelId, config) {
        this.specificationVersion = "v1";
        this.defaultObjectGenerationMode = "json";
        this.modelId = modelId;
        this.config = config;
      }
      get provider() {
        return this.config.provider;
      }
      getArgs({
        mode,
        maxTokens,
        temperature,
        stopSequences,
        topP,
        topK,
        presencePenalty,
        frequencyPenalty,
        seed,
        prompt,
        providerMetadata,
        responseFormat
      }) {
        var _a, _b, _c, _d;
        const warnings = [];
        const modelConfig = getResponsesModelConfig(this.modelId);
        const type = mode.type;
        if (topK != null) {
          warnings.push({
            type: "unsupported-setting",
            setting: "topK"
          });
        }
        if (seed != null) {
          warnings.push({
            type: "unsupported-setting",
            setting: "seed"
          });
        }
        if (presencePenalty != null) {
          warnings.push({
            type: "unsupported-setting",
            setting: "presencePenalty"
          });
        }
        if (frequencyPenalty != null) {
          warnings.push({
            type: "unsupported-setting",
            setting: "frequencyPenalty"
          });
        }
        if (stopSequences != null) {
          warnings.push({
            type: "unsupported-setting",
            setting: "stopSequences"
          });
        }
        const { messages, warnings: messageWarnings } = convertToOpenAIResponsesMessages({
          prompt,
          systemMessageMode: modelConfig.systemMessageMode
        });
        warnings.push(...messageWarnings);
        const parsedProviderOptions = providerMetadata != null ? (0, import_provider_utils8.safeValidateTypes)({
          value: providerMetadata,
          schema: providerOptionsSchema
        }) : { success: true, value: void 0 };
        if (!parsedProviderOptions.success) {
          throw new import_provider9.InvalidArgumentError({
            argument: "providerOptions",
            message: "invalid provider options",
            cause: parsedProviderOptions.error
          });
        }
        const openaiOptions = (_a = parsedProviderOptions.value) == null ? void 0 : _a.openai;
        const isStrict = (_b = openaiOptions == null ? void 0 : openaiOptions.strictSchemas) != null ? _b : true;
        const baseArgs = {
          model: this.modelId,
          input: messages,
          temperature,
          top_p: topP,
          max_output_tokens: maxTokens,
          ...(responseFormat == null ? void 0 : responseFormat.type) === "json" && {
            text: {
              format: responseFormat.schema != null ? {
                type: "json_schema",
                strict: isStrict,
                name: (_c = responseFormat.name) != null ? _c : "response",
                description: responseFormat.description,
                schema: responseFormat.schema
              } : { type: "json_object" }
            }
          },
          // provider options:
          metadata: openaiOptions == null ? void 0 : openaiOptions.metadata,
          parallel_tool_calls: openaiOptions == null ? void 0 : openaiOptions.parallelToolCalls,
          previous_response_id: openaiOptions == null ? void 0 : openaiOptions.previousResponseId,
          store: openaiOptions == null ? void 0 : openaiOptions.store,
          user: openaiOptions == null ? void 0 : openaiOptions.user,
          // model-specific settings:
          ...modelConfig.isReasoningModel && (openaiOptions == null ? void 0 : openaiOptions.reasoningEffort) != null && {
            reasoning: { effort: openaiOptions == null ? void 0 : openaiOptions.reasoningEffort }
          },
          ...modelConfig.requiredAutoTruncation && {
            truncation: "auto"
          }
        };
        if (modelConfig.isReasoningModel) {
          if (baseArgs.temperature != null) {
            baseArgs.temperature = void 0;
            warnings.push({
              type: "unsupported-setting",
              setting: "temperature",
              details: "temperature is not supported for reasoning models"
            });
          }
          if (baseArgs.top_p != null) {
            baseArgs.top_p = void 0;
            warnings.push({
              type: "unsupported-setting",
              setting: "topP",
              details: "topP is not supported for reasoning models"
            });
          }
        }
        switch (type) {
          case "regular": {
            const { tools, tool_choice, toolWarnings } = prepareResponsesTools({
              mode,
              strict: isStrict
              // TODO support provider options on tools
            });
            return {
              args: {
                ...baseArgs,
                tools,
                tool_choice
              },
              warnings: [...warnings, ...toolWarnings]
            };
          }
          case "object-json": {
            return {
              args: {
                ...baseArgs,
                text: {
                  format: mode.schema != null ? {
                    type: "json_schema",
                    strict: isStrict,
                    name: (_d = mode.name) != null ? _d : "response",
                    description: mode.description,
                    schema: mode.schema
                  } : { type: "json_object" }
                }
              },
              warnings
            };
          }
          case "object-tool": {
            return {
              args: {
                ...baseArgs,
                tool_choice: { type: "function", name: mode.tool.name },
                tools: [
                  {
                    type: "function",
                    name: mode.tool.name,
                    description: mode.tool.description,
                    parameters: mode.tool.parameters,
                    strict: isStrict
                  }
                ]
              },
              warnings
            };
          }
          default: {
            const _exhaustiveCheck = type;
            throw new Error(`Unsupported type: ${_exhaustiveCheck}`);
          }
        }
      }
      async doGenerate(options) {
        var _a, _b, _c, _d, _e;
        const { args: body, warnings } = this.getArgs(options);
        const {
          responseHeaders,
          value: response,
          rawValue: rawResponse
        } = await (0, import_provider_utils8.postJsonToApi)({
          url: this.config.url({
            path: "/responses",
            modelId: this.modelId
          }),
          headers: (0, import_provider_utils8.combineHeaders)(this.config.headers(), options.headers),
          body,
          failedResponseHandler: openaiFailedResponseHandler,
          successfulResponseHandler: (0, import_provider_utils8.createJsonResponseHandler)(
            import_zod6.z.object({
              id: import_zod6.z.string(),
              created_at: import_zod6.z.number(),
              model: import_zod6.z.string(),
              output: import_zod6.z.array(
                import_zod6.z.discriminatedUnion("type", [
                  import_zod6.z.object({
                    type: import_zod6.z.literal("message"),
                    role: import_zod6.z.literal("assistant"),
                    content: import_zod6.z.array(
                      import_zod6.z.object({
                        type: import_zod6.z.literal("output_text"),
                        text: import_zod6.z.string(),
                        annotations: import_zod6.z.array(
                          import_zod6.z.object({
                            type: import_zod6.z.literal("url_citation"),
                            start_index: import_zod6.z.number(),
                            end_index: import_zod6.z.number(),
                            url: import_zod6.z.string(),
                            title: import_zod6.z.string()
                          })
                        )
                      })
                    )
                  }),
                  import_zod6.z.object({
                    type: import_zod6.z.literal("function_call"),
                    call_id: import_zod6.z.string(),
                    name: import_zod6.z.string(),
                    arguments: import_zod6.z.string()
                  }),
                  import_zod6.z.object({
                    type: import_zod6.z.literal("web_search_call")
                  }),
                  import_zod6.z.object({
                    type: import_zod6.z.literal("computer_call")
                  }),
                  import_zod6.z.object({
                    type: import_zod6.z.literal("reasoning")
                  })
                ])
              ),
              incomplete_details: import_zod6.z.object({ reason: import_zod6.z.string() }).nullable(),
              usage: usageSchema
            })
          ),
          abortSignal: options.abortSignal,
          fetch: this.config.fetch
        });
        const outputTextElements = response.output.filter((output) => output.type === "message").flatMap((output) => output.content).filter((content) => content.type === "output_text");
        const toolCalls = response.output.filter((output) => output.type === "function_call").map((output) => ({
          toolCallType: "function",
          toolCallId: output.call_id,
          toolName: output.name,
          args: output.arguments
        }));
        return {
          text: outputTextElements.map((content) => content.text).join("\n"),
          sources: outputTextElements.flatMap(
            (content) => content.annotations.map((annotation) => {
              var _a2, _b2, _c2;
              return {
                sourceType: "url",
                id: (_c2 = (_b2 = (_a2 = this.config).generateId) == null ? void 0 : _b2.call(_a2)) != null ? _c2 : (0, import_provider_utils8.generateId)(),
                url: annotation.url,
                title: annotation.title
              };
            })
          ),
          finishReason: mapOpenAIResponseFinishReason({
            finishReason: (_a = response.incomplete_details) == null ? void 0 : _a.reason,
            hasToolCalls: toolCalls.length > 0
          }),
          toolCalls: toolCalls.length > 0 ? toolCalls : void 0,
          usage: {
            promptTokens: response.usage.input_tokens,
            completionTokens: response.usage.output_tokens
          },
          rawCall: {
            rawPrompt: void 0,
            rawSettings: {}
          },
          rawResponse: {
            headers: responseHeaders,
            body: rawResponse
          },
          request: {
            body: JSON.stringify(body)
          },
          response: {
            id: response.id,
            timestamp: new Date(response.created_at * 1e3),
            modelId: response.model
          },
          providerMetadata: {
            openai: {
              responseId: response.id,
              cachedPromptTokens: (_c = (_b = response.usage.input_tokens_details) == null ? void 0 : _b.cached_tokens) != null ? _c : null,
              reasoningTokens: (_e = (_d = response.usage.output_tokens_details) == null ? void 0 : _d.reasoning_tokens) != null ? _e : null
            }
          },
          warnings
        };
      }
      async doStream(options) {
        const { args: body, warnings } = this.getArgs(options);
        const { responseHeaders, value: response } = await (0, import_provider_utils8.postJsonToApi)({
          url: this.config.url({
            path: "/responses",
            modelId: this.modelId
          }),
          headers: (0, import_provider_utils8.combineHeaders)(this.config.headers(), options.headers),
          body: {
            ...body,
            stream: true
          },
          failedResponseHandler: openaiFailedResponseHandler,
          successfulResponseHandler: (0, import_provider_utils8.createEventSourceResponseHandler)(
            openaiResponsesChunkSchema
          ),
          abortSignal: options.abortSignal,
          fetch: this.config.fetch
        });
        const self = this;
        let finishReason = "unknown";
        let promptTokens = NaN;
        let completionTokens = NaN;
        let cachedPromptTokens = null;
        let reasoningTokens = null;
        let responseId = null;
        const ongoingToolCalls = {};
        let hasToolCalls = false;
        return {
          stream: response.pipeThrough(
            new TransformStream({
              transform(chunk, controller) {
                var _a, _b, _c, _d, _e, _f, _g, _h;
                if (!chunk.success) {
                  finishReason = "error";
                  controller.enqueue({ type: "error", error: chunk.error });
                  return;
                }
                const value = chunk.value;
                if (isResponseOutputItemAddedChunk(value)) {
                  if (value.item.type === "function_call") {
                    ongoingToolCalls[value.output_index] = {
                      toolName: value.item.name,
                      toolCallId: value.item.call_id
                    };
                    controller.enqueue({
                      type: "tool-call-delta",
                      toolCallType: "function",
                      toolCallId: value.item.call_id,
                      toolName: value.item.name,
                      argsTextDelta: value.item.arguments
                    });
                  }
                } else if (isResponseFunctionCallArgumentsDeltaChunk(value)) {
                  const toolCall = ongoingToolCalls[value.output_index];
                  if (toolCall != null) {
                    controller.enqueue({
                      type: "tool-call-delta",
                      toolCallType: "function",
                      toolCallId: toolCall.toolCallId,
                      toolName: toolCall.toolName,
                      argsTextDelta: value.delta
                    });
                  }
                } else if (isResponseCreatedChunk(value)) {
                  responseId = value.response.id;
                  controller.enqueue({
                    type: "response-metadata",
                    id: value.response.id,
                    timestamp: new Date(value.response.created_at * 1e3),
                    modelId: value.response.model
                  });
                } else if (isTextDeltaChunk(value)) {
                  controller.enqueue({
                    type: "text-delta",
                    textDelta: value.delta
                  });
                } else if (isResponseOutputItemDoneChunk(value) && value.item.type === "function_call") {
                  ongoingToolCalls[value.output_index] = void 0;
                  hasToolCalls = true;
                  controller.enqueue({
                    type: "tool-call",
                    toolCallType: "function",
                    toolCallId: value.item.call_id,
                    toolName: value.item.name,
                    args: value.item.arguments
                  });
                } else if (isResponseFinishedChunk(value)) {
                  finishReason = mapOpenAIResponseFinishReason({
                    finishReason: (_a = value.response.incomplete_details) == null ? void 0 : _a.reason,
                    hasToolCalls
                  });
                  promptTokens = value.response.usage.input_tokens;
                  completionTokens = value.response.usage.output_tokens;
                  cachedPromptTokens = (_c = (_b = value.response.usage.input_tokens_details) == null ? void 0 : _b.cached_tokens) != null ? _c : cachedPromptTokens;
                  reasoningTokens = (_e = (_d = value.response.usage.output_tokens_details) == null ? void 0 : _d.reasoning_tokens) != null ? _e : reasoningTokens;
                } else if (isResponseAnnotationAddedChunk(value)) {
                  controller.enqueue({
                    type: "source",
                    source: {
                      sourceType: "url",
                      id: (_h = (_g = (_f = self.config).generateId) == null ? void 0 : _g.call(_f)) != null ? _h : (0, import_provider_utils8.generateId)(),
                      url: value.annotation.url,
                      title: value.annotation.title
                    }
                  });
                }
              },
              flush(controller) {
                controller.enqueue({
                  type: "finish",
                  finishReason,
                  usage: { promptTokens, completionTokens },
                  ...(cachedPromptTokens != null || reasoningTokens != null) && {
                    providerMetadata: {
                      openai: {
                        responseId,
                        cachedPromptTokens,
                        reasoningTokens
                      }
                    }
                  }
                });
              }
            })
          ),
          rawCall: {
            rawPrompt: void 0,
            rawSettings: {}
          },
          rawResponse: { headers: responseHeaders },
          request: { body: JSON.stringify(body) },
          warnings
        };
      }
    };
    var usageSchema = import_zod6.z.object({
      input_tokens: import_zod6.z.number(),
      input_tokens_details: import_zod6.z.object({ cached_tokens: import_zod6.z.number().nullish() }).nullish(),
      output_tokens: import_zod6.z.number(),
      output_tokens_details: import_zod6.z.object({ reasoning_tokens: import_zod6.z.number().nullish() }).nullish()
    });
    var textDeltaChunkSchema = import_zod6.z.object({
      type: import_zod6.z.literal("response.output_text.delta"),
      delta: import_zod6.z.string()
    });
    var responseFinishedChunkSchema = import_zod6.z.object({
      type: import_zod6.z.enum(["response.completed", "response.incomplete"]),
      response: import_zod6.z.object({
        incomplete_details: import_zod6.z.object({ reason: import_zod6.z.string() }).nullish(),
        usage: usageSchema
      })
    });
    var responseCreatedChunkSchema = import_zod6.z.object({
      type: import_zod6.z.literal("response.created"),
      response: import_zod6.z.object({
        id: import_zod6.z.string(),
        created_at: import_zod6.z.number(),
        model: import_zod6.z.string()
      })
    });
    var responseOutputItemDoneSchema = import_zod6.z.object({
      type: import_zod6.z.literal("response.output_item.done"),
      output_index: import_zod6.z.number(),
      item: import_zod6.z.discriminatedUnion("type", [
        import_zod6.z.object({
          type: import_zod6.z.literal("message")
        }),
        import_zod6.z.object({
          type: import_zod6.z.literal("function_call"),
          id: import_zod6.z.string(),
          call_id: import_zod6.z.string(),
          name: import_zod6.z.string(),
          arguments: import_zod6.z.string(),
          status: import_zod6.z.literal("completed")
        })
      ])
    });
    var responseFunctionCallArgumentsDeltaSchema = import_zod6.z.object({
      type: import_zod6.z.literal("response.function_call_arguments.delta"),
      item_id: import_zod6.z.string(),
      output_index: import_zod6.z.number(),
      delta: import_zod6.z.string()
    });
    var responseOutputItemAddedSchema = import_zod6.z.object({
      type: import_zod6.z.literal("response.output_item.added"),
      output_index: import_zod6.z.number(),
      item: import_zod6.z.discriminatedUnion("type", [
        import_zod6.z.object({
          type: import_zod6.z.literal("message")
        }),
        import_zod6.z.object({
          type: import_zod6.z.literal("function_call"),
          id: import_zod6.z.string(),
          call_id: import_zod6.z.string(),
          name: import_zod6.z.string(),
          arguments: import_zod6.z.string()
        })
      ])
    });
    var responseAnnotationAddedSchema = import_zod6.z.object({
      type: import_zod6.z.literal("response.output_text.annotation.added"),
      annotation: import_zod6.z.object({
        type: import_zod6.z.literal("url_citation"),
        url: import_zod6.z.string(),
        title: import_zod6.z.string()
      })
    });
    var openaiResponsesChunkSchema = import_zod6.z.union([
      textDeltaChunkSchema,
      responseFinishedChunkSchema,
      responseCreatedChunkSchema,
      responseOutputItemDoneSchema,
      responseFunctionCallArgumentsDeltaSchema,
      responseOutputItemAddedSchema,
      responseAnnotationAddedSchema,
      import_zod6.z.object({ type: import_zod6.z.string() }).passthrough()
      // fallback for unknown chunks
    ]);
    function isTextDeltaChunk(chunk) {
      return chunk.type === "response.output_text.delta";
    }
    function isResponseOutputItemDoneChunk(chunk) {
      return chunk.type === "response.output_item.done";
    }
    function isResponseFinishedChunk(chunk) {
      return chunk.type === "response.completed" || chunk.type === "response.incomplete";
    }
    function isResponseCreatedChunk(chunk) {
      return chunk.type === "response.created";
    }
    function isResponseFunctionCallArgumentsDeltaChunk(chunk) {
      return chunk.type === "response.function_call_arguments.delta";
    }
    function isResponseOutputItemAddedChunk(chunk) {
      return chunk.type === "response.output_item.added";
    }
    function isResponseAnnotationAddedChunk(chunk) {
      return chunk.type === "response.output_text.annotation.added";
    }
    var providerOptionsSchema = import_zod6.z.object({
      openai: import_zod6.z.object({
        metadata: import_zod6.z.any().nullish(),
        parallelToolCalls: import_zod6.z.boolean().nullish(),
        previousResponseId: import_zod6.z.string().nullish(),
        store: import_zod6.z.boolean().nullish(),
        user: import_zod6.z.string().nullish(),
        reasoningEffort: import_zod6.z.string().nullish(),
        strictSchemas: import_zod6.z.boolean().nullish()
      }).nullish()
    });
    function getResponsesModelConfig(modelId) {
      if (modelId.startsWith("o")) {
        if (modelId.startsWith("o1-mini") || modelId.startsWith("o1-preview")) {
          return {
            isReasoningModel: true,
            systemMessageMode: "remove",
            requiredAutoTruncation: false
          };
        }
        return {
          isReasoningModel: true,
          systemMessageMode: "developer",
          requiredAutoTruncation: false
        };
      }
      return {
        isReasoningModel: false,
        systemMessageMode: "system",
        requiredAutoTruncation: false
      };
    }
    var import_zod7 = require_lib();
    var WebSearchPreviewParameters = import_zod7.z.object({});
    function webSearchPreviewTool({
      searchContextSize,
      userLocation
    } = {}) {
      return {
        type: "provider-defined",
        id: "openai.web_search_preview",
        args: {
          searchContextSize,
          userLocation
        },
        parameters: WebSearchPreviewParameters
      };
    }
    var openaiTools = {
      webSearchPreview: webSearchPreviewTool
    };
    function createOpenAI(options = {}) {
      var _a, _b, _c;
      const baseURL = (_a = (0, import_provider_utils9.withoutTrailingSlash)(options.baseURL)) != null ? _a : "https://api.openai.com/v1";
      const compatibility = (_b = options.compatibility) != null ? _b : "compatible";
      const providerName = (_c = options.name) != null ? _c : "openai";
      const getHeaders = () => ({
        Authorization: `Bearer ${(0, import_provider_utils9.loadApiKey)({
          apiKey: options.apiKey,
          environmentVariableName: "OPENAI_API_KEY",
          description: "OpenAI"
        })}`,
        "OpenAI-Organization": options.organization,
        "OpenAI-Project": options.project,
        ...options.headers
      });
      const createChatModel = (modelId, settings = {}) => new OpenAIChatLanguageModel(modelId, settings, {
        provider: `${providerName}.chat`,
        url: ({ path: path5 }) => `${baseURL}${path5}`,
        headers: getHeaders,
        compatibility,
        fetch: options.fetch
      });
      const createCompletionModel = (modelId, settings = {}) => new OpenAICompletionLanguageModel(modelId, settings, {
        provider: `${providerName}.completion`,
        url: ({ path: path5 }) => `${baseURL}${path5}`,
        headers: getHeaders,
        compatibility,
        fetch: options.fetch
      });
      const createEmbeddingModel = (modelId, settings = {}) => new OpenAIEmbeddingModel(modelId, settings, {
        provider: `${providerName}.embedding`,
        url: ({ path: path5 }) => `${baseURL}${path5}`,
        headers: getHeaders,
        fetch: options.fetch
      });
      const createImageModel = (modelId, settings = {}) => new OpenAIImageModel(modelId, settings, {
        provider: `${providerName}.image`,
        url: ({ path: path5 }) => `${baseURL}${path5}`,
        headers: getHeaders,
        fetch: options.fetch
      });
      const createLanguageModel = (modelId, settings) => {
        if (new.target) {
          throw new Error(
            "The OpenAI model function cannot be called with the new keyword."
          );
        }
        if (modelId === "gpt-3.5-turbo-instruct") {
          return createCompletionModel(
            modelId,
            settings
          );
        }
        return createChatModel(modelId, settings);
      };
      const createResponsesModel = (modelId) => {
        return new OpenAIResponsesLanguageModel(modelId, {
          provider: `${providerName}.responses`,
          url: ({ path: path5 }) => `${baseURL}${path5}`,
          headers: getHeaders,
          fetch: options.fetch
        });
      };
      const provider = function(modelId, settings) {
        return createLanguageModel(modelId, settings);
      };
      provider.languageModel = createLanguageModel;
      provider.chat = createChatModel;
      provider.completion = createCompletionModel;
      provider.responses = createResponsesModel;
      provider.embedding = createEmbeddingModel;
      provider.textEmbedding = createEmbeddingModel;
      provider.textEmbeddingModel = createEmbeddingModel;
      provider.image = createImageModel;
      provider.imageModel = createImageModel;
      provider.tools = openaiTools;
      return provider;
    }
    var openai = createOpenAI({
      compatibility: "strict"
      // strict for OpenAI API
    });
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/Options.js
var require_Options = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/Options.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getDefaultOptions = exports2.defaultOptions = exports2.jsonDescription = exports2.ignoreOverride = void 0;
    exports2.ignoreOverride = Symbol("Let zodToJsonSchema decide on which parser to use");
    var jsonDescription = (jsonSchema2, def) => {
      if (def.description) {
        try {
          return {
            ...jsonSchema2,
            ...JSON.parse(def.description)
          };
        } catch {
        }
      }
      return jsonSchema2;
    };
    exports2.jsonDescription = jsonDescription;
    exports2.defaultOptions = {
      name: void 0,
      $refStrategy: "root",
      basePath: ["#"],
      effectStrategy: "input",
      pipeStrategy: "all",
      dateStrategy: "format:date-time",
      mapStrategy: "entries",
      removeAdditionalStrategy: "passthrough",
      allowedAdditionalProperties: true,
      rejectedAdditionalProperties: false,
      definitionPath: "definitions",
      target: "jsonSchema7",
      strictUnions: false,
      definitions: {},
      errorMessages: false,
      markdownDescription: false,
      patternStrategy: "escape",
      applyRegexFlags: false,
      emailStrategy: "format:email",
      base64Strategy: "contentEncoding:base64",
      nameStrategy: "ref"
    };
    var getDefaultOptions = (options) => typeof options === "string" ? {
      ...exports2.defaultOptions,
      name: options
    } : {
      ...exports2.defaultOptions,
      ...options
    };
    exports2.getDefaultOptions = getDefaultOptions;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/Refs.js
var require_Refs = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/Refs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRefs = void 0;
    var Options_js_1 = require_Options();
    var getRefs = (options) => {
      const _options = (0, Options_js_1.getDefaultOptions)(options);
      const currentPath = _options.name !== void 0 ? [..._options.basePath, _options.definitionPath, _options.name] : _options.basePath;
      return {
        ..._options,
        currentPath,
        propertyPath: void 0,
        seen: new Map(Object.entries(_options.definitions).map(([name, def]) => [
          def._def,
          {
            def: def._def,
            path: [..._options.basePath, _options.definitionPath, name],
            // Resolution of references will be forced even though seen, so it's ok that the schema is undefined here for now.
            jsonSchema: void 0
          }
        ]))
      };
    };
    exports2.getRefs = getRefs;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/errorMessages.js
var require_errorMessages = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/errorMessages.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setResponseValueAndErrors = exports2.addErrorMessage = void 0;
    function addErrorMessage(res, key, errorMessage, refs) {
      if (!refs?.errorMessages)
        return;
      if (errorMessage) {
        res.errorMessage = {
          ...res.errorMessage,
          [key]: errorMessage
        };
      }
    }
    exports2.addErrorMessage = addErrorMessage;
    function setResponseValueAndErrors(res, key, value, errorMessage, refs) {
      res[key] = value;
      addErrorMessage(res, key, errorMessage, refs);
    }
    exports2.setResponseValueAndErrors = setResponseValueAndErrors;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/any.js
var require_any = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/any.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseAnyDef = void 0;
    function parseAnyDef() {
      return {};
    }
    exports2.parseAnyDef = parseAnyDef;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/array.js
var require_array = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/array.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseArrayDef = void 0;
    var zod_1 = require_lib();
    var errorMessages_js_1 = require_errorMessages();
    var parseDef_js_1 = require_parseDef();
    function parseArrayDef(def, refs) {
      const res = {
        type: "array"
      };
      if (def.type?._def && def.type?._def?.typeName !== zod_1.ZodFirstPartyTypeKind.ZodAny) {
        res.items = (0, parseDef_js_1.parseDef)(def.type._def, {
          ...refs,
          currentPath: [...refs.currentPath, "items"]
        });
      }
      if (def.minLength) {
        (0, errorMessages_js_1.setResponseValueAndErrors)(res, "minItems", def.minLength.value, def.minLength.message, refs);
      }
      if (def.maxLength) {
        (0, errorMessages_js_1.setResponseValueAndErrors)(res, "maxItems", def.maxLength.value, def.maxLength.message, refs);
      }
      if (def.exactLength) {
        (0, errorMessages_js_1.setResponseValueAndErrors)(res, "minItems", def.exactLength.value, def.exactLength.message, refs);
        (0, errorMessages_js_1.setResponseValueAndErrors)(res, "maxItems", def.exactLength.value, def.exactLength.message, refs);
      }
      return res;
    }
    exports2.parseArrayDef = parseArrayDef;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/bigint.js
var require_bigint = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/bigint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseBigintDef = void 0;
    var errorMessages_js_1 = require_errorMessages();
    function parseBigintDef(def, refs) {
      const res = {
        type: "integer",
        format: "int64"
      };
      if (!def.checks)
        return res;
      for (const check of def.checks) {
        switch (check.kind) {
          case "min":
            if (refs.target === "jsonSchema7") {
              if (check.inclusive) {
                (0, errorMessages_js_1.setResponseValueAndErrors)(res, "minimum", check.value, check.message, refs);
              } else {
                (0, errorMessages_js_1.setResponseValueAndErrors)(res, "exclusiveMinimum", check.value, check.message, refs);
              }
            } else {
              if (!check.inclusive) {
                res.exclusiveMinimum = true;
              }
              (0, errorMessages_js_1.setResponseValueAndErrors)(res, "minimum", check.value, check.message, refs);
            }
            break;
          case "max":
            if (refs.target === "jsonSchema7") {
              if (check.inclusive) {
                (0, errorMessages_js_1.setResponseValueAndErrors)(res, "maximum", check.value, check.message, refs);
              } else {
                (0, errorMessages_js_1.setResponseValueAndErrors)(res, "exclusiveMaximum", check.value, check.message, refs);
              }
            } else {
              if (!check.inclusive) {
                res.exclusiveMaximum = true;
              }
              (0, errorMessages_js_1.setResponseValueAndErrors)(res, "maximum", check.value, check.message, refs);
            }
            break;
          case "multipleOf":
            (0, errorMessages_js_1.setResponseValueAndErrors)(res, "multipleOf", check.value, check.message, refs);
            break;
        }
      }
      return res;
    }
    exports2.parseBigintDef = parseBigintDef;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/boolean.js
var require_boolean = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/boolean.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseBooleanDef = void 0;
    function parseBooleanDef() {
      return {
        type: "boolean"
      };
    }
    exports2.parseBooleanDef = parseBooleanDef;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/branded.js
var require_branded = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/branded.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseBrandedDef = void 0;
    var parseDef_js_1 = require_parseDef();
    function parseBrandedDef(_def, refs) {
      return (0, parseDef_js_1.parseDef)(_def.type._def, refs);
    }
    exports2.parseBrandedDef = parseBrandedDef;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/catch.js
var require_catch = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/catch.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseCatchDef = void 0;
    var parseDef_js_1 = require_parseDef();
    var parseCatchDef = (def, refs) => {
      return (0, parseDef_js_1.parseDef)(def.innerType._def, refs);
    };
    exports2.parseCatchDef = parseCatchDef;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/date.js
var require_date = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/date.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseDateDef = void 0;
    var errorMessages_js_1 = require_errorMessages();
    function parseDateDef(def, refs, overrideDateStrategy) {
      const strategy = overrideDateStrategy ?? refs.dateStrategy;
      if (Array.isArray(strategy)) {
        return {
          anyOf: strategy.map((item, i) => parseDateDef(def, refs, item))
        };
      }
      switch (strategy) {
        case "string":
        case "format:date-time":
          return {
            type: "string",
            format: "date-time"
          };
        case "format:date":
          return {
            type: "string",
            format: "date"
          };
        case "integer":
          return integerDateParser(def, refs);
      }
    }
    exports2.parseDateDef = parseDateDef;
    var integerDateParser = (def, refs) => {
      const res = {
        type: "integer",
        format: "unix-time"
      };
      if (refs.target === "openApi3") {
        return res;
      }
      for (const check of def.checks) {
        switch (check.kind) {
          case "min":
            (0, errorMessages_js_1.setResponseValueAndErrors)(
              res,
              "minimum",
              check.value,
              // This is in milliseconds
              check.message,
              refs
            );
            break;
          case "max":
            (0, errorMessages_js_1.setResponseValueAndErrors)(
              res,
              "maximum",
              check.value,
              // This is in milliseconds
              check.message,
              refs
            );
            break;
        }
      }
      return res;
    };
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/default.js
var require_default = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/default.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseDefaultDef = void 0;
    var parseDef_js_1 = require_parseDef();
    function parseDefaultDef(_def, refs) {
      return {
        ...(0, parseDef_js_1.parseDef)(_def.innerType._def, refs),
        default: _def.defaultValue()
      };
    }
    exports2.parseDefaultDef = parseDefaultDef;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/effects.js
var require_effects = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/effects.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseEffectsDef = void 0;
    var parseDef_js_1 = require_parseDef();
    function parseEffectsDef(_def, refs) {
      return refs.effectStrategy === "input" ? (0, parseDef_js_1.parseDef)(_def.schema._def, refs) : {};
    }
    exports2.parseEffectsDef = parseEffectsDef;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/enum.js
var require_enum = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/enum.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseEnumDef = void 0;
    function parseEnumDef(def) {
      return {
        type: "string",
        enum: Array.from(def.values)
      };
    }
    exports2.parseEnumDef = parseEnumDef;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/intersection.js
var require_intersection = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/intersection.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseIntersectionDef = void 0;
    var parseDef_js_1 = require_parseDef();
    var isJsonSchema7AllOfType = (type) => {
      if ("type" in type && type.type === "string")
        return false;
      return "allOf" in type;
    };
    function parseIntersectionDef(def, refs) {
      const allOf = [
        (0, parseDef_js_1.parseDef)(def.left._def, {
          ...refs,
          currentPath: [...refs.currentPath, "allOf", "0"]
        }),
        (0, parseDef_js_1.parseDef)(def.right._def, {
          ...refs,
          currentPath: [...refs.currentPath, "allOf", "1"]
        })
      ].filter((x) => !!x);
      let unevaluatedProperties = refs.target === "jsonSchema2019-09" ? { unevaluatedProperties: false } : void 0;
      const mergedAllOf = [];
      allOf.forEach((schema) => {
        if (isJsonSchema7AllOfType(schema)) {
          mergedAllOf.push(...schema.allOf);
          if (schema.unevaluatedProperties === void 0) {
            unevaluatedProperties = void 0;
          }
        } else {
          let nestedSchema = schema;
          if ("additionalProperties" in schema && schema.additionalProperties === false) {
            const { additionalProperties, ...rest } = schema;
            nestedSchema = rest;
          } else {
            unevaluatedProperties = void 0;
          }
          mergedAllOf.push(nestedSchema);
        }
      });
      return mergedAllOf.length ? {
        allOf: mergedAllOf,
        ...unevaluatedProperties
      } : void 0;
    }
    exports2.parseIntersectionDef = parseIntersectionDef;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/literal.js
var require_literal = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/literal.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseLiteralDef = void 0;
    function parseLiteralDef(def, refs) {
      const parsedType = typeof def.value;
      if (parsedType !== "bigint" && parsedType !== "number" && parsedType !== "boolean" && parsedType !== "string") {
        return {
          type: Array.isArray(def.value) ? "array" : "object"
        };
      }
      if (refs.target === "openApi3") {
        return {
          type: parsedType === "bigint" ? "integer" : parsedType,
          enum: [def.value]
        };
      }
      return {
        type: parsedType === "bigint" ? "integer" : parsedType,
        const: def.value
      };
    }
    exports2.parseLiteralDef = parseLiteralDef;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/string.js
var require_string = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/string.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseStringDef = exports2.zodPatterns = void 0;
    var errorMessages_js_1 = require_errorMessages();
    var emojiRegex2 = void 0;
    exports2.zodPatterns = {
      /**
       * `c` was changed to `[cC]` to replicate /i flag
       */
      cuid: /^[cC][^\s-]{8,}$/,
      cuid2: /^[0-9a-z]+$/,
      ulid: /^[0-9A-HJKMNP-TV-Z]{26}$/,
      /**
       * `a-z` was added to replicate /i flag
       */
      email: /^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,
      /**
       * Constructed a valid Unicode RegExp
       *
       * Lazily instantiate since this type of regex isn't supported
       * in all envs (e.g. React Native).
       *
       * See:
       * https://github.com/colinhacks/zod/issues/2433
       * Fix in Zod:
       * https://github.com/colinhacks/zod/commit/9340fd51e48576a75adc919bff65dbc4a5d4c99b
       */
      emoji: () => {
        if (emojiRegex2 === void 0) {
          emojiRegex2 = RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$", "u");
        }
        return emojiRegex2;
      },
      /**
       * Unused
       */
      uuid: /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/,
      /**
       * Unused
       */
      ipv4: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,
      ipv4Cidr: /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/,
      /**
       * Unused
       */
      ipv6: /^(([a-f0-9]{1,4}:){7}|::([a-f0-9]{1,4}:){0,6}|([a-f0-9]{1,4}:){1}:([a-f0-9]{1,4}:){0,5}|([a-f0-9]{1,4}:){2}:([a-f0-9]{1,4}:){0,4}|([a-f0-9]{1,4}:){3}:([a-f0-9]{1,4}:){0,3}|([a-f0-9]{1,4}:){4}:([a-f0-9]{1,4}:){0,2}|([a-f0-9]{1,4}:){5}:([a-f0-9]{1,4}:){0,1})([a-f0-9]{1,4}|(((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2}))\.){3}((25[0-5])|(2[0-4][0-9])|(1[0-9]{2})|([0-9]{1,2})))$/,
      ipv6Cidr: /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,
      base64: /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,
      base64url: /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,
      nanoid: /^[a-zA-Z0-9_-]{21}$/,
      jwt: /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/
    };
    function parseStringDef(def, refs) {
      const res = {
        type: "string"
      };
      if (def.checks) {
        for (const check of def.checks) {
          switch (check.kind) {
            case "min":
              (0, errorMessages_js_1.setResponseValueAndErrors)(res, "minLength", typeof res.minLength === "number" ? Math.max(res.minLength, check.value) : check.value, check.message, refs);
              break;
            case "max":
              (0, errorMessages_js_1.setResponseValueAndErrors)(res, "maxLength", typeof res.maxLength === "number" ? Math.min(res.maxLength, check.value) : check.value, check.message, refs);
              break;
            case "email":
              switch (refs.emailStrategy) {
                case "format:email":
                  addFormat(res, "email", check.message, refs);
                  break;
                case "format:idn-email":
                  addFormat(res, "idn-email", check.message, refs);
                  break;
                case "pattern:zod":
                  addPattern(res, exports2.zodPatterns.email, check.message, refs);
                  break;
              }
              break;
            case "url":
              addFormat(res, "uri", check.message, refs);
              break;
            case "uuid":
              addFormat(res, "uuid", check.message, refs);
              break;
            case "regex":
              addPattern(res, check.regex, check.message, refs);
              break;
            case "cuid":
              addPattern(res, exports2.zodPatterns.cuid, check.message, refs);
              break;
            case "cuid2":
              addPattern(res, exports2.zodPatterns.cuid2, check.message, refs);
              break;
            case "startsWith":
              addPattern(res, RegExp(`^${escapeLiteralCheckValue(check.value, refs)}`), check.message, refs);
              break;
            case "endsWith":
              addPattern(res, RegExp(`${escapeLiteralCheckValue(check.value, refs)}$`), check.message, refs);
              break;
            case "datetime":
              addFormat(res, "date-time", check.message, refs);
              break;
            case "date":
              addFormat(res, "date", check.message, refs);
              break;
            case "time":
              addFormat(res, "time", check.message, refs);
              break;
            case "duration":
              addFormat(res, "duration", check.message, refs);
              break;
            case "length":
              (0, errorMessages_js_1.setResponseValueAndErrors)(res, "minLength", typeof res.minLength === "number" ? Math.max(res.minLength, check.value) : check.value, check.message, refs);
              (0, errorMessages_js_1.setResponseValueAndErrors)(res, "maxLength", typeof res.maxLength === "number" ? Math.min(res.maxLength, check.value) : check.value, check.message, refs);
              break;
            case "includes": {
              addPattern(res, RegExp(escapeLiteralCheckValue(check.value, refs)), check.message, refs);
              break;
            }
            case "ip": {
              if (check.version !== "v6") {
                addFormat(res, "ipv4", check.message, refs);
              }
              if (check.version !== "v4") {
                addFormat(res, "ipv6", check.message, refs);
              }
              break;
            }
            case "base64url":
              addPattern(res, exports2.zodPatterns.base64url, check.message, refs);
              break;
            case "jwt":
              addPattern(res, exports2.zodPatterns.jwt, check.message, refs);
              break;
            case "cidr": {
              if (check.version !== "v6") {
                addPattern(res, exports2.zodPatterns.ipv4Cidr, check.message, refs);
              }
              if (check.version !== "v4") {
                addPattern(res, exports2.zodPatterns.ipv6Cidr, check.message, refs);
              }
              break;
            }
            case "emoji":
              addPattern(res, exports2.zodPatterns.emoji(), check.message, refs);
              break;
            case "ulid": {
              addPattern(res, exports2.zodPatterns.ulid, check.message, refs);
              break;
            }
            case "base64": {
              switch (refs.base64Strategy) {
                case "format:binary": {
                  addFormat(res, "binary", check.message, refs);
                  break;
                }
                case "contentEncoding:base64": {
                  (0, errorMessages_js_1.setResponseValueAndErrors)(res, "contentEncoding", "base64", check.message, refs);
                  break;
                }
                case "pattern:zod": {
                  addPattern(res, exports2.zodPatterns.base64, check.message, refs);
                  break;
                }
              }
              break;
            }
            case "nanoid": {
              addPattern(res, exports2.zodPatterns.nanoid, check.message, refs);
            }
            case "toLowerCase":
            case "toUpperCase":
            case "trim":
              break;
            default:
              /* @__PURE__ */ ((_) => {
              })(check);
          }
        }
      }
      return res;
    }
    exports2.parseStringDef = parseStringDef;
    function escapeLiteralCheckValue(literal, refs) {
      return refs.patternStrategy === "escape" ? escapeNonAlphaNumeric(literal) : literal;
    }
    var ALPHA_NUMERIC = new Set("ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz0123456789");
    function escapeNonAlphaNumeric(source) {
      let result = "";
      for (let i = 0; i < source.length; i++) {
        if (!ALPHA_NUMERIC.has(source[i])) {
          result += "\\";
        }
        result += source[i];
      }
      return result;
    }
    function addFormat(schema, value, message, refs) {
      if (schema.format || schema.anyOf?.some((x) => x.format)) {
        if (!schema.anyOf) {
          schema.anyOf = [];
        }
        if (schema.format) {
          schema.anyOf.push({
            format: schema.format,
            ...schema.errorMessage && refs.errorMessages && {
              errorMessage: { format: schema.errorMessage.format }
            }
          });
          delete schema.format;
          if (schema.errorMessage) {
            delete schema.errorMessage.format;
            if (Object.keys(schema.errorMessage).length === 0) {
              delete schema.errorMessage;
            }
          }
        }
        schema.anyOf.push({
          format: value,
          ...message && refs.errorMessages && { errorMessage: { format: message } }
        });
      } else {
        (0, errorMessages_js_1.setResponseValueAndErrors)(schema, "format", value, message, refs);
      }
    }
    function addPattern(schema, regex, message, refs) {
      if (schema.pattern || schema.allOf?.some((x) => x.pattern)) {
        if (!schema.allOf) {
          schema.allOf = [];
        }
        if (schema.pattern) {
          schema.allOf.push({
            pattern: schema.pattern,
            ...schema.errorMessage && refs.errorMessages && {
              errorMessage: { pattern: schema.errorMessage.pattern }
            }
          });
          delete schema.pattern;
          if (schema.errorMessage) {
            delete schema.errorMessage.pattern;
            if (Object.keys(schema.errorMessage).length === 0) {
              delete schema.errorMessage;
            }
          }
        }
        schema.allOf.push({
          pattern: stringifyRegExpWithFlags(regex, refs),
          ...message && refs.errorMessages && { errorMessage: { pattern: message } }
        });
      } else {
        (0, errorMessages_js_1.setResponseValueAndErrors)(schema, "pattern", stringifyRegExpWithFlags(regex, refs), message, refs);
      }
    }
    function stringifyRegExpWithFlags(regex, refs) {
      if (!refs.applyRegexFlags || !regex.flags) {
        return regex.source;
      }
      const flags = {
        i: regex.flags.includes("i"),
        m: regex.flags.includes("m"),
        s: regex.flags.includes("s")
        // `.` matches newlines
      };
      const source = flags.i ? regex.source.toLowerCase() : regex.source;
      let pattern = "";
      let isEscaped = false;
      let inCharGroup = false;
      let inCharRange = false;
      for (let i = 0; i < source.length; i++) {
        if (isEscaped) {
          pattern += source[i];
          isEscaped = false;
          continue;
        }
        if (flags.i) {
          if (inCharGroup) {
            if (source[i].match(/[a-z]/)) {
              if (inCharRange) {
                pattern += source[i];
                pattern += `${source[i - 2]}-${source[i]}`.toUpperCase();
                inCharRange = false;
              } else if (source[i + 1] === "-" && source[i + 2]?.match(/[a-z]/)) {
                pattern += source[i];
                inCharRange = true;
              } else {
                pattern += `${source[i]}${source[i].toUpperCase()}`;
              }
              continue;
            }
          } else if (source[i].match(/[a-z]/)) {
            pattern += `[${source[i]}${source[i].toUpperCase()}]`;
            continue;
          }
        }
        if (flags.m) {
          if (source[i] === "^") {
            pattern += `(^|(?<=[\r
]))`;
            continue;
          } else if (source[i] === "$") {
            pattern += `($|(?=[\r
]))`;
            continue;
          }
        }
        if (flags.s && source[i] === ".") {
          pattern += inCharGroup ? `${source[i]}\r
` : `[${source[i]}\r
]`;
          continue;
        }
        pattern += source[i];
        if (source[i] === "\\") {
          isEscaped = true;
        } else if (inCharGroup && source[i] === "]") {
          inCharGroup = false;
        } else if (!inCharGroup && source[i] === "[") {
          inCharGroup = true;
        }
      }
      try {
        new RegExp(pattern);
      } catch {
        console.warn(`Could not convert regex pattern at ${refs.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`);
        return regex.source;
      }
      return pattern;
    }
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/record.js
var require_record = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/record.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseRecordDef = void 0;
    var zod_1 = require_lib();
    var parseDef_js_1 = require_parseDef();
    var string_js_1 = require_string();
    var branded_js_1 = require_branded();
    function parseRecordDef(def, refs) {
      if (refs.target === "openAi") {
        console.warn("Warning: OpenAI may not support records in schemas! Try an array of key-value pairs instead.");
      }
      if (refs.target === "openApi3" && def.keyType?._def.typeName === zod_1.ZodFirstPartyTypeKind.ZodEnum) {
        return {
          type: "object",
          required: def.keyType._def.values,
          properties: def.keyType._def.values.reduce((acc, key) => ({
            ...acc,
            [key]: (0, parseDef_js_1.parseDef)(def.valueType._def, {
              ...refs,
              currentPath: [...refs.currentPath, "properties", key]
            }) ?? {}
          }), {}),
          additionalProperties: refs.rejectedAdditionalProperties
        };
      }
      const schema = {
        type: "object",
        additionalProperties: (0, parseDef_js_1.parseDef)(def.valueType._def, {
          ...refs,
          currentPath: [...refs.currentPath, "additionalProperties"]
        }) ?? refs.allowedAdditionalProperties
      };
      if (refs.target === "openApi3") {
        return schema;
      }
      if (def.keyType?._def.typeName === zod_1.ZodFirstPartyTypeKind.ZodString && def.keyType._def.checks?.length) {
        const { type, ...keyType } = (0, string_js_1.parseStringDef)(def.keyType._def, refs);
        return {
          ...schema,
          propertyNames: keyType
        };
      } else if (def.keyType?._def.typeName === zod_1.ZodFirstPartyTypeKind.ZodEnum) {
        return {
          ...schema,
          propertyNames: {
            enum: def.keyType._def.values
          }
        };
      } else if (def.keyType?._def.typeName === zod_1.ZodFirstPartyTypeKind.ZodBranded && def.keyType._def.type._def.typeName === zod_1.ZodFirstPartyTypeKind.ZodString && def.keyType._def.type._def.checks?.length) {
        const { type, ...keyType } = (0, branded_js_1.parseBrandedDef)(def.keyType._def, refs);
        return {
          ...schema,
          propertyNames: keyType
        };
      }
      return schema;
    }
    exports2.parseRecordDef = parseRecordDef;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/map.js
var require_map = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/map.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseMapDef = void 0;
    var parseDef_js_1 = require_parseDef();
    var record_js_1 = require_record();
    function parseMapDef(def, refs) {
      if (refs.mapStrategy === "record") {
        return (0, record_js_1.parseRecordDef)(def, refs);
      }
      const keys = (0, parseDef_js_1.parseDef)(def.keyType._def, {
        ...refs,
        currentPath: [...refs.currentPath, "items", "items", "0"]
      }) || {};
      const values = (0, parseDef_js_1.parseDef)(def.valueType._def, {
        ...refs,
        currentPath: [...refs.currentPath, "items", "items", "1"]
      }) || {};
      return {
        type: "array",
        maxItems: 125,
        items: {
          type: "array",
          items: [keys, values],
          minItems: 2,
          maxItems: 2
        }
      };
    }
    exports2.parseMapDef = parseMapDef;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/nativeEnum.js
var require_nativeEnum = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/nativeEnum.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseNativeEnumDef = void 0;
    function parseNativeEnumDef(def) {
      const object = def.values;
      const actualKeys = Object.keys(def.values).filter((key) => {
        return typeof object[object[key]] !== "number";
      });
      const actualValues = actualKeys.map((key) => object[key]);
      const parsedTypes = Array.from(new Set(actualValues.map((values) => typeof values)));
      return {
        type: parsedTypes.length === 1 ? parsedTypes[0] === "string" ? "string" : "number" : ["string", "number"],
        enum: actualValues
      };
    }
    exports2.parseNativeEnumDef = parseNativeEnumDef;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/never.js
var require_never = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/never.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseNeverDef = void 0;
    function parseNeverDef() {
      return {
        not: {}
      };
    }
    exports2.parseNeverDef = parseNeverDef;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/null.js
var require_null = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/null.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseNullDef = void 0;
    function parseNullDef(refs) {
      return refs.target === "openApi3" ? {
        enum: ["null"],
        nullable: true
      } : {
        type: "null"
      };
    }
    exports2.parseNullDef = parseNullDef;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/union.js
var require_union = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/union.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseUnionDef = exports2.primitiveMappings = void 0;
    var parseDef_js_1 = require_parseDef();
    exports2.primitiveMappings = {
      ZodString: "string",
      ZodNumber: "number",
      ZodBigInt: "integer",
      ZodBoolean: "boolean",
      ZodNull: "null"
    };
    function parseUnionDef(def, refs) {
      if (refs.target === "openApi3")
        return asAnyOf(def, refs);
      const options = def.options instanceof Map ? Array.from(def.options.values()) : def.options;
      if (options.every((x) => x._def.typeName in exports2.primitiveMappings && (!x._def.checks || !x._def.checks.length))) {
        const types = options.reduce((types2, x) => {
          const type = exports2.primitiveMappings[x._def.typeName];
          return type && !types2.includes(type) ? [...types2, type] : types2;
        }, []);
        return {
          type: types.length > 1 ? types : types[0]
        };
      } else if (options.every((x) => x._def.typeName === "ZodLiteral" && !x.description)) {
        const types = options.reduce((acc, x) => {
          const type = typeof x._def.value;
          switch (type) {
            case "string":
            case "number":
            case "boolean":
              return [...acc, type];
            case "bigint":
              return [...acc, "integer"];
            case "object":
              if (x._def.value === null)
                return [...acc, "null"];
            case "symbol":
            case "undefined":
            case "function":
            default:
              return acc;
          }
        }, []);
        if (types.length === options.length) {
          const uniqueTypes = types.filter((x, i, a) => a.indexOf(x) === i);
          return {
            type: uniqueTypes.length > 1 ? uniqueTypes : uniqueTypes[0],
            enum: options.reduce((acc, x) => {
              return acc.includes(x._def.value) ? acc : [...acc, x._def.value];
            }, [])
          };
        }
      } else if (options.every((x) => x._def.typeName === "ZodEnum")) {
        return {
          type: "string",
          enum: options.reduce((acc, x) => [
            ...acc,
            ...x._def.values.filter((x2) => !acc.includes(x2))
          ], [])
        };
      }
      return asAnyOf(def, refs);
    }
    exports2.parseUnionDef = parseUnionDef;
    var asAnyOf = (def, refs) => {
      const anyOf = (def.options instanceof Map ? Array.from(def.options.values()) : def.options).map((x, i) => (0, parseDef_js_1.parseDef)(x._def, {
        ...refs,
        currentPath: [...refs.currentPath, "anyOf", `${i}`]
      })).filter((x) => !!x && (!refs.strictUnions || typeof x === "object" && Object.keys(x).length > 0));
      return anyOf.length ? { anyOf } : void 0;
    };
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/nullable.js
var require_nullable = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/nullable.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseNullableDef = void 0;
    var parseDef_js_1 = require_parseDef();
    var union_js_1 = require_union();
    function parseNullableDef(def, refs) {
      if (["ZodString", "ZodNumber", "ZodBigInt", "ZodBoolean", "ZodNull"].includes(def.innerType._def.typeName) && (!def.innerType._def.checks || !def.innerType._def.checks.length)) {
        if (refs.target === "openApi3") {
          return {
            type: union_js_1.primitiveMappings[def.innerType._def.typeName],
            nullable: true
          };
        }
        return {
          type: [
            union_js_1.primitiveMappings[def.innerType._def.typeName],
            "null"
          ]
        };
      }
      if (refs.target === "openApi3") {
        const base2 = (0, parseDef_js_1.parseDef)(def.innerType._def, {
          ...refs,
          currentPath: [...refs.currentPath]
        });
        if (base2 && "$ref" in base2)
          return { allOf: [base2], nullable: true };
        return base2 && { ...base2, nullable: true };
      }
      const base = (0, parseDef_js_1.parseDef)(def.innerType._def, {
        ...refs,
        currentPath: [...refs.currentPath, "anyOf", "0"]
      });
      return base && { anyOf: [base, { type: "null" }] };
    }
    exports2.parseNullableDef = parseNullableDef;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/number.js
var require_number = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/number.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseNumberDef = void 0;
    var errorMessages_js_1 = require_errorMessages();
    function parseNumberDef(def, refs) {
      const res = {
        type: "number"
      };
      if (!def.checks)
        return res;
      for (const check of def.checks) {
        switch (check.kind) {
          case "int":
            res.type = "integer";
            (0, errorMessages_js_1.addErrorMessage)(res, "type", check.message, refs);
            break;
          case "min":
            if (refs.target === "jsonSchema7") {
              if (check.inclusive) {
                (0, errorMessages_js_1.setResponseValueAndErrors)(res, "minimum", check.value, check.message, refs);
              } else {
                (0, errorMessages_js_1.setResponseValueAndErrors)(res, "exclusiveMinimum", check.value, check.message, refs);
              }
            } else {
              if (!check.inclusive) {
                res.exclusiveMinimum = true;
              }
              (0, errorMessages_js_1.setResponseValueAndErrors)(res, "minimum", check.value, check.message, refs);
            }
            break;
          case "max":
            if (refs.target === "jsonSchema7") {
              if (check.inclusive) {
                (0, errorMessages_js_1.setResponseValueAndErrors)(res, "maximum", check.value, check.message, refs);
              } else {
                (0, errorMessages_js_1.setResponseValueAndErrors)(res, "exclusiveMaximum", check.value, check.message, refs);
              }
            } else {
              if (!check.inclusive) {
                res.exclusiveMaximum = true;
              }
              (0, errorMessages_js_1.setResponseValueAndErrors)(res, "maximum", check.value, check.message, refs);
            }
            break;
          case "multipleOf":
            (0, errorMessages_js_1.setResponseValueAndErrors)(res, "multipleOf", check.value, check.message, refs);
            break;
        }
      }
      return res;
    }
    exports2.parseNumberDef = parseNumberDef;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/object.js
var require_object = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/object.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseObjectDef = void 0;
    var zod_1 = require_lib();
    var parseDef_js_1 = require_parseDef();
    function parseObjectDef(def, refs) {
      const forceOptionalIntoNullable = refs.target === "openAi";
      const result = {
        type: "object",
        properties: {}
      };
      const required = [];
      const shape = def.shape();
      for (const propName in shape) {
        let propDef = shape[propName];
        if (propDef === void 0 || propDef._def === void 0) {
          continue;
        }
        let propOptional = safeIsOptional(propDef);
        if (propOptional && forceOptionalIntoNullable) {
          if (propDef instanceof zod_1.ZodOptional) {
            propDef = propDef._def.innerType;
          }
          if (!propDef.isNullable()) {
            propDef = propDef.nullable();
          }
          propOptional = false;
        }
        const parsedDef = (0, parseDef_js_1.parseDef)(propDef._def, {
          ...refs,
          currentPath: [...refs.currentPath, "properties", propName],
          propertyPath: [...refs.currentPath, "properties", propName]
        });
        if (parsedDef === void 0) {
          continue;
        }
        result.properties[propName] = parsedDef;
        if (!propOptional) {
          required.push(propName);
        }
      }
      if (required.length) {
        result.required = required;
      }
      const additionalProperties = decideAdditionalProperties(def, refs);
      if (additionalProperties !== void 0) {
        result.additionalProperties = additionalProperties;
      }
      return result;
    }
    exports2.parseObjectDef = parseObjectDef;
    function decideAdditionalProperties(def, refs) {
      if (def.catchall._def.typeName !== "ZodNever") {
        return (0, parseDef_js_1.parseDef)(def.catchall._def, {
          ...refs,
          currentPath: [...refs.currentPath, "additionalProperties"]
        });
      }
      switch (def.unknownKeys) {
        case "passthrough":
          return refs.allowedAdditionalProperties;
        case "strict":
          return refs.rejectedAdditionalProperties;
        case "strip":
          return refs.removeAdditionalStrategy === "strict" ? refs.allowedAdditionalProperties : refs.rejectedAdditionalProperties;
      }
    }
    function safeIsOptional(schema) {
      try {
        return schema.isOptional();
      } catch {
        return true;
      }
    }
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/optional.js
var require_optional = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/optional.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseOptionalDef = void 0;
    var parseDef_js_1 = require_parseDef();
    var parseOptionalDef = (def, refs) => {
      if (refs.currentPath.toString() === refs.propertyPath?.toString()) {
        return (0, parseDef_js_1.parseDef)(def.innerType._def, refs);
      }
      const innerSchema = (0, parseDef_js_1.parseDef)(def.innerType._def, {
        ...refs,
        currentPath: [...refs.currentPath, "anyOf", "1"]
      });
      return innerSchema ? {
        anyOf: [
          {
            not: {}
          },
          innerSchema
        ]
      } : {};
    };
    exports2.parseOptionalDef = parseOptionalDef;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/pipeline.js
var require_pipeline = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/pipeline.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parsePipelineDef = void 0;
    var parseDef_js_1 = require_parseDef();
    var parsePipelineDef = (def, refs) => {
      if (refs.pipeStrategy === "input") {
        return (0, parseDef_js_1.parseDef)(def.in._def, refs);
      } else if (refs.pipeStrategy === "output") {
        return (0, parseDef_js_1.parseDef)(def.out._def, refs);
      }
      const a = (0, parseDef_js_1.parseDef)(def.in._def, {
        ...refs,
        currentPath: [...refs.currentPath, "allOf", "0"]
      });
      const b = (0, parseDef_js_1.parseDef)(def.out._def, {
        ...refs,
        currentPath: [...refs.currentPath, "allOf", a ? "1" : "0"]
      });
      return {
        allOf: [a, b].filter((x) => x !== void 0)
      };
    };
    exports2.parsePipelineDef = parsePipelineDef;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/promise.js
var require_promise = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/promise.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parsePromiseDef = void 0;
    var parseDef_js_1 = require_parseDef();
    function parsePromiseDef(def, refs) {
      return (0, parseDef_js_1.parseDef)(def.type._def, refs);
    }
    exports2.parsePromiseDef = parsePromiseDef;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/set.js
var require_set = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/set.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseSetDef = void 0;
    var errorMessages_js_1 = require_errorMessages();
    var parseDef_js_1 = require_parseDef();
    function parseSetDef(def, refs) {
      const items = (0, parseDef_js_1.parseDef)(def.valueType._def, {
        ...refs,
        currentPath: [...refs.currentPath, "items"]
      });
      const schema = {
        type: "array",
        uniqueItems: true,
        items
      };
      if (def.minSize) {
        (0, errorMessages_js_1.setResponseValueAndErrors)(schema, "minItems", def.minSize.value, def.minSize.message, refs);
      }
      if (def.maxSize) {
        (0, errorMessages_js_1.setResponseValueAndErrors)(schema, "maxItems", def.maxSize.value, def.maxSize.message, refs);
      }
      return schema;
    }
    exports2.parseSetDef = parseSetDef;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/tuple.js
var require_tuple = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/tuple.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseTupleDef = void 0;
    var parseDef_js_1 = require_parseDef();
    function parseTupleDef(def, refs) {
      if (def.rest) {
        return {
          type: "array",
          minItems: def.items.length,
          items: def.items.map((x, i) => (0, parseDef_js_1.parseDef)(x._def, {
            ...refs,
            currentPath: [...refs.currentPath, "items", `${i}`]
          })).reduce((acc, x) => x === void 0 ? acc : [...acc, x], []),
          additionalItems: (0, parseDef_js_1.parseDef)(def.rest._def, {
            ...refs,
            currentPath: [...refs.currentPath, "additionalItems"]
          })
        };
      } else {
        return {
          type: "array",
          minItems: def.items.length,
          maxItems: def.items.length,
          items: def.items.map((x, i) => (0, parseDef_js_1.parseDef)(x._def, {
            ...refs,
            currentPath: [...refs.currentPath, "items", `${i}`]
          })).reduce((acc, x) => x === void 0 ? acc : [...acc, x], [])
        };
      }
    }
    exports2.parseTupleDef = parseTupleDef;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/undefined.js
var require_undefined = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/undefined.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseUndefinedDef = void 0;
    function parseUndefinedDef() {
      return {
        not: {}
      };
    }
    exports2.parseUndefinedDef = parseUndefinedDef;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/unknown.js
var require_unknown = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/unknown.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseUnknownDef = void 0;
    function parseUnknownDef() {
      return {};
    }
    exports2.parseUnknownDef = parseUnknownDef;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/readonly.js
var require_readonly = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parsers/readonly.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseReadonlyDef = void 0;
    var parseDef_js_1 = require_parseDef();
    var parseReadonlyDef = (def, refs) => {
      return (0, parseDef_js_1.parseDef)(def.innerType._def, refs);
    };
    exports2.parseReadonlyDef = parseReadonlyDef;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/selectParser.js
var require_selectParser = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/selectParser.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.selectParser = void 0;
    var zod_1 = require_lib();
    var any_js_1 = require_any();
    var array_js_1 = require_array();
    var bigint_js_1 = require_bigint();
    var boolean_js_1 = require_boolean();
    var branded_js_1 = require_branded();
    var catch_js_1 = require_catch();
    var date_js_1 = require_date();
    var default_js_1 = require_default();
    var effects_js_1 = require_effects();
    var enum_js_1 = require_enum();
    var intersection_js_1 = require_intersection();
    var literal_js_1 = require_literal();
    var map_js_1 = require_map();
    var nativeEnum_js_1 = require_nativeEnum();
    var never_js_1 = require_never();
    var null_js_1 = require_null();
    var nullable_js_1 = require_nullable();
    var number_js_1 = require_number();
    var object_js_1 = require_object();
    var optional_js_1 = require_optional();
    var pipeline_js_1 = require_pipeline();
    var promise_js_1 = require_promise();
    var record_js_1 = require_record();
    var set_js_1 = require_set();
    var string_js_1 = require_string();
    var tuple_js_1 = require_tuple();
    var undefined_js_1 = require_undefined();
    var union_js_1 = require_union();
    var unknown_js_1 = require_unknown();
    var readonly_js_1 = require_readonly();
    var selectParser = (def, typeName, refs) => {
      switch (typeName) {
        case zod_1.ZodFirstPartyTypeKind.ZodString:
          return (0, string_js_1.parseStringDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodNumber:
          return (0, number_js_1.parseNumberDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodObject:
          return (0, object_js_1.parseObjectDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodBigInt:
          return (0, bigint_js_1.parseBigintDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodBoolean:
          return (0, boolean_js_1.parseBooleanDef)();
        case zod_1.ZodFirstPartyTypeKind.ZodDate:
          return (0, date_js_1.parseDateDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodUndefined:
          return (0, undefined_js_1.parseUndefinedDef)();
        case zod_1.ZodFirstPartyTypeKind.ZodNull:
          return (0, null_js_1.parseNullDef)(refs);
        case zod_1.ZodFirstPartyTypeKind.ZodArray:
          return (0, array_js_1.parseArrayDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodUnion:
        case zod_1.ZodFirstPartyTypeKind.ZodDiscriminatedUnion:
          return (0, union_js_1.parseUnionDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodIntersection:
          return (0, intersection_js_1.parseIntersectionDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodTuple:
          return (0, tuple_js_1.parseTupleDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodRecord:
          return (0, record_js_1.parseRecordDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodLiteral:
          return (0, literal_js_1.parseLiteralDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodEnum:
          return (0, enum_js_1.parseEnumDef)(def);
        case zod_1.ZodFirstPartyTypeKind.ZodNativeEnum:
          return (0, nativeEnum_js_1.parseNativeEnumDef)(def);
        case zod_1.ZodFirstPartyTypeKind.ZodNullable:
          return (0, nullable_js_1.parseNullableDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodOptional:
          return (0, optional_js_1.parseOptionalDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodMap:
          return (0, map_js_1.parseMapDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodSet:
          return (0, set_js_1.parseSetDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodLazy:
          return () => def.getter()._def;
        case zod_1.ZodFirstPartyTypeKind.ZodPromise:
          return (0, promise_js_1.parsePromiseDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodNaN:
        case zod_1.ZodFirstPartyTypeKind.ZodNever:
          return (0, never_js_1.parseNeverDef)();
        case zod_1.ZodFirstPartyTypeKind.ZodEffects:
          return (0, effects_js_1.parseEffectsDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodAny:
          return (0, any_js_1.parseAnyDef)();
        case zod_1.ZodFirstPartyTypeKind.ZodUnknown:
          return (0, unknown_js_1.parseUnknownDef)();
        case zod_1.ZodFirstPartyTypeKind.ZodDefault:
          return (0, default_js_1.parseDefaultDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodBranded:
          return (0, branded_js_1.parseBrandedDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodReadonly:
          return (0, readonly_js_1.parseReadonlyDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodCatch:
          return (0, catch_js_1.parseCatchDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodPipeline:
          return (0, pipeline_js_1.parsePipelineDef)(def, refs);
        case zod_1.ZodFirstPartyTypeKind.ZodFunction:
        case zod_1.ZodFirstPartyTypeKind.ZodVoid:
        case zod_1.ZodFirstPartyTypeKind.ZodSymbol:
          return void 0;
        default:
          return /* @__PURE__ */ ((_) => void 0)(typeName);
      }
    };
    exports2.selectParser = selectParser;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parseDef.js
var require_parseDef = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parseDef.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseDef = void 0;
    var Options_js_1 = require_Options();
    var selectParser_js_1 = require_selectParser();
    function parseDef(def, refs, forceResolution = false) {
      const seenItem = refs.seen.get(def);
      if (refs.override) {
        const overrideResult = refs.override?.(def, refs, seenItem, forceResolution);
        if (overrideResult !== Options_js_1.ignoreOverride) {
          return overrideResult;
        }
      }
      if (seenItem && !forceResolution) {
        const seenSchema = get$ref(seenItem, refs);
        if (seenSchema !== void 0) {
          return seenSchema;
        }
      }
      const newItem = { def, path: refs.currentPath, jsonSchema: void 0 };
      refs.seen.set(def, newItem);
      const jsonSchemaOrGetter = (0, selectParser_js_1.selectParser)(def, def.typeName, refs);
      const jsonSchema2 = typeof jsonSchemaOrGetter === "function" ? parseDef(jsonSchemaOrGetter(), refs) : jsonSchemaOrGetter;
      if (jsonSchema2) {
        addMeta(def, refs, jsonSchema2);
      }
      if (refs.postProcess) {
        const postProcessResult = refs.postProcess(jsonSchema2, def, refs);
        newItem.jsonSchema = jsonSchema2;
        return postProcessResult;
      }
      newItem.jsonSchema = jsonSchema2;
      return jsonSchema2;
    }
    exports2.parseDef = parseDef;
    var get$ref = (item, refs) => {
      switch (refs.$refStrategy) {
        case "root":
          return { $ref: item.path.join("/") };
        case "relative":
          return { $ref: getRelativePath(refs.currentPath, item.path) };
        case "none":
        case "seen": {
          if (item.path.length < refs.currentPath.length && item.path.every((value, index) => refs.currentPath[index] === value)) {
            console.warn(`Recursive reference detected at ${refs.currentPath.join("/")}! Defaulting to any`);
            return {};
          }
          return refs.$refStrategy === "seen" ? {} : void 0;
        }
      }
    };
    var getRelativePath = (pathA, pathB) => {
      let i = 0;
      for (; i < pathA.length && i < pathB.length; i++) {
        if (pathA[i] !== pathB[i])
          break;
      }
      return [(pathA.length - i).toString(), ...pathB.slice(i)].join("/");
    };
    var addMeta = (def, refs, jsonSchema2) => {
      if (def.description) {
        jsonSchema2.description = def.description;
        if (refs.markdownDescription) {
          jsonSchema2.markdownDescription = def.description;
        }
      }
      return jsonSchema2;
    };
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parseTypes.js
var require_parseTypes = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/parseTypes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/zodToJsonSchema.js
var require_zodToJsonSchema = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/zodToJsonSchema.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.zodToJsonSchema = void 0;
    var parseDef_js_1 = require_parseDef();
    var Refs_js_1 = require_Refs();
    var zodToJsonSchema = (schema, options) => {
      const refs = (0, Refs_js_1.getRefs)(options);
      const definitions = typeof options === "object" && options.definitions ? Object.entries(options.definitions).reduce((acc, [name2, schema2]) => ({
        ...acc,
        [name2]: (0, parseDef_js_1.parseDef)(schema2._def, {
          ...refs,
          currentPath: [...refs.basePath, refs.definitionPath, name2]
        }, true) ?? {}
      }), {}) : void 0;
      const name = typeof options === "string" ? options : options?.nameStrategy === "title" ? void 0 : options?.name;
      const main2 = (0, parseDef_js_1.parseDef)(schema._def, name === void 0 ? refs : {
        ...refs,
        currentPath: [...refs.basePath, refs.definitionPath, name]
      }, false) ?? {};
      const title = typeof options === "object" && options.name !== void 0 && options.nameStrategy === "title" ? options.name : void 0;
      if (title !== void 0) {
        main2.title = title;
      }
      const combined = name === void 0 ? definitions ? {
        ...main2,
        [refs.definitionPath]: definitions
      } : main2 : {
        $ref: [
          ...refs.$refStrategy === "relative" ? [] : refs.basePath,
          refs.definitionPath,
          name
        ].join("/"),
        [refs.definitionPath]: {
          ...definitions,
          [name]: main2
        }
      };
      if (refs.target === "jsonSchema7") {
        combined.$schema = "http://json-schema.org/draft-07/schema#";
      } else if (refs.target === "jsonSchema2019-09" || refs.target === "openAi") {
        combined.$schema = "https://json-schema.org/draft/2019-09/schema#";
      }
      if (refs.target === "openAi" && ("anyOf" in combined || "oneOf" in combined || "allOf" in combined || "type" in combined && Array.isArray(combined.type))) {
        console.warn("Warning: OpenAI may not support schemas with unions as roots! Try wrapping it in an object property.");
      }
      return combined;
    };
    exports2.zodToJsonSchema = zodToJsonSchema;
  }
});

// node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/.pnpm/zod-to-json-schema@3.24.5_zod@3.24.2/node_modules/zod-to-json-schema/dist/cjs/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_Options(), exports2);
    __exportStar(require_Refs(), exports2);
    __exportStar(require_errorMessages(), exports2);
    __exportStar(require_parseDef(), exports2);
    __exportStar(require_parseTypes(), exports2);
    __exportStar(require_any(), exports2);
    __exportStar(require_array(), exports2);
    __exportStar(require_bigint(), exports2);
    __exportStar(require_boolean(), exports2);
    __exportStar(require_branded(), exports2);
    __exportStar(require_catch(), exports2);
    __exportStar(require_date(), exports2);
    __exportStar(require_default(), exports2);
    __exportStar(require_effects(), exports2);
    __exportStar(require_enum(), exports2);
    __exportStar(require_intersection(), exports2);
    __exportStar(require_literal(), exports2);
    __exportStar(require_map(), exports2);
    __exportStar(require_nativeEnum(), exports2);
    __exportStar(require_never(), exports2);
    __exportStar(require_null(), exports2);
    __exportStar(require_nullable(), exports2);
    __exportStar(require_number(), exports2);
    __exportStar(require_object(), exports2);
    __exportStar(require_optional(), exports2);
    __exportStar(require_pipeline(), exports2);
    __exportStar(require_promise(), exports2);
    __exportStar(require_readonly(), exports2);
    __exportStar(require_record(), exports2);
    __exportStar(require_set(), exports2);
    __exportStar(require_string(), exports2);
    __exportStar(require_tuple(), exports2);
    __exportStar(require_undefined(), exports2);
    __exportStar(require_union(), exports2);
    __exportStar(require_unknown(), exports2);
    __exportStar(require_selectParser(), exports2);
    __exportStar(require_zodToJsonSchema(), exports2);
    var zodToJsonSchema_js_1 = require_zodToJsonSchema();
    exports2.default = zodToJsonSchema_js_1.zodToJsonSchema;
  }
});

// node_modules/.pnpm/@ai-sdk+ui-utils@1.2.0_zod@3.24.2/node_modules/@ai-sdk/ui-utils/dist/index.js
var require_dist7 = __commonJS({
  "node_modules/.pnpm/@ai-sdk+ui-utils@1.2.0_zod@3.24.2/node_modules/@ai-sdk/ui-utils/dist/index.js"(exports2, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    ));
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var src_exports = {};
    __export2(src_exports, {
      asSchema: () => asSchema,
      callChatApi: () => callChatApi,
      callCompletionApi: () => callCompletionApi,
      extractMaxToolInvocationStep: () => extractMaxToolInvocationStep,
      fillMessageParts: () => fillMessageParts,
      formatAssistantStreamPart: () => formatAssistantStreamPart2,
      formatDataStreamPart: () => formatDataStreamPart2,
      generateId: () => import_provider_utils5.generateId,
      getMessageParts: () => getMessageParts,
      getTextFromDataUrl: () => getTextFromDataUrl,
      isAssistantMessageWithCompletedToolCalls: () => isAssistantMessageWithCompletedToolCalls,
      isDeepEqualData: () => isDeepEqualData,
      jsonSchema: () => jsonSchema2,
      parseAssistantStreamPart: () => parseAssistantStreamPart2,
      parseDataStreamPart: () => parseDataStreamPart2,
      parsePartialJson: () => parsePartialJson,
      prepareAttachmentsForRequest: () => prepareAttachmentsForRequest,
      processAssistantStream: () => processAssistantStream,
      processDataStream: () => processDataStream2,
      processTextStream: () => processTextStream2,
      shouldResubmitMessages: () => shouldResubmitMessages,
      updateToolCallResult: () => updateToolCallResult,
      zodSchema: () => zodSchema2
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_provider_utils5 = require_dist3();
    var textStreamPart = {
      code: "0",
      name: "text",
      parse: (value) => {
        if (typeof value !== "string") {
          throw new Error('"text" parts expect a string value.');
        }
        return { type: "text", value };
      }
    };
    var errorStreamPart = {
      code: "3",
      name: "error",
      parse: (value) => {
        if (typeof value !== "string") {
          throw new Error('"error" parts expect a string value.');
        }
        return { type: "error", value };
      }
    };
    var assistantMessageStreamPart = {
      code: "4",
      name: "assistant_message",
      parse: (value) => {
        if (value == null || typeof value !== "object" || !("id" in value) || !("role" in value) || !("content" in value) || typeof value.id !== "string" || typeof value.role !== "string" || value.role !== "assistant" || !Array.isArray(value.content) || !value.content.every(
          (item) => item != null && typeof item === "object" && "type" in item && item.type === "text" && "text" in item && item.text != null && typeof item.text === "object" && "value" in item.text && typeof item.text.value === "string"
        )) {
          throw new Error(
            '"assistant_message" parts expect an object with an "id", "role", and "content" property.'
          );
        }
        return {
          type: "assistant_message",
          value
        };
      }
    };
    var assistantControlDataStreamPart = {
      code: "5",
      name: "assistant_control_data",
      parse: (value) => {
        if (value == null || typeof value !== "object" || !("threadId" in value) || !("messageId" in value) || typeof value.threadId !== "string" || typeof value.messageId !== "string") {
          throw new Error(
            '"assistant_control_data" parts expect an object with a "threadId" and "messageId" property.'
          );
        }
        return {
          type: "assistant_control_data",
          value: {
            threadId: value.threadId,
            messageId: value.messageId
          }
        };
      }
    };
    var dataMessageStreamPart = {
      code: "6",
      name: "data_message",
      parse: (value) => {
        if (value == null || typeof value !== "object" || !("role" in value) || !("data" in value) || typeof value.role !== "string" || value.role !== "data") {
          throw new Error(
            '"data_message" parts expect an object with a "role" and "data" property.'
          );
        }
        return {
          type: "data_message",
          value
        };
      }
    };
    var assistantStreamParts = [
      textStreamPart,
      errorStreamPart,
      assistantMessageStreamPart,
      assistantControlDataStreamPart,
      dataMessageStreamPart
    ];
    var assistantStreamPartsByCode = {
      [textStreamPart.code]: textStreamPart,
      [errorStreamPart.code]: errorStreamPart,
      [assistantMessageStreamPart.code]: assistantMessageStreamPart,
      [assistantControlDataStreamPart.code]: assistantControlDataStreamPart,
      [dataMessageStreamPart.code]: dataMessageStreamPart
    };
    var StreamStringPrefixes = {
      [textStreamPart.name]: textStreamPart.code,
      [errorStreamPart.name]: errorStreamPart.code,
      [assistantMessageStreamPart.name]: assistantMessageStreamPart.code,
      [assistantControlDataStreamPart.name]: assistantControlDataStreamPart.code,
      [dataMessageStreamPart.name]: dataMessageStreamPart.code
    };
    var validCodes = assistantStreamParts.map((part) => part.code);
    var parseAssistantStreamPart2 = (line) => {
      const firstSeparatorIndex = line.indexOf(":");
      if (firstSeparatorIndex === -1) {
        throw new Error("Failed to parse stream string. No separator found.");
      }
      const prefix = line.slice(0, firstSeparatorIndex);
      if (!validCodes.includes(prefix)) {
        throw new Error(`Failed to parse stream string. Invalid code ${prefix}.`);
      }
      const code = prefix;
      const textValue = line.slice(firstSeparatorIndex + 1);
      const jsonValue = JSON.parse(textValue);
      return assistantStreamPartsByCode[code].parse(jsonValue);
    };
    function formatAssistantStreamPart2(type, value) {
      const streamPart = assistantStreamParts.find((part) => part.name === type);
      if (!streamPart) {
        throw new Error(`Invalid stream part type: ${type}`);
      }
      return `${streamPart.code}:${JSON.stringify(value)}
`;
    }
    var import_provider_utils2 = require_dist3();
    function calculateLanguageModelUsage({
      promptTokens,
      completionTokens
    }) {
      return {
        promptTokens,
        completionTokens,
        totalTokens: promptTokens + completionTokens
      };
    }
    var import_provider_utils = require_dist3();
    function fixJson(input) {
      const stack = ["ROOT"];
      let lastValidIndex = -1;
      let literalStart = null;
      function processValueStart(char, i, swapState) {
        {
          switch (char) {
            case '"': {
              lastValidIndex = i;
              stack.pop();
              stack.push(swapState);
              stack.push("INSIDE_STRING");
              break;
            }
            case "f":
            case "t":
            case "n": {
              lastValidIndex = i;
              literalStart = i;
              stack.pop();
              stack.push(swapState);
              stack.push("INSIDE_LITERAL");
              break;
            }
            case "-": {
              stack.pop();
              stack.push(swapState);
              stack.push("INSIDE_NUMBER");
              break;
            }
            case "0":
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9": {
              lastValidIndex = i;
              stack.pop();
              stack.push(swapState);
              stack.push("INSIDE_NUMBER");
              break;
            }
            case "{": {
              lastValidIndex = i;
              stack.pop();
              stack.push(swapState);
              stack.push("INSIDE_OBJECT_START");
              break;
            }
            case "[": {
              lastValidIndex = i;
              stack.pop();
              stack.push(swapState);
              stack.push("INSIDE_ARRAY_START");
              break;
            }
          }
        }
      }
      function processAfterObjectValue(char, i) {
        switch (char) {
          case ",": {
            stack.pop();
            stack.push("INSIDE_OBJECT_AFTER_COMMA");
            break;
          }
          case "}": {
            lastValidIndex = i;
            stack.pop();
            break;
          }
        }
      }
      function processAfterArrayValue(char, i) {
        switch (char) {
          case ",": {
            stack.pop();
            stack.push("INSIDE_ARRAY_AFTER_COMMA");
            break;
          }
          case "]": {
            lastValidIndex = i;
            stack.pop();
            break;
          }
        }
      }
      for (let i = 0; i < input.length; i++) {
        const char = input[i];
        const currentState = stack[stack.length - 1];
        switch (currentState) {
          case "ROOT":
            processValueStart(char, i, "FINISH");
            break;
          case "INSIDE_OBJECT_START": {
            switch (char) {
              case '"': {
                stack.pop();
                stack.push("INSIDE_OBJECT_KEY");
                break;
              }
              case "}": {
                lastValidIndex = i;
                stack.pop();
                break;
              }
            }
            break;
          }
          case "INSIDE_OBJECT_AFTER_COMMA": {
            switch (char) {
              case '"': {
                stack.pop();
                stack.push("INSIDE_OBJECT_KEY");
                break;
              }
            }
            break;
          }
          case "INSIDE_OBJECT_KEY": {
            switch (char) {
              case '"': {
                stack.pop();
                stack.push("INSIDE_OBJECT_AFTER_KEY");
                break;
              }
            }
            break;
          }
          case "INSIDE_OBJECT_AFTER_KEY": {
            switch (char) {
              case ":": {
                stack.pop();
                stack.push("INSIDE_OBJECT_BEFORE_VALUE");
                break;
              }
            }
            break;
          }
          case "INSIDE_OBJECT_BEFORE_VALUE": {
            processValueStart(char, i, "INSIDE_OBJECT_AFTER_VALUE");
            break;
          }
          case "INSIDE_OBJECT_AFTER_VALUE": {
            processAfterObjectValue(char, i);
            break;
          }
          case "INSIDE_STRING": {
            switch (char) {
              case '"': {
                stack.pop();
                lastValidIndex = i;
                break;
              }
              case "\\": {
                stack.push("INSIDE_STRING_ESCAPE");
                break;
              }
              default: {
                lastValidIndex = i;
              }
            }
            break;
          }
          case "INSIDE_ARRAY_START": {
            switch (char) {
              case "]": {
                lastValidIndex = i;
                stack.pop();
                break;
              }
              default: {
                lastValidIndex = i;
                processValueStart(char, i, "INSIDE_ARRAY_AFTER_VALUE");
                break;
              }
            }
            break;
          }
          case "INSIDE_ARRAY_AFTER_VALUE": {
            switch (char) {
              case ",": {
                stack.pop();
                stack.push("INSIDE_ARRAY_AFTER_COMMA");
                break;
              }
              case "]": {
                lastValidIndex = i;
                stack.pop();
                break;
              }
              default: {
                lastValidIndex = i;
                break;
              }
            }
            break;
          }
          case "INSIDE_ARRAY_AFTER_COMMA": {
            processValueStart(char, i, "INSIDE_ARRAY_AFTER_VALUE");
            break;
          }
          case "INSIDE_STRING_ESCAPE": {
            stack.pop();
            lastValidIndex = i;
            break;
          }
          case "INSIDE_NUMBER": {
            switch (char) {
              case "0":
              case "1":
              case "2":
              case "3":
              case "4":
              case "5":
              case "6":
              case "7":
              case "8":
              case "9": {
                lastValidIndex = i;
                break;
              }
              case "e":
              case "E":
              case "-":
              case ".": {
                break;
              }
              case ",": {
                stack.pop();
                if (stack[stack.length - 1] === "INSIDE_ARRAY_AFTER_VALUE") {
                  processAfterArrayValue(char, i);
                }
                if (stack[stack.length - 1] === "INSIDE_OBJECT_AFTER_VALUE") {
                  processAfterObjectValue(char, i);
                }
                break;
              }
              case "}": {
                stack.pop();
                if (stack[stack.length - 1] === "INSIDE_OBJECT_AFTER_VALUE") {
                  processAfterObjectValue(char, i);
                }
                break;
              }
              case "]": {
                stack.pop();
                if (stack[stack.length - 1] === "INSIDE_ARRAY_AFTER_VALUE") {
                  processAfterArrayValue(char, i);
                }
                break;
              }
              default: {
                stack.pop();
                break;
              }
            }
            break;
          }
          case "INSIDE_LITERAL": {
            const partialLiteral = input.substring(literalStart, i + 1);
            if (!"false".startsWith(partialLiteral) && !"true".startsWith(partialLiteral) && !"null".startsWith(partialLiteral)) {
              stack.pop();
              if (stack[stack.length - 1] === "INSIDE_OBJECT_AFTER_VALUE") {
                processAfterObjectValue(char, i);
              } else if (stack[stack.length - 1] === "INSIDE_ARRAY_AFTER_VALUE") {
                processAfterArrayValue(char, i);
              }
            } else {
              lastValidIndex = i;
            }
            break;
          }
        }
      }
      let result = input.slice(0, lastValidIndex + 1);
      for (let i = stack.length - 1; i >= 0; i--) {
        const state = stack[i];
        switch (state) {
          case "INSIDE_STRING": {
            result += '"';
            break;
          }
          case "INSIDE_OBJECT_KEY":
          case "INSIDE_OBJECT_AFTER_KEY":
          case "INSIDE_OBJECT_AFTER_COMMA":
          case "INSIDE_OBJECT_START":
          case "INSIDE_OBJECT_BEFORE_VALUE":
          case "INSIDE_OBJECT_AFTER_VALUE": {
            result += "}";
            break;
          }
          case "INSIDE_ARRAY_START":
          case "INSIDE_ARRAY_AFTER_COMMA":
          case "INSIDE_ARRAY_AFTER_VALUE": {
            result += "]";
            break;
          }
          case "INSIDE_LITERAL": {
            const partialLiteral = input.substring(literalStart, input.length);
            if ("true".startsWith(partialLiteral)) {
              result += "true".slice(partialLiteral.length);
            } else if ("false".startsWith(partialLiteral)) {
              result += "false".slice(partialLiteral.length);
            } else if ("null".startsWith(partialLiteral)) {
              result += "null".slice(partialLiteral.length);
            }
          }
        }
      }
      return result;
    }
    function parsePartialJson(jsonText) {
      if (jsonText === void 0) {
        return { value: void 0, state: "undefined-input" };
      }
      let result = (0, import_provider_utils.safeParseJSON)({ text: jsonText });
      if (result.success) {
        return { value: result.value, state: "successful-parse" };
      }
      result = (0, import_provider_utils.safeParseJSON)({ text: fixJson(jsonText) });
      if (result.success) {
        return { value: result.value, state: "repaired-parse" };
      }
      return { value: void 0, state: "failed-parse" };
    }
    var textStreamPart2 = {
      code: "0",
      name: "text",
      parse: (value) => {
        if (typeof value !== "string") {
          throw new Error('"text" parts expect a string value.');
        }
        return { type: "text", value };
      }
    };
    var dataStreamPart = {
      code: "2",
      name: "data",
      parse: (value) => {
        if (!Array.isArray(value)) {
          throw new Error('"data" parts expect an array value.');
        }
        return { type: "data", value };
      }
    };
    var errorStreamPart2 = {
      code: "3",
      name: "error",
      parse: (value) => {
        if (typeof value !== "string") {
          throw new Error('"error" parts expect a string value.');
        }
        return { type: "error", value };
      }
    };
    var messageAnnotationsStreamPart = {
      code: "8",
      name: "message_annotations",
      parse: (value) => {
        if (!Array.isArray(value)) {
          throw new Error('"message_annotations" parts expect an array value.');
        }
        return { type: "message_annotations", value };
      }
    };
    var toolCallStreamPart = {
      code: "9",
      name: "tool_call",
      parse: (value) => {
        if (value == null || typeof value !== "object" || !("toolCallId" in value) || typeof value.toolCallId !== "string" || !("toolName" in value) || typeof value.toolName !== "string" || !("args" in value) || typeof value.args !== "object") {
          throw new Error(
            '"tool_call" parts expect an object with a "toolCallId", "toolName", and "args" property.'
          );
        }
        return {
          type: "tool_call",
          value
        };
      }
    };
    var toolResultStreamPart = {
      code: "a",
      name: "tool_result",
      parse: (value) => {
        if (value == null || typeof value !== "object" || !("toolCallId" in value) || typeof value.toolCallId !== "string" || !("result" in value)) {
          throw new Error(
            '"tool_result" parts expect an object with a "toolCallId" and a "result" property.'
          );
        }
        return {
          type: "tool_result",
          value
        };
      }
    };
    var toolCallStreamingStartStreamPart = {
      code: "b",
      name: "tool_call_streaming_start",
      parse: (value) => {
        if (value == null || typeof value !== "object" || !("toolCallId" in value) || typeof value.toolCallId !== "string" || !("toolName" in value) || typeof value.toolName !== "string") {
          throw new Error(
            '"tool_call_streaming_start" parts expect an object with a "toolCallId" and "toolName" property.'
          );
        }
        return {
          type: "tool_call_streaming_start",
          value
        };
      }
    };
    var toolCallDeltaStreamPart = {
      code: "c",
      name: "tool_call_delta",
      parse: (value) => {
        if (value == null || typeof value !== "object" || !("toolCallId" in value) || typeof value.toolCallId !== "string" || !("argsTextDelta" in value) || typeof value.argsTextDelta !== "string") {
          throw new Error(
            '"tool_call_delta" parts expect an object with a "toolCallId" and "argsTextDelta" property.'
          );
        }
        return {
          type: "tool_call_delta",
          value
        };
      }
    };
    var finishMessageStreamPart = {
      code: "d",
      name: "finish_message",
      parse: (value) => {
        if (value == null || typeof value !== "object" || !("finishReason" in value) || typeof value.finishReason !== "string") {
          throw new Error(
            '"finish_message" parts expect an object with a "finishReason" property.'
          );
        }
        const result = {
          finishReason: value.finishReason
        };
        if ("usage" in value && value.usage != null && typeof value.usage === "object" && "promptTokens" in value.usage && "completionTokens" in value.usage) {
          result.usage = {
            promptTokens: typeof value.usage.promptTokens === "number" ? value.usage.promptTokens : Number.NaN,
            completionTokens: typeof value.usage.completionTokens === "number" ? value.usage.completionTokens : Number.NaN
          };
        }
        return {
          type: "finish_message",
          value: result
        };
      }
    };
    var finishStepStreamPart = {
      code: "e",
      name: "finish_step",
      parse: (value) => {
        if (value == null || typeof value !== "object" || !("finishReason" in value) || typeof value.finishReason !== "string") {
          throw new Error(
            '"finish_step" parts expect an object with a "finishReason" property.'
          );
        }
        const result = {
          finishReason: value.finishReason,
          isContinued: false
        };
        if ("usage" in value && value.usage != null && typeof value.usage === "object" && "promptTokens" in value.usage && "completionTokens" in value.usage) {
          result.usage = {
            promptTokens: typeof value.usage.promptTokens === "number" ? value.usage.promptTokens : Number.NaN,
            completionTokens: typeof value.usage.completionTokens === "number" ? value.usage.completionTokens : Number.NaN
          };
        }
        if ("isContinued" in value && typeof value.isContinued === "boolean") {
          result.isContinued = value.isContinued;
        }
        return {
          type: "finish_step",
          value: result
        };
      }
    };
    var startStepStreamPart = {
      code: "f",
      name: "start_step",
      parse: (value) => {
        if (value == null || typeof value !== "object" || !("messageId" in value) || typeof value.messageId !== "string") {
          throw new Error(
            '"start_step" parts expect an object with an "id" property.'
          );
        }
        return {
          type: "start_step",
          value: {
            messageId: value.messageId
          }
        };
      }
    };
    var reasoningStreamPart = {
      code: "g",
      name: "reasoning",
      parse: (value) => {
        if (typeof value !== "string") {
          throw new Error('"reasoning" parts expect a string value.');
        }
        return { type: "reasoning", value };
      }
    };
    var sourcePart = {
      code: "h",
      name: "source",
      parse: (value) => {
        if (value == null || typeof value !== "object") {
          throw new Error('"source" parts expect a Source object.');
        }
        return {
          type: "source",
          value
        };
      }
    };
    var redactedReasoningStreamPart = {
      code: "i",
      name: "redacted_reasoning",
      parse: (value) => {
        if (value == null || typeof value !== "object" || !("data" in value) || typeof value.data !== "string") {
          throw new Error(
            '"redacted_reasoning" parts expect an object with a "data" property.'
          );
        }
        return { type: "redacted_reasoning", value: { data: value.data } };
      }
    };
    var reasoningSignatureStreamPart = {
      code: "j",
      name: "reasoning_signature",
      parse: (value) => {
        if (value == null || typeof value !== "object" || !("signature" in value) || typeof value.signature !== "string") {
          throw new Error(
            '"reasoning_signature" parts expect an object with a "signature" property.'
          );
        }
        return {
          type: "reasoning_signature",
          value: { signature: value.signature }
        };
      }
    };
    var fileStreamPart = {
      code: "k",
      name: "file",
      parse: (value) => {
        if (value == null || typeof value !== "object" || !("data" in value) || typeof value.data !== "string" || !("mimeType" in value) || typeof value.mimeType !== "string") {
          throw new Error(
            '"file" parts expect an object with a "data" and "mimeType" property.'
          );
        }
        return { type: "file", value };
      }
    };
    var dataStreamParts = [
      textStreamPart2,
      dataStreamPart,
      errorStreamPart2,
      messageAnnotationsStreamPart,
      toolCallStreamPart,
      toolResultStreamPart,
      toolCallStreamingStartStreamPart,
      toolCallDeltaStreamPart,
      finishMessageStreamPart,
      finishStepStreamPart,
      startStepStreamPart,
      reasoningStreamPart,
      sourcePart,
      redactedReasoningStreamPart,
      reasoningSignatureStreamPart,
      fileStreamPart
    ];
    var dataStreamPartsByCode = Object.fromEntries(
      dataStreamParts.map((part) => [part.code, part])
    );
    var DataStreamStringPrefixes = Object.fromEntries(
      dataStreamParts.map((part) => [part.name, part.code])
    );
    var validCodes2 = dataStreamParts.map((part) => part.code);
    var parseDataStreamPart2 = (line) => {
      const firstSeparatorIndex = line.indexOf(":");
      if (firstSeparatorIndex === -1) {
        throw new Error("Failed to parse stream string. No separator found.");
      }
      const prefix = line.slice(0, firstSeparatorIndex);
      if (!validCodes2.includes(prefix)) {
        throw new Error(`Failed to parse stream string. Invalid code ${prefix}.`);
      }
      const code = prefix;
      const textValue = line.slice(firstSeparatorIndex + 1);
      const jsonValue = JSON.parse(textValue);
      return dataStreamPartsByCode[code].parse(jsonValue);
    };
    function formatDataStreamPart2(type, value) {
      const streamPart = dataStreamParts.find((part) => part.name === type);
      if (!streamPart) {
        throw new Error(`Invalid stream part type: ${type}`);
      }
      return `${streamPart.code}:${JSON.stringify(value)}
`;
    }
    var NEWLINE = "\n".charCodeAt(0);
    function concatChunks(chunks, totalLength) {
      const concatenatedChunks = new Uint8Array(totalLength);
      let offset = 0;
      for (const chunk of chunks) {
        concatenatedChunks.set(chunk, offset);
        offset += chunk.length;
      }
      chunks.length = 0;
      return concatenatedChunks;
    }
    async function processDataStream2({
      stream,
      onTextPart,
      onReasoningPart,
      onReasoningSignaturePart,
      onRedactedReasoningPart,
      onSourcePart,
      onFilePart,
      onDataPart,
      onErrorPart,
      onToolCallStreamingStartPart,
      onToolCallDeltaPart,
      onToolCallPart,
      onToolResultPart,
      onMessageAnnotationsPart,
      onFinishMessagePart,
      onFinishStepPart,
      onStartStepPart
    }) {
      const reader = stream.getReader();
      const decoder = new TextDecoder();
      const chunks = [];
      let totalLength = 0;
      while (true) {
        const { value } = await reader.read();
        if (value) {
          chunks.push(value);
          totalLength += value.length;
          if (value[value.length - 1] !== NEWLINE) {
            continue;
          }
        }
        if (chunks.length === 0) {
          break;
        }
        const concatenatedChunks = concatChunks(chunks, totalLength);
        totalLength = 0;
        const streamParts = decoder.decode(concatenatedChunks, { stream: true }).split("\n").filter((line) => line !== "").map(parseDataStreamPart2);
        for (const { type, value: value2 } of streamParts) {
          switch (type) {
            case "text":
              await (onTextPart == null ? void 0 : onTextPart(value2));
              break;
            case "reasoning":
              await (onReasoningPart == null ? void 0 : onReasoningPart(value2));
              break;
            case "reasoning_signature":
              await (onReasoningSignaturePart == null ? void 0 : onReasoningSignaturePart(value2));
              break;
            case "redacted_reasoning":
              await (onRedactedReasoningPart == null ? void 0 : onRedactedReasoningPart(value2));
              break;
            case "file":
              await (onFilePart == null ? void 0 : onFilePart(value2));
              break;
            case "source":
              await (onSourcePart == null ? void 0 : onSourcePart(value2));
              break;
            case "data":
              await (onDataPart == null ? void 0 : onDataPart(value2));
              break;
            case "error":
              await (onErrorPart == null ? void 0 : onErrorPart(value2));
              break;
            case "message_annotations":
              await (onMessageAnnotationsPart == null ? void 0 : onMessageAnnotationsPart(value2));
              break;
            case "tool_call_streaming_start":
              await (onToolCallStreamingStartPart == null ? void 0 : onToolCallStreamingStartPart(value2));
              break;
            case "tool_call_delta":
              await (onToolCallDeltaPart == null ? void 0 : onToolCallDeltaPart(value2));
              break;
            case "tool_call":
              await (onToolCallPart == null ? void 0 : onToolCallPart(value2));
              break;
            case "tool_result":
              await (onToolResultPart == null ? void 0 : onToolResultPart(value2));
              break;
            case "finish_message":
              await (onFinishMessagePart == null ? void 0 : onFinishMessagePart(value2));
              break;
            case "finish_step":
              await (onFinishStepPart == null ? void 0 : onFinishStepPart(value2));
              break;
            case "start_step":
              await (onStartStepPart == null ? void 0 : onStartStepPart(value2));
              break;
            default: {
              const exhaustiveCheck = type;
              throw new Error(`Unknown stream part type: ${exhaustiveCheck}`);
            }
          }
        }
      }
    }
    async function processChatResponse({
      stream,
      update,
      onToolCall,
      onFinish,
      generateId: generateId2 = import_provider_utils2.generateId,
      getCurrentDate = () => /* @__PURE__ */ new Date(),
      lastMessage
    }) {
      var _a, _b;
      const replaceLastMessage = (lastMessage == null ? void 0 : lastMessage.role) === "assistant";
      let step = replaceLastMessage ? 1 + // find max step in existing tool invocations:
      ((_b = (_a = lastMessage.toolInvocations) == null ? void 0 : _a.reduce((max, toolInvocation) => {
        var _a2;
        return Math.max(max, (_a2 = toolInvocation.step) != null ? _a2 : 0);
      }, 0)) != null ? _b : 0) : 0;
      const message = replaceLastMessage ? structuredClone(lastMessage) : {
        id: generateId2(),
        createdAt: getCurrentDate(),
        role: "assistant",
        content: "",
        parts: []
      };
      let currentTextPart = void 0;
      let currentReasoningPart = void 0;
      let currentReasoningTextDetail = void 0;
      function updateToolInvocationPart(toolCallId, invocation) {
        const part = message.parts.find(
          (part2) => part2.type === "tool-invocation" && part2.toolInvocation.toolCallId === toolCallId
        );
        if (part != null) {
          part.toolInvocation = invocation;
        } else {
          message.parts.push({
            type: "tool-invocation",
            toolInvocation: invocation
          });
        }
      }
      const data = [];
      let messageAnnotations = replaceLastMessage ? lastMessage == null ? void 0 : lastMessage.annotations : void 0;
      const partialToolCalls = {};
      let usage = {
        completionTokens: NaN,
        promptTokens: NaN,
        totalTokens: NaN
      };
      let finishReason = "unknown";
      function execUpdate() {
        const copiedData = [...data];
        if (messageAnnotations == null ? void 0 : messageAnnotations.length) {
          message.annotations = messageAnnotations;
        }
        const copiedMessage = {
          // deep copy the message to ensure that deep changes (msg attachments) are updated
          // with SolidJS. SolidJS uses referential integration of sub-objects to detect changes.
          ...structuredClone(message),
          // add a revision id to ensure that the message is updated with SWR. SWR uses a
          // hashing approach by default to detect changes, but it only works for shallow
          // changes. This is why we need to add a revision id to ensure that the message
          // is updated with SWR (without it, the changes get stuck in SWR and are not
          // forwarded to rendering):
          revisionId: generateId2()
        };
        update({
          message: copiedMessage,
          data: copiedData,
          replaceLastMessage
        });
      }
      await processDataStream2({
        stream,
        onTextPart(value) {
          if (currentTextPart == null) {
            currentTextPart = {
              type: "text",
              text: value
            };
            message.parts.push(currentTextPart);
          } else {
            currentTextPart.text += value;
          }
          message.content += value;
          execUpdate();
        },
        onReasoningPart(value) {
          var _a2;
          if (currentReasoningTextDetail == null) {
            currentReasoningTextDetail = { type: "text", text: value };
            if (currentReasoningPart != null) {
              currentReasoningPart.details.push(currentReasoningTextDetail);
            }
          } else {
            currentReasoningTextDetail.text += value;
          }
          if (currentReasoningPart == null) {
            currentReasoningPart = {
              type: "reasoning",
              reasoning: value,
              details: [currentReasoningTextDetail]
            };
            message.parts.push(currentReasoningPart);
          } else {
            currentReasoningPart.reasoning += value;
          }
          message.reasoning = ((_a2 = message.reasoning) != null ? _a2 : "") + value;
          execUpdate();
        },
        onReasoningSignaturePart(value) {
          if (currentReasoningTextDetail != null) {
            currentReasoningTextDetail.signature = value.signature;
          }
        },
        onRedactedReasoningPart(value) {
          if (currentReasoningPart == null) {
            currentReasoningPart = {
              type: "reasoning",
              reasoning: "",
              details: []
            };
            message.parts.push(currentReasoningPart);
          }
          currentReasoningPart.details.push({
            type: "redacted",
            data: value.data
          });
          currentReasoningTextDetail = void 0;
          execUpdate();
        },
        onFilePart(value) {
          message.parts.push({
            type: "file",
            mimeType: value.mimeType,
            data: value.data
          });
          execUpdate();
        },
        onSourcePart(value) {
          message.parts.push({
            type: "source",
            source: value
          });
          execUpdate();
        },
        onToolCallStreamingStartPart(value) {
          if (message.toolInvocations == null) {
            message.toolInvocations = [];
          }
          partialToolCalls[value.toolCallId] = {
            text: "",
            step,
            toolName: value.toolName,
            index: message.toolInvocations.length
          };
          const invocation = {
            state: "partial-call",
            step,
            toolCallId: value.toolCallId,
            toolName: value.toolName,
            args: void 0
          };
          message.toolInvocations.push(invocation);
          updateToolInvocationPart(value.toolCallId, invocation);
          execUpdate();
        },
        onToolCallDeltaPart(value) {
          const partialToolCall = partialToolCalls[value.toolCallId];
          partialToolCall.text += value.argsTextDelta;
          const { value: partialArgs } = parsePartialJson(partialToolCall.text);
          const invocation = {
            state: "partial-call",
            step: partialToolCall.step,
            toolCallId: value.toolCallId,
            toolName: partialToolCall.toolName,
            args: partialArgs
          };
          message.toolInvocations[partialToolCall.index] = invocation;
          updateToolInvocationPart(value.toolCallId, invocation);
          execUpdate();
        },
        async onToolCallPart(value) {
          const invocation = {
            state: "call",
            step,
            ...value
          };
          if (partialToolCalls[value.toolCallId] != null) {
            message.toolInvocations[partialToolCalls[value.toolCallId].index] = invocation;
          } else {
            if (message.toolInvocations == null) {
              message.toolInvocations = [];
            }
            message.toolInvocations.push(invocation);
          }
          updateToolInvocationPart(value.toolCallId, invocation);
          execUpdate();
          if (onToolCall) {
            const result = await onToolCall({ toolCall: value });
            if (result != null) {
              const invocation2 = {
                state: "result",
                step,
                ...value,
                result
              };
              message.toolInvocations[message.toolInvocations.length - 1] = invocation2;
              updateToolInvocationPart(value.toolCallId, invocation2);
              execUpdate();
            }
          }
        },
        onToolResultPart(value) {
          const toolInvocations = message.toolInvocations;
          if (toolInvocations == null) {
            throw new Error("tool_result must be preceded by a tool_call");
          }
          const toolInvocationIndex = toolInvocations.findIndex(
            (invocation2) => invocation2.toolCallId === value.toolCallId
          );
          if (toolInvocationIndex === -1) {
            throw new Error(
              "tool_result must be preceded by a tool_call with the same toolCallId"
            );
          }
          const invocation = {
            ...toolInvocations[toolInvocationIndex],
            state: "result",
            ...value
          };
          toolInvocations[toolInvocationIndex] = invocation;
          updateToolInvocationPart(value.toolCallId, invocation);
          execUpdate();
        },
        onDataPart(value) {
          data.push(...value);
          execUpdate();
        },
        onMessageAnnotationsPart(value) {
          if (messageAnnotations == null) {
            messageAnnotations = [...value];
          } else {
            messageAnnotations.push(...value);
          }
          execUpdate();
        },
        onFinishStepPart(value) {
          step += 1;
          currentTextPart = value.isContinued ? currentTextPart : void 0;
          currentReasoningPart = void 0;
          currentReasoningTextDetail = void 0;
        },
        onStartStepPart(value) {
          if (!replaceLastMessage) {
            message.id = value.messageId;
          }
        },
        onFinishMessagePart(value) {
          finishReason = value.finishReason;
          if (value.usage != null) {
            usage = calculateLanguageModelUsage(value.usage);
          }
        },
        onErrorPart(error) {
          throw new Error(error);
        }
      });
      onFinish == null ? void 0 : onFinish({ message, finishReason, usage });
    }
    var import_provider_utils3 = require_dist3();
    async function processTextStream2({
      stream,
      onTextPart
    }) {
      const reader = stream.pipeThrough(new TextDecoderStream()).getReader();
      while (true) {
        const { done, value } = await reader.read();
        if (done) {
          break;
        }
        await onTextPart(value);
      }
    }
    async function processChatTextResponse({
      stream,
      update,
      onFinish,
      getCurrentDate = () => /* @__PURE__ */ new Date(),
      generateId: generateId2 = import_provider_utils3.generateId
    }) {
      const textPart = { type: "text", text: "" };
      const resultMessage = {
        id: generateId2(),
        createdAt: getCurrentDate(),
        role: "assistant",
        content: "",
        parts: [textPart]
      };
      await processTextStream2({
        stream,
        onTextPart: (chunk) => {
          resultMessage.content += chunk;
          textPart.text += chunk;
          update({
            message: { ...resultMessage },
            data: [],
            replaceLastMessage: false
          });
        }
      });
      onFinish == null ? void 0 : onFinish(resultMessage, {
        usage: { completionTokens: NaN, promptTokens: NaN, totalTokens: NaN },
        finishReason: "unknown"
      });
    }
    var getOriginalFetch = () => fetch;
    async function callChatApi({
      api,
      body,
      streamProtocol = "data",
      credentials,
      headers,
      abortController,
      restoreMessagesOnFailure,
      onResponse,
      onUpdate,
      onFinish,
      onToolCall,
      generateId: generateId2,
      fetch: fetch2 = getOriginalFetch(),
      lastMessage
    }) {
      var _a, _b;
      const response = await fetch2(api, {
        method: "POST",
        body: JSON.stringify(body),
        headers: {
          "Content-Type": "application/json",
          ...headers
        },
        signal: (_a = abortController == null ? void 0 : abortController()) == null ? void 0 : _a.signal,
        credentials
      }).catch((err) => {
        restoreMessagesOnFailure();
        throw err;
      });
      if (onResponse) {
        try {
          await onResponse(response);
        } catch (err) {
          throw err;
        }
      }
      if (!response.ok) {
        restoreMessagesOnFailure();
        throw new Error(
          (_b = await response.text()) != null ? _b : "Failed to fetch the chat response."
        );
      }
      if (!response.body) {
        throw new Error("The response body is empty.");
      }
      switch (streamProtocol) {
        case "text": {
          await processChatTextResponse({
            stream: response.body,
            update: onUpdate,
            onFinish,
            generateId: generateId2
          });
          return;
        }
        case "data": {
          await processChatResponse({
            stream: response.body,
            update: onUpdate,
            lastMessage,
            onToolCall,
            onFinish({ message, finishReason, usage }) {
              if (onFinish && message != null) {
                onFinish(message, { usage, finishReason });
              }
            },
            generateId: generateId2
          });
          return;
        }
        default: {
          const exhaustiveCheck = streamProtocol;
          throw new Error(`Unknown stream protocol: ${exhaustiveCheck}`);
        }
      }
    }
    var getOriginalFetch2 = () => fetch;
    async function callCompletionApi({
      api,
      prompt,
      credentials,
      headers,
      body,
      streamProtocol = "data",
      setCompletion,
      setLoading,
      setError,
      setAbortController,
      onResponse,
      onFinish,
      onError,
      onData,
      fetch: fetch2 = getOriginalFetch2()
    }) {
      var _a;
      try {
        setLoading(true);
        setError(void 0);
        const abortController = new AbortController();
        setAbortController(abortController);
        setCompletion("");
        const response = await fetch2(api, {
          method: "POST",
          body: JSON.stringify({
            prompt,
            ...body
          }),
          credentials,
          headers: {
            "Content-Type": "application/json",
            ...headers
          },
          signal: abortController.signal
        }).catch((err) => {
          throw err;
        });
        if (onResponse) {
          try {
            await onResponse(response);
          } catch (err) {
            throw err;
          }
        }
        if (!response.ok) {
          throw new Error(
            (_a = await response.text()) != null ? _a : "Failed to fetch the chat response."
          );
        }
        if (!response.body) {
          throw new Error("The response body is empty.");
        }
        let result = "";
        switch (streamProtocol) {
          case "text": {
            await processTextStream2({
              stream: response.body,
              onTextPart: (chunk) => {
                result += chunk;
                setCompletion(result);
              }
            });
            break;
          }
          case "data": {
            await processDataStream2({
              stream: response.body,
              onTextPart(value) {
                result += value;
                setCompletion(result);
              },
              onDataPart(value) {
                onData == null ? void 0 : onData(value);
              },
              onErrorPart(value) {
                throw new Error(value);
              }
            });
            break;
          }
          default: {
            const exhaustiveCheck = streamProtocol;
            throw new Error(`Unknown stream protocol: ${exhaustiveCheck}`);
          }
        }
        if (onFinish) {
          onFinish(prompt, result);
        }
        setAbortController(null);
        return result;
      } catch (err) {
        if (err.name === "AbortError") {
          setAbortController(null);
          return null;
        }
        if (err instanceof Error) {
          if (onError) {
            onError(err);
          }
        }
        setError(err);
      } finally {
        setLoading(false);
      }
    }
    function getTextFromDataUrl(dataUrl) {
      const [header, base64Content] = dataUrl.split(",");
      const mimeType = header.split(";")[0].split(":")[1];
      if (mimeType == null || base64Content == null) {
        throw new Error("Invalid data URL format");
      }
      try {
        return window.atob(base64Content);
      } catch (error) {
        throw new Error(`Error decoding data URL`);
      }
    }
    function extractMaxToolInvocationStep(toolInvocations) {
      return toolInvocations == null ? void 0 : toolInvocations.reduce((max, toolInvocation) => {
        var _a;
        return Math.max(max, (_a = toolInvocation.step) != null ? _a : 0);
      }, 0);
    }
    function getMessageParts(message) {
      var _a;
      return (_a = message.parts) != null ? _a : [
        ...message.toolInvocations ? message.toolInvocations.map((toolInvocation) => ({
          type: "tool-invocation",
          toolInvocation
        })) : [],
        ...message.reasoning ? [
          {
            type: "reasoning",
            reasoning: message.reasoning,
            details: [{ type: "text", text: message.reasoning }]
          }
        ] : [],
        ...message.content ? [{ type: "text", text: message.content }] : []
      ];
    }
    function fillMessageParts(messages) {
      return messages.map((message) => ({
        ...message,
        parts: getMessageParts(message)
      }));
    }
    function isDeepEqualData(obj1, obj2) {
      if (obj1 === obj2)
        return true;
      if (obj1 == null || obj2 == null)
        return false;
      if (typeof obj1 !== "object" && typeof obj2 !== "object")
        return obj1 === obj2;
      if (obj1.constructor !== obj2.constructor)
        return false;
      if (obj1 instanceof Date && obj2 instanceof Date) {
        return obj1.getTime() === obj2.getTime();
      }
      if (Array.isArray(obj1)) {
        if (obj1.length !== obj2.length)
          return false;
        for (let i = 0; i < obj1.length; i++) {
          if (!isDeepEqualData(obj1[i], obj2[i]))
            return false;
        }
        return true;
      }
      const keys1 = Object.keys(obj1);
      const keys2 = Object.keys(obj2);
      if (keys1.length !== keys2.length)
        return false;
      for (const key of keys1) {
        if (!keys2.includes(key))
          return false;
        if (!isDeepEqualData(obj1[key], obj2[key]))
          return false;
      }
      return true;
    }
    async function prepareAttachmentsForRequest(attachmentsFromOptions) {
      if (!attachmentsFromOptions) {
        return [];
      }
      if (attachmentsFromOptions instanceof FileList) {
        return Promise.all(
          Array.from(attachmentsFromOptions).map(async (attachment) => {
            const { name, type } = attachment;
            const dataUrl = await new Promise((resolve3, reject) => {
              const reader = new FileReader();
              reader.onload = (readerEvent) => {
                var _a;
                resolve3((_a = readerEvent.target) == null ? void 0 : _a.result);
              };
              reader.onerror = (error) => reject(error);
              reader.readAsDataURL(attachment);
            });
            return {
              name,
              contentType: type,
              url: dataUrl
            };
          })
        );
      }
      if (Array.isArray(attachmentsFromOptions)) {
        return attachmentsFromOptions;
      }
      throw new Error("Invalid attachments type");
    }
    var NEWLINE2 = "\n".charCodeAt(0);
    function concatChunks2(chunks, totalLength) {
      const concatenatedChunks = new Uint8Array(totalLength);
      let offset = 0;
      for (const chunk of chunks) {
        concatenatedChunks.set(chunk, offset);
        offset += chunk.length;
      }
      chunks.length = 0;
      return concatenatedChunks;
    }
    async function processAssistantStream({
      stream,
      onTextPart,
      onErrorPart,
      onAssistantMessagePart,
      onAssistantControlDataPart,
      onDataMessagePart
    }) {
      const reader = stream.getReader();
      const decoder = new TextDecoder();
      const chunks = [];
      let totalLength = 0;
      while (true) {
        const { value } = await reader.read();
        if (value) {
          chunks.push(value);
          totalLength += value.length;
          if (value[value.length - 1] !== NEWLINE2) {
            continue;
          }
        }
        if (chunks.length === 0) {
          break;
        }
        const concatenatedChunks = concatChunks2(chunks, totalLength);
        totalLength = 0;
        const streamParts = decoder.decode(concatenatedChunks, { stream: true }).split("\n").filter((line) => line !== "").map(parseAssistantStreamPart2);
        for (const { type, value: value2 } of streamParts) {
          switch (type) {
            case "text":
              await (onTextPart == null ? void 0 : onTextPart(value2));
              break;
            case "error":
              await (onErrorPart == null ? void 0 : onErrorPart(value2));
              break;
            case "assistant_message":
              await (onAssistantMessagePart == null ? void 0 : onAssistantMessagePart(value2));
              break;
            case "assistant_control_data":
              await (onAssistantControlDataPart == null ? void 0 : onAssistantControlDataPart(value2));
              break;
            case "data_message":
              await (onDataMessagePart == null ? void 0 : onDataMessagePart(value2));
              break;
            default: {
              const exhaustiveCheck = type;
              throw new Error(`Unknown stream part type: ${exhaustiveCheck}`);
            }
          }
        }
      }
    }
    var import_provider_utils4 = require_dist3();
    var import_zod_to_json_schema = __toESM2(require_cjs());
    function zodSchema2(zodSchema22, options) {
      var _a;
      const useReferences = (_a = options == null ? void 0 : options.useReferences) != null ? _a : false;
      return jsonSchema2(
        (0, import_zod_to_json_schema.default)(zodSchema22, {
          $refStrategy: useReferences ? "root" : "none",
          target: "jsonSchema7"
          // note: openai mode breaks various gemini conversions
        }),
        {
          validate: (value) => {
            const result = zodSchema22.safeParse(value);
            return result.success ? { success: true, value: result.data } : { success: false, error: result.error };
          }
        }
      );
    }
    var schemaSymbol = Symbol.for("vercel.ai.schema");
    function jsonSchema2(jsonSchema22, {
      validate
    } = {}) {
      return {
        [schemaSymbol]: true,
        _type: void 0,
        // should never be used directly
        [import_provider_utils4.validatorSymbol]: true,
        jsonSchema: jsonSchema22,
        validate
      };
    }
    function isSchema(value) {
      return typeof value === "object" && value !== null && schemaSymbol in value && value[schemaSymbol] === true && "jsonSchema" in value && "validate" in value;
    }
    function asSchema(schema) {
      return isSchema(schema) ? schema : zodSchema2(schema);
    }
    function shouldResubmitMessages({
      originalMaxToolInvocationStep,
      originalMessageCount,
      maxSteps,
      messages
    }) {
      var _a;
      const lastMessage = messages[messages.length - 1];
      return (
        // check if the feature is enabled:
        maxSteps > 1 && // ensure there is a last message:
        lastMessage != null && // ensure we actually have new steps (to prevent infinite loops in case of errors):
        (messages.length > originalMessageCount || extractMaxToolInvocationStep(lastMessage.toolInvocations) !== originalMaxToolInvocationStep) && // check that next step is possible:
        isAssistantMessageWithCompletedToolCalls(lastMessage) && // check that assistant has not answered yet:
        !isLastToolInvocationFollowedByText(lastMessage) && // limit the number of automatic steps:
        ((_a = extractMaxToolInvocationStep(lastMessage.toolInvocations)) != null ? _a : 0) < maxSteps
      );
    }
    function isLastToolInvocationFollowedByText(message) {
      let isLastToolInvocationFollowedByText2 = false;
      message.parts.forEach((part) => {
        if (part.type === "text") {
          isLastToolInvocationFollowedByText2 = true;
        }
        if (part.type === "tool-invocation") {
          isLastToolInvocationFollowedByText2 = false;
        }
      });
      return isLastToolInvocationFollowedByText2;
    }
    function isAssistantMessageWithCompletedToolCalls(message) {
      return message.role === "assistant" && message.parts.filter((part) => part.type === "tool-invocation").every((part) => "result" in part.toolInvocation);
    }
    function updateToolCallResult({
      messages,
      toolCallId,
      toolResult: result
    }) {
      var _a;
      const lastMessage = messages[messages.length - 1];
      const invocationPart = lastMessage.parts.find(
        (part) => part.type === "tool-invocation" && part.toolInvocation.toolCallId === toolCallId
      );
      if (invocationPart == null) {
        return;
      }
      const toolResult = {
        ...invocationPart.toolInvocation,
        state: "result",
        result
      };
      invocationPart.toolInvocation = toolResult;
      lastMessage.toolInvocations = (_a = lastMessage.toolInvocations) == null ? void 0 : _a.map(
        (toolInvocation) => toolInvocation.toolCallId === toolCallId ? toolResult : toolInvocation
      );
    }
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/platform/node/globalThis.js
var _globalThis;
var init_globalThis = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/platform/node/globalThis.js"() {
    _globalThis = typeof globalThis === "object" ? globalThis : global;
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/platform/node/index.js
var init_node = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/platform/node/index.js"() {
    init_globalThis();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/platform/index.js
var init_platform = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/platform/index.js"() {
    init_node();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/version.js
var VERSION;
var init_version = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/version.js"() {
    VERSION = "1.9.0";
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/internal/semver.js
function _makeCompatibilityCheck(ownVersion) {
  var acceptedVersions = /* @__PURE__ */ new Set([ownVersion]);
  var rejectedVersions = /* @__PURE__ */ new Set();
  var myVersionMatch = ownVersion.match(re);
  if (!myVersionMatch) {
    return function() {
      return false;
    };
  }
  var ownVersionParsed = {
    major: +myVersionMatch[1],
    minor: +myVersionMatch[2],
    patch: +myVersionMatch[3],
    prerelease: myVersionMatch[4]
  };
  if (ownVersionParsed.prerelease != null) {
    return function isExactmatch(globalVersion) {
      return globalVersion === ownVersion;
    };
  }
  function _reject(v) {
    rejectedVersions.add(v);
    return false;
  }
  function _accept(v) {
    acceptedVersions.add(v);
    return true;
  }
  return function isCompatible2(globalVersion) {
    if (acceptedVersions.has(globalVersion)) {
      return true;
    }
    if (rejectedVersions.has(globalVersion)) {
      return false;
    }
    var globalVersionMatch = globalVersion.match(re);
    if (!globalVersionMatch) {
      return _reject(globalVersion);
    }
    var globalVersionParsed = {
      major: +globalVersionMatch[1],
      minor: +globalVersionMatch[2],
      patch: +globalVersionMatch[3],
      prerelease: globalVersionMatch[4]
    };
    if (globalVersionParsed.prerelease != null) {
      return _reject(globalVersion);
    }
    if (ownVersionParsed.major !== globalVersionParsed.major) {
      return _reject(globalVersion);
    }
    if (ownVersionParsed.major === 0) {
      if (ownVersionParsed.minor === globalVersionParsed.minor && ownVersionParsed.patch <= globalVersionParsed.patch) {
        return _accept(globalVersion);
      }
      return _reject(globalVersion);
    }
    if (ownVersionParsed.minor <= globalVersionParsed.minor) {
      return _accept(globalVersion);
    }
    return _reject(globalVersion);
  };
}
var re, isCompatible;
var init_semver = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/internal/semver.js"() {
    init_version();
    re = /^(\d+)\.(\d+)\.(\d+)(-(.+))?$/;
    isCompatible = _makeCompatibilityCheck(VERSION);
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/internal/global-utils.js
function registerGlobal(type, instance, diag3, allowOverride) {
  var _a;
  if (allowOverride === void 0) {
    allowOverride = false;
  }
  var api = _global[GLOBAL_OPENTELEMETRY_API_KEY] = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) !== null && _a !== void 0 ? _a : {
    version: VERSION
  };
  if (!allowOverride && api[type]) {
    var err = new Error("@opentelemetry/api: Attempted duplicate registration of API: " + type);
    diag3.error(err.stack || err.message);
    return false;
  }
  if (api.version !== VERSION) {
    var err = new Error("@opentelemetry/api: Registration of version v" + api.version + " for " + type + " does not match previously registered API v" + VERSION);
    diag3.error(err.stack || err.message);
    return false;
  }
  api[type] = instance;
  diag3.debug("@opentelemetry/api: Registered a global for " + type + " v" + VERSION + ".");
  return true;
}
function getGlobal(type) {
  var _a, _b;
  var globalVersion = (_a = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _a === void 0 ? void 0 : _a.version;
  if (!globalVersion || !isCompatible(globalVersion)) {
    return;
  }
  return (_b = _global[GLOBAL_OPENTELEMETRY_API_KEY]) === null || _b === void 0 ? void 0 : _b[type];
}
function unregisterGlobal(type, diag3) {
  diag3.debug("@opentelemetry/api: Unregistering a global for " + type + " v" + VERSION + ".");
  var api = _global[GLOBAL_OPENTELEMETRY_API_KEY];
  if (api) {
    delete api[type];
  }
}
var major, GLOBAL_OPENTELEMETRY_API_KEY, _global;
var init_global_utils = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/internal/global-utils.js"() {
    init_platform();
    init_version();
    init_semver();
    major = VERSION.split(".")[0];
    GLOBAL_OPENTELEMETRY_API_KEY = Symbol.for("opentelemetry.js.api." + major);
    _global = _globalThis;
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js
function logProxy(funcName, namespace, args) {
  var logger2 = getGlobal("diag");
  if (!logger2) {
    return;
  }
  args.unshift(namespace);
  return logger2[funcName].apply(logger2, __spreadArray([], __read(args), false));
}
var __read, __spreadArray, DiagComponentLogger;
var init_ComponentLogger = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag/ComponentLogger.js"() {
    init_global_utils();
    __read = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray = function(to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar)
              ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    DiagComponentLogger = /** @class */
    function() {
      function DiagComponentLogger2(props) {
        this._namespace = props.namespace || "DiagComponentLogger";
      }
      DiagComponentLogger2.prototype.debug = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return logProxy("debug", this._namespace, args);
      };
      DiagComponentLogger2.prototype.error = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return logProxy("error", this._namespace, args);
      };
      DiagComponentLogger2.prototype.info = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return logProxy("info", this._namespace, args);
      };
      DiagComponentLogger2.prototype.warn = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return logProxy("warn", this._namespace, args);
      };
      DiagComponentLogger2.prototype.verbose = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        return logProxy("verbose", this._namespace, args);
      };
      return DiagComponentLogger2;
    }();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag/types.js
var DiagLogLevel;
var init_types = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag/types.js"() {
    (function(DiagLogLevel2) {
      DiagLogLevel2[DiagLogLevel2["NONE"] = 0] = "NONE";
      DiagLogLevel2[DiagLogLevel2["ERROR"] = 30] = "ERROR";
      DiagLogLevel2[DiagLogLevel2["WARN"] = 50] = "WARN";
      DiagLogLevel2[DiagLogLevel2["INFO"] = 60] = "INFO";
      DiagLogLevel2[DiagLogLevel2["DEBUG"] = 70] = "DEBUG";
      DiagLogLevel2[DiagLogLevel2["VERBOSE"] = 80] = "VERBOSE";
      DiagLogLevel2[DiagLogLevel2["ALL"] = 9999] = "ALL";
    })(DiagLogLevel || (DiagLogLevel = {}));
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js
function createLogLevelDiagLogger(maxLevel, logger2) {
  if (maxLevel < DiagLogLevel.NONE) {
    maxLevel = DiagLogLevel.NONE;
  } else if (maxLevel > DiagLogLevel.ALL) {
    maxLevel = DiagLogLevel.ALL;
  }
  logger2 = logger2 || {};
  function _filterFunc(funcName, theLevel) {
    var theFunc = logger2[funcName];
    if (typeof theFunc === "function" && maxLevel >= theLevel) {
      return theFunc.bind(logger2);
    }
    return function() {
    };
  }
  return {
    error: _filterFunc("error", DiagLogLevel.ERROR),
    warn: _filterFunc("warn", DiagLogLevel.WARN),
    info: _filterFunc("info", DiagLogLevel.INFO),
    debug: _filterFunc("debug", DiagLogLevel.DEBUG),
    verbose: _filterFunc("verbose", DiagLogLevel.VERBOSE)
  };
}
var init_logLevelLogger = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag/internal/logLevelLogger.js"() {
    init_types();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/api/diag.js
var __read2, __spreadArray2, API_NAME, DiagAPI;
var init_diag = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/api/diag.js"() {
    init_ComponentLogger();
    init_logLevelLogger();
    init_types();
    init_global_utils();
    __read2 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray2 = function(to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar)
              ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    API_NAME = "diag";
    DiagAPI = /** @class */
    function() {
      function DiagAPI2() {
        function _logProxy(funcName) {
          return function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            var logger2 = getGlobal("diag");
            if (!logger2)
              return;
            return logger2[funcName].apply(logger2, __spreadArray2([], __read2(args), false));
          };
        }
        var self = this;
        var setLogger = function(logger2, optionsOrLogLevel) {
          var _a, _b, _c;
          if (optionsOrLogLevel === void 0) {
            optionsOrLogLevel = { logLevel: DiagLogLevel.INFO };
          }
          if (logger2 === self) {
            var err = new Error("Cannot use diag as the logger for itself. Please use a DiagLogger implementation like ConsoleDiagLogger or a custom implementation");
            self.error((_a = err.stack) !== null && _a !== void 0 ? _a : err.message);
            return false;
          }
          if (typeof optionsOrLogLevel === "number") {
            optionsOrLogLevel = {
              logLevel: optionsOrLogLevel
            };
          }
          var oldLogger = getGlobal("diag");
          var newLogger = createLogLevelDiagLogger((_b = optionsOrLogLevel.logLevel) !== null && _b !== void 0 ? _b : DiagLogLevel.INFO, logger2);
          if (oldLogger && !optionsOrLogLevel.suppressOverrideMessage) {
            var stack = (_c = new Error().stack) !== null && _c !== void 0 ? _c : "<failed to generate stacktrace>";
            oldLogger.warn("Current logger will be overwritten from " + stack);
            newLogger.warn("Current logger will overwrite one already registered from " + stack);
          }
          return registerGlobal("diag", newLogger, self, true);
        };
        self.setLogger = setLogger;
        self.disable = function() {
          unregisterGlobal(API_NAME, self);
        };
        self.createComponentLogger = function(options) {
          return new DiagComponentLogger(options);
        };
        self.verbose = _logProxy("verbose");
        self.debug = _logProxy("debug");
        self.info = _logProxy("info");
        self.warn = _logProxy("warn");
        self.error = _logProxy("error");
      }
      DiagAPI2.instance = function() {
        if (!this._instance) {
          this._instance = new DiagAPI2();
        }
        return this._instance;
      };
      return DiagAPI2;
    }();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js
var __read3, __values, BaggageImpl;
var init_baggage_impl = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/baggage/internal/baggage-impl.js"() {
    __read3 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __values = function(o) {
      var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    BaggageImpl = /** @class */
    function() {
      function BaggageImpl2(entries) {
        this._entries = entries ? new Map(entries) : /* @__PURE__ */ new Map();
      }
      BaggageImpl2.prototype.getEntry = function(key) {
        var entry = this._entries.get(key);
        if (!entry) {
          return void 0;
        }
        return Object.assign({}, entry);
      };
      BaggageImpl2.prototype.getAllEntries = function() {
        return Array.from(this._entries.entries()).map(function(_a) {
          var _b = __read3(_a, 2), k = _b[0], v = _b[1];
          return [k, v];
        });
      };
      BaggageImpl2.prototype.setEntry = function(key, entry) {
        var newBaggage = new BaggageImpl2(this._entries);
        newBaggage._entries.set(key, entry);
        return newBaggage;
      };
      BaggageImpl2.prototype.removeEntry = function(key) {
        var newBaggage = new BaggageImpl2(this._entries);
        newBaggage._entries.delete(key);
        return newBaggage;
      };
      BaggageImpl2.prototype.removeEntries = function() {
        var e_1, _a;
        var keys = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          keys[_i] = arguments[_i];
        }
        var newBaggage = new BaggageImpl2(this._entries);
        try {
          for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
            var key = keys_1_1.value;
            newBaggage._entries.delete(key);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return))
              _a.call(keys_1);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
        return newBaggage;
      };
      BaggageImpl2.prototype.clear = function() {
        return new BaggageImpl2();
      };
      return BaggageImpl2;
    }();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js
var baggageEntryMetadataSymbol;
var init_symbol = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/baggage/internal/symbol.js"() {
    baggageEntryMetadataSymbol = Symbol("BaggageEntryMetadata");
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/baggage/utils.js
function createBaggage(entries) {
  if (entries === void 0) {
    entries = {};
  }
  return new BaggageImpl(new Map(Object.entries(entries)));
}
function baggageEntryMetadataFromString(str) {
  if (typeof str !== "string") {
    diag.error("Cannot create baggage metadata from unknown type: " + typeof str);
    str = "";
  }
  return {
    __TYPE__: baggageEntryMetadataSymbol,
    toString: function() {
      return str;
    }
  };
}
var diag;
var init_utils = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/baggage/utils.js"() {
    init_diag();
    init_baggage_impl();
    init_symbol();
    diag = DiagAPI.instance();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/context/context.js
function createContextKey(description) {
  return Symbol.for(description);
}
var BaseContext, ROOT_CONTEXT;
var init_context = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/context/context.js"() {
    BaseContext = /** @class */
    /* @__PURE__ */ function() {
      function BaseContext2(parentContext) {
        var self = this;
        self._currentContext = parentContext ? new Map(parentContext) : /* @__PURE__ */ new Map();
        self.getValue = function(key) {
          return self._currentContext.get(key);
        };
        self.setValue = function(key, value) {
          var context2 = new BaseContext2(self._currentContext);
          context2._currentContext.set(key, value);
          return context2;
        };
        self.deleteValue = function(key) {
          var context2 = new BaseContext2(self._currentContext);
          context2._currentContext.delete(key);
          return context2;
        };
      }
      return BaseContext2;
    }();
    ROOT_CONTEXT = new BaseContext();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js
var consoleMap, DiagConsoleLogger;
var init_consoleLogger = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag/consoleLogger.js"() {
    consoleMap = [
      { n: "error", c: "error" },
      { n: "warn", c: "warn" },
      { n: "info", c: "info" },
      { n: "debug", c: "debug" },
      { n: "verbose", c: "trace" }
    ];
    DiagConsoleLogger = /** @class */
    /* @__PURE__ */ function() {
      function DiagConsoleLogger2() {
        function _consoleFunc(funcName) {
          return function() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
              args[_i] = arguments[_i];
            }
            if (console) {
              var theFunc = console[funcName];
              if (typeof theFunc !== "function") {
                theFunc = console.log;
              }
              if (typeof theFunc === "function") {
                return theFunc.apply(console, args);
              }
            }
          };
        }
        for (var i = 0; i < consoleMap.length; i++) {
          this[consoleMap[i].n] = _consoleFunc(consoleMap[i].c);
        }
      }
      return DiagConsoleLogger2;
    }();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/metrics/NoopMeter.js
function createNoopMeter() {
  return NOOP_METER;
}
var __extends, NoopMeter, NoopMetric, NoopCounterMetric, NoopUpDownCounterMetric, NoopGaugeMetric, NoopHistogramMetric, NoopObservableMetric, NoopObservableCounterMetric, NoopObservableGaugeMetric, NoopObservableUpDownCounterMetric, NOOP_METER, NOOP_COUNTER_METRIC, NOOP_GAUGE_METRIC, NOOP_HISTOGRAM_METRIC, NOOP_UP_DOWN_COUNTER_METRIC, NOOP_OBSERVABLE_COUNTER_METRIC, NOOP_OBSERVABLE_GAUGE_METRIC, NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;
var init_NoopMeter = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/metrics/NoopMeter.js"() {
    __extends = /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2)
            if (Object.prototype.hasOwnProperty.call(b2, p))
              d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    NoopMeter = /** @class */
    function() {
      function NoopMeter2() {
      }
      NoopMeter2.prototype.createGauge = function(_name, _options) {
        return NOOP_GAUGE_METRIC;
      };
      NoopMeter2.prototype.createHistogram = function(_name, _options) {
        return NOOP_HISTOGRAM_METRIC;
      };
      NoopMeter2.prototype.createCounter = function(_name, _options) {
        return NOOP_COUNTER_METRIC;
      };
      NoopMeter2.prototype.createUpDownCounter = function(_name, _options) {
        return NOOP_UP_DOWN_COUNTER_METRIC;
      };
      NoopMeter2.prototype.createObservableGauge = function(_name, _options) {
        return NOOP_OBSERVABLE_GAUGE_METRIC;
      };
      NoopMeter2.prototype.createObservableCounter = function(_name, _options) {
        return NOOP_OBSERVABLE_COUNTER_METRIC;
      };
      NoopMeter2.prototype.createObservableUpDownCounter = function(_name, _options) {
        return NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC;
      };
      NoopMeter2.prototype.addBatchObservableCallback = function(_callback, _observables) {
      };
      NoopMeter2.prototype.removeBatchObservableCallback = function(_callback) {
      };
      return NoopMeter2;
    }();
    NoopMetric = /** @class */
    /* @__PURE__ */ function() {
      function NoopMetric2() {
      }
      return NoopMetric2;
    }();
    NoopCounterMetric = /** @class */
    function(_super) {
      __extends(NoopCounterMetric2, _super);
      function NoopCounterMetric2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      NoopCounterMetric2.prototype.add = function(_value, _attributes) {
      };
      return NoopCounterMetric2;
    }(NoopMetric);
    NoopUpDownCounterMetric = /** @class */
    function(_super) {
      __extends(NoopUpDownCounterMetric2, _super);
      function NoopUpDownCounterMetric2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      NoopUpDownCounterMetric2.prototype.add = function(_value, _attributes) {
      };
      return NoopUpDownCounterMetric2;
    }(NoopMetric);
    NoopGaugeMetric = /** @class */
    function(_super) {
      __extends(NoopGaugeMetric2, _super);
      function NoopGaugeMetric2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      NoopGaugeMetric2.prototype.record = function(_value, _attributes) {
      };
      return NoopGaugeMetric2;
    }(NoopMetric);
    NoopHistogramMetric = /** @class */
    function(_super) {
      __extends(NoopHistogramMetric2, _super);
      function NoopHistogramMetric2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      NoopHistogramMetric2.prototype.record = function(_value, _attributes) {
      };
      return NoopHistogramMetric2;
    }(NoopMetric);
    NoopObservableMetric = /** @class */
    function() {
      function NoopObservableMetric2() {
      }
      NoopObservableMetric2.prototype.addCallback = function(_callback) {
      };
      NoopObservableMetric2.prototype.removeCallback = function(_callback) {
      };
      return NoopObservableMetric2;
    }();
    NoopObservableCounterMetric = /** @class */
    function(_super) {
      __extends(NoopObservableCounterMetric2, _super);
      function NoopObservableCounterMetric2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      return NoopObservableCounterMetric2;
    }(NoopObservableMetric);
    NoopObservableGaugeMetric = /** @class */
    function(_super) {
      __extends(NoopObservableGaugeMetric2, _super);
      function NoopObservableGaugeMetric2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      return NoopObservableGaugeMetric2;
    }(NoopObservableMetric);
    NoopObservableUpDownCounterMetric = /** @class */
    function(_super) {
      __extends(NoopObservableUpDownCounterMetric2, _super);
      function NoopObservableUpDownCounterMetric2() {
        return _super !== null && _super.apply(this, arguments) || this;
      }
      return NoopObservableUpDownCounterMetric2;
    }(NoopObservableMetric);
    NOOP_METER = new NoopMeter();
    NOOP_COUNTER_METRIC = new NoopCounterMetric();
    NOOP_GAUGE_METRIC = new NoopGaugeMetric();
    NOOP_HISTOGRAM_METRIC = new NoopHistogramMetric();
    NOOP_UP_DOWN_COUNTER_METRIC = new NoopUpDownCounterMetric();
    NOOP_OBSERVABLE_COUNTER_METRIC = new NoopObservableCounterMetric();
    NOOP_OBSERVABLE_GAUGE_METRIC = new NoopObservableGaugeMetric();
    NOOP_OBSERVABLE_UP_DOWN_COUNTER_METRIC = new NoopObservableUpDownCounterMetric();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/metrics/Metric.js
var ValueType;
var init_Metric = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/metrics/Metric.js"() {
    (function(ValueType2) {
      ValueType2[ValueType2["INT"] = 0] = "INT";
      ValueType2[ValueType2["DOUBLE"] = 1] = "DOUBLE";
    })(ValueType || (ValueType = {}));
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js
var defaultTextMapGetter, defaultTextMapSetter;
var init_TextMapPropagator = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/propagation/TextMapPropagator.js"() {
    defaultTextMapGetter = {
      get: function(carrier, key) {
        if (carrier == null) {
          return void 0;
        }
        return carrier[key];
      },
      keys: function(carrier) {
        if (carrier == null) {
          return [];
        }
        return Object.keys(carrier);
      }
    };
    defaultTextMapSetter = {
      set: function(carrier, key, value) {
        if (carrier == null) {
          return;
        }
        carrier[key] = value;
      }
    };
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js
var __read4, __spreadArray3, NoopContextManager;
var init_NoopContextManager = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/context/NoopContextManager.js"() {
    init_context();
    __read4 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray3 = function(to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar)
              ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    NoopContextManager = /** @class */
    function() {
      function NoopContextManager2() {
      }
      NoopContextManager2.prototype.active = function() {
        return ROOT_CONTEXT;
      };
      NoopContextManager2.prototype.with = function(_context, fn, thisArg) {
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
          args[_i - 3] = arguments[_i];
        }
        return fn.call.apply(fn, __spreadArray3([thisArg], __read4(args), false));
      };
      NoopContextManager2.prototype.bind = function(_context, target) {
        return target;
      };
      NoopContextManager2.prototype.enable = function() {
        return this;
      };
      NoopContextManager2.prototype.disable = function() {
        return this;
      };
      return NoopContextManager2;
    }();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/api/context.js
var __read5, __spreadArray4, API_NAME2, NOOP_CONTEXT_MANAGER, ContextAPI;
var init_context2 = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/api/context.js"() {
    init_NoopContextManager();
    init_global_utils();
    init_diag();
    __read5 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error) {
        e = { error };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spreadArray4 = function(to, from, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from.length, ar; i < l; i++) {
          if (ar || !(i in from)) {
            if (!ar)
              ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from));
    };
    API_NAME2 = "context";
    NOOP_CONTEXT_MANAGER = new NoopContextManager();
    ContextAPI = /** @class */
    function() {
      function ContextAPI2() {
      }
      ContextAPI2.getInstance = function() {
        if (!this._instance) {
          this._instance = new ContextAPI2();
        }
        return this._instance;
      };
      ContextAPI2.prototype.setGlobalContextManager = function(contextManager) {
        return registerGlobal(API_NAME2, contextManager, DiagAPI.instance());
      };
      ContextAPI2.prototype.active = function() {
        return this._getContextManager().active();
      };
      ContextAPI2.prototype.with = function(context2, fn, thisArg) {
        var _a;
        var args = [];
        for (var _i = 3; _i < arguments.length; _i++) {
          args[_i - 3] = arguments[_i];
        }
        return (_a = this._getContextManager()).with.apply(_a, __spreadArray4([context2, fn, thisArg], __read5(args), false));
      };
      ContextAPI2.prototype.bind = function(context2, target) {
        return this._getContextManager().bind(context2, target);
      };
      ContextAPI2.prototype._getContextManager = function() {
        return getGlobal(API_NAME2) || NOOP_CONTEXT_MANAGER;
      };
      ContextAPI2.prototype.disable = function() {
        this._getContextManager().disable();
        unregisterGlobal(API_NAME2, DiagAPI.instance());
      };
      return ContextAPI2;
    }();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js
var TraceFlags;
var init_trace_flags = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/trace_flags.js"() {
    (function(TraceFlags2) {
      TraceFlags2[TraceFlags2["NONE"] = 0] = "NONE";
      TraceFlags2[TraceFlags2["SAMPLED"] = 1] = "SAMPLED";
    })(TraceFlags || (TraceFlags = {}));
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js
var INVALID_SPANID, INVALID_TRACEID, INVALID_SPAN_CONTEXT;
var init_invalid_span_constants = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/invalid-span-constants.js"() {
    init_trace_flags();
    INVALID_SPANID = "0000000000000000";
    INVALID_TRACEID = "00000000000000000000000000000000";
    INVALID_SPAN_CONTEXT = {
      traceId: INVALID_TRACEID,
      spanId: INVALID_SPANID,
      traceFlags: TraceFlags.NONE
    };
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js
var NonRecordingSpan;
var init_NonRecordingSpan = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/NonRecordingSpan.js"() {
    init_invalid_span_constants();
    NonRecordingSpan = /** @class */
    function() {
      function NonRecordingSpan2(_spanContext) {
        if (_spanContext === void 0) {
          _spanContext = INVALID_SPAN_CONTEXT;
        }
        this._spanContext = _spanContext;
      }
      NonRecordingSpan2.prototype.spanContext = function() {
        return this._spanContext;
      };
      NonRecordingSpan2.prototype.setAttribute = function(_key, _value) {
        return this;
      };
      NonRecordingSpan2.prototype.setAttributes = function(_attributes) {
        return this;
      };
      NonRecordingSpan2.prototype.addEvent = function(_name, _attributes) {
        return this;
      };
      NonRecordingSpan2.prototype.addLink = function(_link) {
        return this;
      };
      NonRecordingSpan2.prototype.addLinks = function(_links) {
        return this;
      };
      NonRecordingSpan2.prototype.setStatus = function(_status) {
        return this;
      };
      NonRecordingSpan2.prototype.updateName = function(_name) {
        return this;
      };
      NonRecordingSpan2.prototype.end = function(_endTime) {
      };
      NonRecordingSpan2.prototype.isRecording = function() {
        return false;
      };
      NonRecordingSpan2.prototype.recordException = function(_exception, _time) {
      };
      return NonRecordingSpan2;
    }();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/context-utils.js
function getSpan(context2) {
  return context2.getValue(SPAN_KEY) || void 0;
}
function getActiveSpan() {
  return getSpan(ContextAPI.getInstance().active());
}
function setSpan(context2, span) {
  return context2.setValue(SPAN_KEY, span);
}
function deleteSpan(context2) {
  return context2.deleteValue(SPAN_KEY);
}
function setSpanContext(context2, spanContext) {
  return setSpan(context2, new NonRecordingSpan(spanContext));
}
function getSpanContext(context2) {
  var _a;
  return (_a = getSpan(context2)) === null || _a === void 0 ? void 0 : _a.spanContext();
}
var SPAN_KEY;
var init_context_utils = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/context-utils.js"() {
    init_context();
    init_NonRecordingSpan();
    init_context2();
    SPAN_KEY = createContextKey("OpenTelemetry Context Key SPAN");
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js
function isValidTraceId(traceId) {
  return VALID_TRACEID_REGEX.test(traceId) && traceId !== INVALID_TRACEID;
}
function isValidSpanId(spanId) {
  return VALID_SPANID_REGEX.test(spanId) && spanId !== INVALID_SPANID;
}
function isSpanContextValid(spanContext) {
  return isValidTraceId(spanContext.traceId) && isValidSpanId(spanContext.spanId);
}
function wrapSpanContext(spanContext) {
  return new NonRecordingSpan(spanContext);
}
var VALID_TRACEID_REGEX, VALID_SPANID_REGEX;
var init_spancontext_utils = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/spancontext-utils.js"() {
    init_invalid_span_constants();
    init_NonRecordingSpan();
    VALID_TRACEID_REGEX = /^([0-9a-f]{32})$/i;
    VALID_SPANID_REGEX = /^[0-9a-f]{16}$/i;
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js
function isSpanContext(spanContext) {
  return typeof spanContext === "object" && typeof spanContext["spanId"] === "string" && typeof spanContext["traceId"] === "string" && typeof spanContext["traceFlags"] === "number";
}
var contextApi, NoopTracer;
var init_NoopTracer = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/NoopTracer.js"() {
    init_context2();
    init_context_utils();
    init_NonRecordingSpan();
    init_spancontext_utils();
    contextApi = ContextAPI.getInstance();
    NoopTracer = /** @class */
    function() {
      function NoopTracer2() {
      }
      NoopTracer2.prototype.startSpan = function(name, options, context2) {
        if (context2 === void 0) {
          context2 = contextApi.active();
        }
        var root = Boolean(options === null || options === void 0 ? void 0 : options.root);
        if (root) {
          return new NonRecordingSpan();
        }
        var parentFromContext = context2 && getSpanContext(context2);
        if (isSpanContext(parentFromContext) && isSpanContextValid(parentFromContext)) {
          return new NonRecordingSpan(parentFromContext);
        } else {
          return new NonRecordingSpan();
        }
      };
      NoopTracer2.prototype.startActiveSpan = function(name, arg2, arg3, arg4) {
        var opts;
        var ctx;
        var fn;
        if (arguments.length < 2) {
          return;
        } else if (arguments.length === 2) {
          fn = arg2;
        } else if (arguments.length === 3) {
          opts = arg2;
          fn = arg3;
        } else {
          opts = arg2;
          ctx = arg3;
          fn = arg4;
        }
        var parentContext = ctx !== null && ctx !== void 0 ? ctx : contextApi.active();
        var span = this.startSpan(name, opts, parentContext);
        var contextWithSpanSet = setSpan(parentContext, span);
        return contextApi.with(contextWithSpanSet, fn, void 0, span);
      };
      return NoopTracer2;
    }();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js
var NOOP_TRACER, ProxyTracer;
var init_ProxyTracer = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/ProxyTracer.js"() {
    init_NoopTracer();
    NOOP_TRACER = new NoopTracer();
    ProxyTracer = /** @class */
    function() {
      function ProxyTracer2(_provider, name, version, options) {
        this._provider = _provider;
        this.name = name;
        this.version = version;
        this.options = options;
      }
      ProxyTracer2.prototype.startSpan = function(name, options, context2) {
        return this._getTracer().startSpan(name, options, context2);
      };
      ProxyTracer2.prototype.startActiveSpan = function(_name, _options, _context, _fn) {
        var tracer = this._getTracer();
        return Reflect.apply(tracer.startActiveSpan, tracer, arguments);
      };
      ProxyTracer2.prototype._getTracer = function() {
        if (this._delegate) {
          return this._delegate;
        }
        var tracer = this._provider.getDelegateTracer(this.name, this.version, this.options);
        if (!tracer) {
          return NOOP_TRACER;
        }
        this._delegate = tracer;
        return this._delegate;
      };
      return ProxyTracer2;
    }();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js
var NoopTracerProvider;
var init_NoopTracerProvider = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/NoopTracerProvider.js"() {
    init_NoopTracer();
    NoopTracerProvider = /** @class */
    function() {
      function NoopTracerProvider2() {
      }
      NoopTracerProvider2.prototype.getTracer = function(_name, _version, _options) {
        return new NoopTracer();
      };
      return NoopTracerProvider2;
    }();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js
var NOOP_TRACER_PROVIDER, ProxyTracerProvider;
var init_ProxyTracerProvider = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/ProxyTracerProvider.js"() {
    init_ProxyTracer();
    init_NoopTracerProvider();
    NOOP_TRACER_PROVIDER = new NoopTracerProvider();
    ProxyTracerProvider = /** @class */
    function() {
      function ProxyTracerProvider2() {
      }
      ProxyTracerProvider2.prototype.getTracer = function(name, version, options) {
        var _a;
        return (_a = this.getDelegateTracer(name, version, options)) !== null && _a !== void 0 ? _a : new ProxyTracer(this, name, version, options);
      };
      ProxyTracerProvider2.prototype.getDelegate = function() {
        var _a;
        return (_a = this._delegate) !== null && _a !== void 0 ? _a : NOOP_TRACER_PROVIDER;
      };
      ProxyTracerProvider2.prototype.setDelegate = function(delegate) {
        this._delegate = delegate;
      };
      ProxyTracerProvider2.prototype.getDelegateTracer = function(name, version, options) {
        var _a;
        return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version, options);
      };
      return ProxyTracerProvider2;
    }();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js
var SamplingDecision;
var init_SamplingResult = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/SamplingResult.js"() {
    (function(SamplingDecision2) {
      SamplingDecision2[SamplingDecision2["NOT_RECORD"] = 0] = "NOT_RECORD";
      SamplingDecision2[SamplingDecision2["RECORD"] = 1] = "RECORD";
      SamplingDecision2[SamplingDecision2["RECORD_AND_SAMPLED"] = 2] = "RECORD_AND_SAMPLED";
    })(SamplingDecision || (SamplingDecision = {}));
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/span_kind.js
var SpanKind;
var init_span_kind = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/span_kind.js"() {
    (function(SpanKind2) {
      SpanKind2[SpanKind2["INTERNAL"] = 0] = "INTERNAL";
      SpanKind2[SpanKind2["SERVER"] = 1] = "SERVER";
      SpanKind2[SpanKind2["CLIENT"] = 2] = "CLIENT";
      SpanKind2[SpanKind2["PRODUCER"] = 3] = "PRODUCER";
      SpanKind2[SpanKind2["CONSUMER"] = 4] = "CONSUMER";
    })(SpanKind || (SpanKind = {}));
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/status.js
var SpanStatusCode;
var init_status = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/status.js"() {
    (function(SpanStatusCode2) {
      SpanStatusCode2[SpanStatusCode2["UNSET"] = 0] = "UNSET";
      SpanStatusCode2[SpanStatusCode2["OK"] = 1] = "OK";
      SpanStatusCode2[SpanStatusCode2["ERROR"] = 2] = "ERROR";
    })(SpanStatusCode || (SpanStatusCode = {}));
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-validators.js
function validateKey(key) {
  return VALID_KEY_REGEX.test(key);
}
function validateValue(value) {
  return VALID_VALUE_BASE_REGEX.test(value) && !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value);
}
var VALID_KEY_CHAR_RANGE, VALID_KEY, VALID_VENDOR_KEY, VALID_KEY_REGEX, VALID_VALUE_BASE_REGEX, INVALID_VALUE_COMMA_EQUAL_REGEX;
var init_tracestate_validators = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-validators.js"() {
    VALID_KEY_CHAR_RANGE = "[_0-9a-z-*/]";
    VALID_KEY = "[a-z]" + VALID_KEY_CHAR_RANGE + "{0,255}";
    VALID_VENDOR_KEY = "[a-z0-9]" + VALID_KEY_CHAR_RANGE + "{0,240}@[a-z]" + VALID_KEY_CHAR_RANGE + "{0,13}";
    VALID_KEY_REGEX = new RegExp("^(?:" + VALID_KEY + "|" + VALID_VENDOR_KEY + ")$");
    VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;
    INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-impl.js
var MAX_TRACE_STATE_ITEMS, MAX_TRACE_STATE_LEN, LIST_MEMBERS_SEPARATOR, LIST_MEMBER_KEY_VALUE_SPLITTER, TraceStateImpl;
var init_tracestate_impl = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/internal/tracestate-impl.js"() {
    init_tracestate_validators();
    MAX_TRACE_STATE_ITEMS = 32;
    MAX_TRACE_STATE_LEN = 512;
    LIST_MEMBERS_SEPARATOR = ",";
    LIST_MEMBER_KEY_VALUE_SPLITTER = "=";
    TraceStateImpl = /** @class */
    function() {
      function TraceStateImpl2(rawTraceState) {
        this._internalState = /* @__PURE__ */ new Map();
        if (rawTraceState)
          this._parse(rawTraceState);
      }
      TraceStateImpl2.prototype.set = function(key, value) {
        var traceState = this._clone();
        if (traceState._internalState.has(key)) {
          traceState._internalState.delete(key);
        }
        traceState._internalState.set(key, value);
        return traceState;
      };
      TraceStateImpl2.prototype.unset = function(key) {
        var traceState = this._clone();
        traceState._internalState.delete(key);
        return traceState;
      };
      TraceStateImpl2.prototype.get = function(key) {
        return this._internalState.get(key);
      };
      TraceStateImpl2.prototype.serialize = function() {
        var _this = this;
        return this._keys().reduce(function(agg, key) {
          agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + _this.get(key));
          return agg;
        }, []).join(LIST_MEMBERS_SEPARATOR);
      };
      TraceStateImpl2.prototype._parse = function(rawTraceState) {
        if (rawTraceState.length > MAX_TRACE_STATE_LEN)
          return;
        this._internalState = rawTraceState.split(LIST_MEMBERS_SEPARATOR).reverse().reduce(function(agg, part) {
          var listMember = part.trim();
          var i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);
          if (i !== -1) {
            var key = listMember.slice(0, i);
            var value = listMember.slice(i + 1, part.length);
            if (validateKey(key) && validateValue(value)) {
              agg.set(key, value);
            } else {
            }
          }
          return agg;
        }, /* @__PURE__ */ new Map());
        if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {
          this._internalState = new Map(Array.from(this._internalState.entries()).reverse().slice(0, MAX_TRACE_STATE_ITEMS));
        }
      };
      TraceStateImpl2.prototype._keys = function() {
        return Array.from(this._internalState.keys()).reverse();
      };
      TraceStateImpl2.prototype._clone = function() {
        var traceState = new TraceStateImpl2();
        traceState._internalState = new Map(this._internalState);
        return traceState;
      };
      return TraceStateImpl2;
    }();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/internal/utils.js
function createTraceState(rawTraceState) {
  return new TraceStateImpl(rawTraceState);
}
var init_utils2 = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace/internal/utils.js"() {
    init_tracestate_impl();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/context-api.js
var context;
var init_context_api = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/context-api.js"() {
    init_context2();
    context = ContextAPI.getInstance();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag-api.js
var diag2;
var init_diag_api = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/diag-api.js"() {
    init_diag();
    diag2 = DiagAPI.instance();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/metrics/NoopMeterProvider.js
var NoopMeterProvider, NOOP_METER_PROVIDER;
var init_NoopMeterProvider = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/metrics/NoopMeterProvider.js"() {
    init_NoopMeter();
    NoopMeterProvider = /** @class */
    function() {
      function NoopMeterProvider2() {
      }
      NoopMeterProvider2.prototype.getMeter = function(_name, _version, _options) {
        return NOOP_METER;
      };
      return NoopMeterProvider2;
    }();
    NOOP_METER_PROVIDER = new NoopMeterProvider();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/api/metrics.js
var API_NAME3, MetricsAPI;
var init_metrics = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/api/metrics.js"() {
    init_NoopMeterProvider();
    init_global_utils();
    init_diag();
    API_NAME3 = "metrics";
    MetricsAPI = /** @class */
    function() {
      function MetricsAPI2() {
      }
      MetricsAPI2.getInstance = function() {
        if (!this._instance) {
          this._instance = new MetricsAPI2();
        }
        return this._instance;
      };
      MetricsAPI2.prototype.setGlobalMeterProvider = function(provider) {
        return registerGlobal(API_NAME3, provider, DiagAPI.instance());
      };
      MetricsAPI2.prototype.getMeterProvider = function() {
        return getGlobal(API_NAME3) || NOOP_METER_PROVIDER;
      };
      MetricsAPI2.prototype.getMeter = function(name, version, options) {
        return this.getMeterProvider().getMeter(name, version, options);
      };
      MetricsAPI2.prototype.disable = function() {
        unregisterGlobal(API_NAME3, DiagAPI.instance());
      };
      return MetricsAPI2;
    }();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/metrics-api.js
var metrics;
var init_metrics_api = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/metrics-api.js"() {
    init_metrics();
    metrics = MetricsAPI.getInstance();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js
var NoopTextMapPropagator;
var init_NoopTextMapPropagator = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/propagation/NoopTextMapPropagator.js"() {
    NoopTextMapPropagator = /** @class */
    function() {
      function NoopTextMapPropagator2() {
      }
      NoopTextMapPropagator2.prototype.inject = function(_context, _carrier) {
      };
      NoopTextMapPropagator2.prototype.extract = function(context2, _carrier) {
        return context2;
      };
      NoopTextMapPropagator2.prototype.fields = function() {
        return [];
      };
      return NoopTextMapPropagator2;
    }();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js
function getBaggage(context2) {
  return context2.getValue(BAGGAGE_KEY) || void 0;
}
function getActiveBaggage() {
  return getBaggage(ContextAPI.getInstance().active());
}
function setBaggage(context2, baggage) {
  return context2.setValue(BAGGAGE_KEY, baggage);
}
function deleteBaggage(context2) {
  return context2.deleteValue(BAGGAGE_KEY);
}
var BAGGAGE_KEY;
var init_context_helpers = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/baggage/context-helpers.js"() {
    init_context2();
    init_context();
    BAGGAGE_KEY = createContextKey("OpenTelemetry Baggage Key");
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/api/propagation.js
var API_NAME4, NOOP_TEXT_MAP_PROPAGATOR, PropagationAPI;
var init_propagation = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/api/propagation.js"() {
    init_global_utils();
    init_NoopTextMapPropagator();
    init_TextMapPropagator();
    init_context_helpers();
    init_utils();
    init_diag();
    API_NAME4 = "propagation";
    NOOP_TEXT_MAP_PROPAGATOR = new NoopTextMapPropagator();
    PropagationAPI = /** @class */
    function() {
      function PropagationAPI2() {
        this.createBaggage = createBaggage;
        this.getBaggage = getBaggage;
        this.getActiveBaggage = getActiveBaggage;
        this.setBaggage = setBaggage;
        this.deleteBaggage = deleteBaggage;
      }
      PropagationAPI2.getInstance = function() {
        if (!this._instance) {
          this._instance = new PropagationAPI2();
        }
        return this._instance;
      };
      PropagationAPI2.prototype.setGlobalPropagator = function(propagator) {
        return registerGlobal(API_NAME4, propagator, DiagAPI.instance());
      };
      PropagationAPI2.prototype.inject = function(context2, carrier, setter) {
        if (setter === void 0) {
          setter = defaultTextMapSetter;
        }
        return this._getGlobalPropagator().inject(context2, carrier, setter);
      };
      PropagationAPI2.prototype.extract = function(context2, carrier, getter) {
        if (getter === void 0) {
          getter = defaultTextMapGetter;
        }
        return this._getGlobalPropagator().extract(context2, carrier, getter);
      };
      PropagationAPI2.prototype.fields = function() {
        return this._getGlobalPropagator().fields();
      };
      PropagationAPI2.prototype.disable = function() {
        unregisterGlobal(API_NAME4, DiagAPI.instance());
      };
      PropagationAPI2.prototype._getGlobalPropagator = function() {
        return getGlobal(API_NAME4) || NOOP_TEXT_MAP_PROPAGATOR;
      };
      return PropagationAPI2;
    }();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/propagation-api.js
var propagation;
var init_propagation_api = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/propagation-api.js"() {
    init_propagation();
    propagation = PropagationAPI.getInstance();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/api/trace.js
var API_NAME5, TraceAPI;
var init_trace = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/api/trace.js"() {
    init_global_utils();
    init_ProxyTracerProvider();
    init_spancontext_utils();
    init_context_utils();
    init_diag();
    API_NAME5 = "trace";
    TraceAPI = /** @class */
    function() {
      function TraceAPI2() {
        this._proxyTracerProvider = new ProxyTracerProvider();
        this.wrapSpanContext = wrapSpanContext;
        this.isSpanContextValid = isSpanContextValid;
        this.deleteSpan = deleteSpan;
        this.getSpan = getSpan;
        this.getActiveSpan = getActiveSpan;
        this.getSpanContext = getSpanContext;
        this.setSpan = setSpan;
        this.setSpanContext = setSpanContext;
      }
      TraceAPI2.getInstance = function() {
        if (!this._instance) {
          this._instance = new TraceAPI2();
        }
        return this._instance;
      };
      TraceAPI2.prototype.setGlobalTracerProvider = function(provider) {
        var success = registerGlobal(API_NAME5, this._proxyTracerProvider, DiagAPI.instance());
        if (success) {
          this._proxyTracerProvider.setDelegate(provider);
        }
        return success;
      };
      TraceAPI2.prototype.getTracerProvider = function() {
        return getGlobal(API_NAME5) || this._proxyTracerProvider;
      };
      TraceAPI2.prototype.getTracer = function(name, version) {
        return this.getTracerProvider().getTracer(name, version);
      };
      TraceAPI2.prototype.disable = function() {
        unregisterGlobal(API_NAME5, DiagAPI.instance());
        this._proxyTracerProvider = new ProxyTracerProvider();
      };
      return TraceAPI2;
    }();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace-api.js
var trace;
var init_trace_api = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/trace-api.js"() {
    init_trace();
    trace = TraceAPI.getInstance();
  }
});

// node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  DiagConsoleLogger: () => DiagConsoleLogger,
  DiagLogLevel: () => DiagLogLevel,
  INVALID_SPANID: () => INVALID_SPANID,
  INVALID_SPAN_CONTEXT: () => INVALID_SPAN_CONTEXT,
  INVALID_TRACEID: () => INVALID_TRACEID,
  ProxyTracer: () => ProxyTracer,
  ProxyTracerProvider: () => ProxyTracerProvider,
  ROOT_CONTEXT: () => ROOT_CONTEXT,
  SamplingDecision: () => SamplingDecision,
  SpanKind: () => SpanKind,
  SpanStatusCode: () => SpanStatusCode,
  TraceFlags: () => TraceFlags,
  ValueType: () => ValueType,
  baggageEntryMetadataFromString: () => baggageEntryMetadataFromString,
  context: () => context,
  createContextKey: () => createContextKey,
  createNoopMeter: () => createNoopMeter,
  createTraceState: () => createTraceState,
  default: () => esm_default,
  defaultTextMapGetter: () => defaultTextMapGetter,
  defaultTextMapSetter: () => defaultTextMapSetter,
  diag: () => diag2,
  isSpanContextValid: () => isSpanContextValid,
  isValidSpanId: () => isValidSpanId,
  isValidTraceId: () => isValidTraceId,
  metrics: () => metrics,
  propagation: () => propagation,
  trace: () => trace
});
var esm_default;
var init_esm = __esm({
  "node_modules/.pnpm/@opentelemetry+api@1.9.0/node_modules/@opentelemetry/api/build/esm/index.js"() {
    init_utils();
    init_context();
    init_consoleLogger();
    init_types();
    init_NoopMeter();
    init_Metric();
    init_TextMapPropagator();
    init_ProxyTracer();
    init_ProxyTracerProvider();
    init_SamplingResult();
    init_span_kind();
    init_status();
    init_trace_flags();
    init_utils2();
    init_spancontext_utils();
    init_invalid_span_constants();
    init_context_api();
    init_diag_api();
    init_metrics_api();
    init_propagation_api();
    init_trace_api();
    esm_default = {
      context,
      diag: diag2,
      metrics,
      propagation,
      trace
    };
  }
});

// node_modules/.pnpm/ai@4.2.0_react@19.0.0_zod@3.24.2/node_modules/ai/dist/index.js
var require_dist8 = __commonJS({
  "node_modules/.pnpm/ai@4.2.0_react@19.0.0_zod@3.24.2/node_modules/ai/dist/index.js"(exports2, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = (target, all) => {
      for (var name17 in all)
        __defProp2(target, name17, { get: all[name17], enumerable: true });
    };
    var __copyProps2 = (to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    };
    var __toCommonJS2 = (mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod);
    var streams_exports = {};
    __export2(streams_exports, {
      AISDKError: () => import_provider20.AISDKError,
      APICallError: () => import_provider20.APICallError,
      AssistantResponse: () => AssistantResponse,
      DownloadError: () => DownloadError,
      EmptyResponseBodyError: () => import_provider20.EmptyResponseBodyError,
      InvalidArgumentError: () => InvalidArgumentError,
      InvalidDataContentError: () => InvalidDataContentError,
      InvalidMessageRoleError: () => InvalidMessageRoleError,
      InvalidPromptError: () => import_provider20.InvalidPromptError,
      InvalidResponseDataError: () => import_provider20.InvalidResponseDataError,
      InvalidStreamPartError: () => InvalidStreamPartError,
      InvalidToolArgumentsError: () => InvalidToolArgumentsError,
      JSONParseError: () => import_provider20.JSONParseError,
      LangChainAdapter: () => langchain_adapter_exports,
      LlamaIndexAdapter: () => llamaindex_adapter_exports,
      LoadAPIKeyError: () => import_provider20.LoadAPIKeyError,
      MCPClientError: () => MCPClientError,
      MessageConversionError: () => MessageConversionError,
      NoContentGeneratedError: () => import_provider20.NoContentGeneratedError,
      NoImageGeneratedError: () => NoImageGeneratedError,
      NoObjectGeneratedError: () => NoObjectGeneratedError,
      NoOutputSpecifiedError: () => NoOutputSpecifiedError,
      NoSuchModelError: () => import_provider20.NoSuchModelError,
      NoSuchProviderError: () => NoSuchProviderError,
      NoSuchToolError: () => NoSuchToolError,
      Output: () => output_exports,
      RetryError: () => RetryError,
      StreamData: () => StreamData,
      ToolCallRepairError: () => ToolCallRepairError,
      ToolExecutionError: () => ToolExecutionError,
      TypeValidationError: () => import_provider20.TypeValidationError,
      UnsupportedFunctionalityError: () => import_provider20.UnsupportedFunctionalityError,
      appendClientMessage: () => appendClientMessage,
      appendResponseMessages: () => appendResponseMessages,
      convertToCoreMessages: () => convertToCoreMessages,
      coreAssistantMessageSchema: () => coreAssistantMessageSchema,
      coreMessageSchema: () => coreMessageSchema,
      coreSystemMessageSchema: () => coreSystemMessageSchema,
      coreToolMessageSchema: () => coreToolMessageSchema,
      coreUserMessageSchema: () => coreUserMessageSchema,
      cosineSimilarity: () => cosineSimilarity,
      createDataStream: () => createDataStream,
      createDataStreamResponse: () => createDataStreamResponse,
      createIdGenerator: () => import_provider_utils14.createIdGenerator,
      customProvider: () => customProvider,
      defaultSettingsMiddleware: () => defaultSettingsMiddleware,
      embed: () => embed,
      embedMany: () => embedMany,
      experimental_createMCPClient: () => createMCPClient,
      experimental_createProviderRegistry: () => experimental_createProviderRegistry,
      experimental_customProvider: () => experimental_customProvider,
      experimental_generateImage: () => generateImage,
      experimental_wrapLanguageModel: () => experimental_wrapLanguageModel,
      extractReasoningMiddleware: () => extractReasoningMiddleware,
      formatAssistantStreamPart: () => import_ui_utils11.formatAssistantStreamPart,
      formatDataStreamPart: () => import_ui_utils11.formatDataStreamPart,
      generateId: () => import_provider_utils14.generateId,
      generateObject: () => generateObject,
      generateText: () => generateText,
      jsonSchema: () => import_ui_utils11.jsonSchema,
      parseAssistantStreamPart: () => import_ui_utils11.parseAssistantStreamPart,
      parseDataStreamPart: () => import_ui_utils11.parseDataStreamPart,
      pipeDataStreamToResponse: () => pipeDataStreamToResponse,
      processDataStream: () => import_ui_utils11.processDataStream,
      processTextStream: () => import_ui_utils11.processTextStream,
      simulateReadableStream: () => simulateReadableStream,
      simulateStreamingMiddleware: () => simulateStreamingMiddleware,
      smoothStream: () => smoothStream,
      streamObject: () => streamObject,
      streamText: () => streamText,
      tool: () => tool,
      wrapLanguageModel: () => wrapLanguageModel,
      zodSchema: () => import_ui_utils11.zodSchema
    });
    module2.exports = __toCommonJS2(streams_exports);
    var import_provider_utils14 = require_dist3();
    var import_ui_utils11 = require_dist7();
    var import_ui_utils = require_dist7();
    function createDataStream({
      execute,
      onError = () => "An error occurred."
      // mask error messages for safety by default
    }) {
      let controller;
      const ongoingStreamPromises = [];
      const stream = new ReadableStream({
        start(controllerArg) {
          controller = controllerArg;
        }
      });
      function safeEnqueue(data) {
        try {
          controller.enqueue(data);
        } catch (error) {
        }
      }
      try {
        const result = execute({
          write(data) {
            safeEnqueue(data);
          },
          writeData(data) {
            safeEnqueue((0, import_ui_utils.formatDataStreamPart)("data", [data]));
          },
          writeMessageAnnotation(annotation) {
            safeEnqueue((0, import_ui_utils.formatDataStreamPart)("message_annotations", [annotation]));
          },
          writeSource(source) {
            safeEnqueue((0, import_ui_utils.formatDataStreamPart)("source", source));
          },
          merge(streamArg) {
            ongoingStreamPromises.push(
              (async () => {
                const reader = streamArg.getReader();
                while (true) {
                  const { done, value } = await reader.read();
                  if (done)
                    break;
                  safeEnqueue(value);
                }
              })().catch((error) => {
                safeEnqueue((0, import_ui_utils.formatDataStreamPart)("error", onError(error)));
              })
            );
          },
          onError
        });
        if (result) {
          ongoingStreamPromises.push(
            result.catch((error) => {
              safeEnqueue((0, import_ui_utils.formatDataStreamPart)("error", onError(error)));
            })
          );
        }
      } catch (error) {
        safeEnqueue((0, import_ui_utils.formatDataStreamPart)("error", onError(error)));
      }
      const waitForStreams = new Promise(async (resolve3) => {
        while (ongoingStreamPromises.length > 0) {
          await ongoingStreamPromises.shift();
        }
        resolve3();
      });
      waitForStreams.finally(() => {
        try {
          controller.close();
        } catch (error) {
        }
      });
      return stream;
    }
    function prepareResponseHeaders(headers, {
      contentType,
      dataStreamVersion
    }) {
      const responseHeaders = new Headers(headers != null ? headers : {});
      if (!responseHeaders.has("Content-Type")) {
        responseHeaders.set("Content-Type", contentType);
      }
      if (dataStreamVersion !== void 0) {
        responseHeaders.set("X-Vercel-AI-Data-Stream", dataStreamVersion);
      }
      return responseHeaders;
    }
    function createDataStreamResponse({
      status,
      statusText,
      headers,
      execute,
      onError
    }) {
      return new Response(
        createDataStream({ execute, onError }).pipeThrough(new TextEncoderStream()),
        {
          status,
          statusText,
          headers: prepareResponseHeaders(headers, {
            contentType: "text/plain; charset=utf-8",
            dataStreamVersion: "v1"
          })
        }
      );
    }
    function prepareOutgoingHttpHeaders(headers, {
      contentType,
      dataStreamVersion
    }) {
      const outgoingHeaders = {};
      if (headers != null) {
        for (const [key, value] of Object.entries(headers)) {
          outgoingHeaders[key] = value;
        }
      }
      if (outgoingHeaders["Content-Type"] == null) {
        outgoingHeaders["Content-Type"] = contentType;
      }
      if (dataStreamVersion !== void 0) {
        outgoingHeaders["X-Vercel-AI-Data-Stream"] = dataStreamVersion;
      }
      return outgoingHeaders;
    }
    function writeToServerResponse({
      response,
      status,
      statusText,
      headers,
      stream
    }) {
      response.writeHead(status != null ? status : 200, statusText, headers);
      const reader = stream.getReader();
      const read = async () => {
        try {
          while (true) {
            const { done, value } = await reader.read();
            if (done)
              break;
            response.write(value);
          }
        } catch (error) {
          throw error;
        } finally {
          response.end();
        }
      };
      read();
    }
    function pipeDataStreamToResponse(response, {
      status,
      statusText,
      headers,
      execute,
      onError
    }) {
      writeToServerResponse({
        response,
        status,
        statusText,
        headers: prepareOutgoingHttpHeaders(headers, {
          contentType: "text/plain; charset=utf-8",
          dataStreamVersion: "v1"
        }),
        stream: createDataStream({ execute, onError }).pipeThrough(
          new TextEncoderStream()
        )
      });
    }
    var import_provider = require_dist();
    var name = "AI_InvalidArgumentError";
    var marker = `vercel.ai.error.${name}`;
    var symbol = Symbol.for(marker);
    var _a;
    var InvalidArgumentError = class extends import_provider.AISDKError {
      constructor({
        parameter,
        value,
        message
      }) {
        super({
          name,
          message: `Invalid argument for parameter ${parameter}: ${message}`
        });
        this[_a] = true;
        this.parameter = parameter;
        this.value = value;
      }
      static isInstance(error) {
        return import_provider.AISDKError.hasMarker(error, marker);
      }
    };
    _a = symbol;
    var import_provider3 = require_dist();
    var import_provider_utils = require_dist3();
    var import_provider2 = require_dist();
    var name2 = "AI_RetryError";
    var marker2 = `vercel.ai.error.${name2}`;
    var symbol2 = Symbol.for(marker2);
    var _a2;
    var RetryError = class extends import_provider2.AISDKError {
      constructor({
        message,
        reason,
        errors
      }) {
        super({ name: name2, message });
        this[_a2] = true;
        this.reason = reason;
        this.errors = errors;
        this.lastError = errors[errors.length - 1];
      }
      static isInstance(error) {
        return import_provider2.AISDKError.hasMarker(error, marker2);
      }
    };
    _a2 = symbol2;
    var retryWithExponentialBackoff = ({
      maxRetries = 2,
      initialDelayInMs = 2e3,
      backoffFactor = 2
    } = {}) => async (f) => _retryWithExponentialBackoff(f, {
      maxRetries,
      delayInMs: initialDelayInMs,
      backoffFactor
    });
    async function _retryWithExponentialBackoff(f, {
      maxRetries,
      delayInMs,
      backoffFactor
    }, errors = []) {
      try {
        return await f();
      } catch (error) {
        if ((0, import_provider_utils.isAbortError)(error)) {
          throw error;
        }
        if (maxRetries === 0) {
          throw error;
        }
        const errorMessage = (0, import_provider_utils.getErrorMessage)(error);
        const newErrors = [...errors, error];
        const tryNumber = newErrors.length;
        if (tryNumber > maxRetries) {
          throw new RetryError({
            message: `Failed after ${tryNumber} attempts. Last error: ${errorMessage}`,
            reason: "maxRetriesExceeded",
            errors: newErrors
          });
        }
        if (error instanceof Error && import_provider3.APICallError.isInstance(error) && error.isRetryable === true && tryNumber <= maxRetries) {
          await (0, import_provider_utils.delay)(delayInMs);
          return _retryWithExponentialBackoff(
            f,
            { maxRetries, delayInMs: backoffFactor * delayInMs, backoffFactor },
            newErrors
          );
        }
        if (tryNumber === 1) {
          throw error;
        }
        throw new RetryError({
          message: `Failed after ${tryNumber} attempts with non-retryable error: '${errorMessage}'`,
          reason: "errorNotRetryable",
          errors: newErrors
        });
      }
    }
    function prepareRetries({
      maxRetries
    }) {
      if (maxRetries != null) {
        if (!Number.isInteger(maxRetries)) {
          throw new InvalidArgumentError({
            parameter: "maxRetries",
            value: maxRetries,
            message: "maxRetries must be an integer"
          });
        }
        if (maxRetries < 0) {
          throw new InvalidArgumentError({
            parameter: "maxRetries",
            value: maxRetries,
            message: "maxRetries must be >= 0"
          });
        }
      }
      const maxRetriesResult = maxRetries != null ? maxRetries : 2;
      return {
        maxRetries: maxRetriesResult,
        retry: retryWithExponentialBackoff({ maxRetries: maxRetriesResult })
      };
    }
    function assembleOperationName({
      operationId,
      telemetry
    }) {
      return {
        // standardized operation and resource name:
        "operation.name": `${operationId}${(telemetry == null ? void 0 : telemetry.functionId) != null ? ` ${telemetry.functionId}` : ""}`,
        "resource.name": telemetry == null ? void 0 : telemetry.functionId,
        // detailed, AI SDK specific data:
        "ai.operationId": operationId,
        "ai.telemetry.functionId": telemetry == null ? void 0 : telemetry.functionId
      };
    }
    function getBaseTelemetryAttributes({
      model,
      settings,
      telemetry,
      headers
    }) {
      var _a17;
      return {
        "ai.model.provider": model.provider,
        "ai.model.id": model.modelId,
        // settings:
        ...Object.entries(settings).reduce((attributes, [key, value]) => {
          attributes[`ai.settings.${key}`] = value;
          return attributes;
        }, {}),
        // add metadata as attributes:
        ...Object.entries((_a17 = telemetry == null ? void 0 : telemetry.metadata) != null ? _a17 : {}).reduce(
          (attributes, [key, value]) => {
            attributes[`ai.telemetry.metadata.${key}`] = value;
            return attributes;
          },
          {}
        ),
        // request headers
        ...Object.entries(headers != null ? headers : {}).reduce((attributes, [key, value]) => {
          if (value !== void 0) {
            attributes[`ai.request.headers.${key}`] = value;
          }
          return attributes;
        }, {})
      };
    }
    var import_api = (init_esm(), __toCommonJS(esm_exports));
    var noopTracer = {
      startSpan() {
        return noopSpan;
      },
      startActiveSpan(name17, arg1, arg2, arg3) {
        if (typeof arg1 === "function") {
          return arg1(noopSpan);
        }
        if (typeof arg2 === "function") {
          return arg2(noopSpan);
        }
        if (typeof arg3 === "function") {
          return arg3(noopSpan);
        }
      }
    };
    var noopSpan = {
      spanContext() {
        return noopSpanContext;
      },
      setAttribute() {
        return this;
      },
      setAttributes() {
        return this;
      },
      addEvent() {
        return this;
      },
      addLink() {
        return this;
      },
      addLinks() {
        return this;
      },
      setStatus() {
        return this;
      },
      updateName() {
        return this;
      },
      end() {
        return this;
      },
      isRecording() {
        return false;
      },
      recordException() {
        return this;
      }
    };
    var noopSpanContext = {
      traceId: "",
      spanId: "",
      traceFlags: 0
    };
    function getTracer({
      isEnabled = false,
      tracer
    } = {}) {
      if (!isEnabled) {
        return noopTracer;
      }
      if (tracer) {
        return tracer;
      }
      return import_api.trace.getTracer("ai");
    }
    var import_api2 = (init_esm(), __toCommonJS(esm_exports));
    function recordSpan({
      name: name17,
      tracer,
      attributes,
      fn,
      endWhenDone = true
    }) {
      return tracer.startActiveSpan(name17, { attributes }, async (span) => {
        try {
          const result = await fn(span);
          if (endWhenDone) {
            span.end();
          }
          return result;
        } catch (error) {
          try {
            if (error instanceof Error) {
              span.recordException({
                name: error.name,
                message: error.message,
                stack: error.stack
              });
              span.setStatus({
                code: import_api2.SpanStatusCode.ERROR,
                message: error.message
              });
            } else {
              span.setStatus({ code: import_api2.SpanStatusCode.ERROR });
            }
          } finally {
            span.end();
          }
          throw error;
        }
      });
    }
    function selectTelemetryAttributes({
      telemetry,
      attributes
    }) {
      if ((telemetry == null ? void 0 : telemetry.isEnabled) !== true) {
        return {};
      }
      return Object.entries(attributes).reduce((attributes2, [key, value]) => {
        if (value === void 0) {
          return attributes2;
        }
        if (typeof value === "object" && "input" in value && typeof value.input === "function") {
          if ((telemetry == null ? void 0 : telemetry.recordInputs) === false) {
            return attributes2;
          }
          const result = value.input();
          return result === void 0 ? attributes2 : { ...attributes2, [key]: result };
        }
        if (typeof value === "object" && "output" in value && typeof value.output === "function") {
          if ((telemetry == null ? void 0 : telemetry.recordOutputs) === false) {
            return attributes2;
          }
          const result = value.output();
          return result === void 0 ? attributes2 : { ...attributes2, [key]: result };
        }
        return { ...attributes2, [key]: value };
      }, {});
    }
    async function embed({
      model,
      value,
      maxRetries: maxRetriesArg,
      abortSignal,
      headers,
      experimental_telemetry: telemetry
    }) {
      const { maxRetries, retry } = prepareRetries({ maxRetries: maxRetriesArg });
      const baseTelemetryAttributes = getBaseTelemetryAttributes({
        model,
        telemetry,
        headers,
        settings: { maxRetries }
      });
      const tracer = getTracer(telemetry);
      return recordSpan({
        name: "ai.embed",
        attributes: selectTelemetryAttributes({
          telemetry,
          attributes: {
            ...assembleOperationName({ operationId: "ai.embed", telemetry }),
            ...baseTelemetryAttributes,
            "ai.value": { input: () => JSON.stringify(value) }
          }
        }),
        tracer,
        fn: async (span) => {
          const { embedding, usage, rawResponse } = await retry(
            () => (
              // nested spans to align with the embedMany telemetry data:
              recordSpan({
                name: "ai.embed.doEmbed",
                attributes: selectTelemetryAttributes({
                  telemetry,
                  attributes: {
                    ...assembleOperationName({
                      operationId: "ai.embed.doEmbed",
                      telemetry
                    }),
                    ...baseTelemetryAttributes,
                    // specific settings that only make sense on the outer level:
                    "ai.values": { input: () => [JSON.stringify(value)] }
                  }
                }),
                tracer,
                fn: async (doEmbedSpan) => {
                  var _a17;
                  const modelResponse = await model.doEmbed({
                    values: [value],
                    abortSignal,
                    headers
                  });
                  const embedding2 = modelResponse.embeddings[0];
                  const usage2 = (_a17 = modelResponse.usage) != null ? _a17 : { tokens: NaN };
                  doEmbedSpan.setAttributes(
                    selectTelemetryAttributes({
                      telemetry,
                      attributes: {
                        "ai.embeddings": {
                          output: () => modelResponse.embeddings.map(
                            (embedding3) => JSON.stringify(embedding3)
                          )
                        },
                        "ai.usage.tokens": usage2.tokens
                      }
                    })
                  );
                  return {
                    embedding: embedding2,
                    usage: usage2,
                    rawResponse: modelResponse.rawResponse
                  };
                }
              })
            )
          );
          span.setAttributes(
            selectTelemetryAttributes({
              telemetry,
              attributes: {
                "ai.embedding": { output: () => JSON.stringify(embedding) },
                "ai.usage.tokens": usage.tokens
              }
            })
          );
          return new DefaultEmbedResult({ value, embedding, usage, rawResponse });
        }
      });
    }
    var DefaultEmbedResult = class {
      constructor(options) {
        this.value = options.value;
        this.embedding = options.embedding;
        this.usage = options.usage;
        this.rawResponse = options.rawResponse;
      }
    };
    function splitArray(array, chunkSize) {
      if (chunkSize <= 0) {
        throw new Error("chunkSize must be greater than 0");
      }
      const result = [];
      for (let i = 0; i < array.length; i += chunkSize) {
        result.push(array.slice(i, i + chunkSize));
      }
      return result;
    }
    async function embedMany({
      model,
      values,
      maxRetries: maxRetriesArg,
      abortSignal,
      headers,
      experimental_telemetry: telemetry
    }) {
      const { maxRetries, retry } = prepareRetries({ maxRetries: maxRetriesArg });
      const baseTelemetryAttributes = getBaseTelemetryAttributes({
        model,
        telemetry,
        headers,
        settings: { maxRetries }
      });
      const tracer = getTracer(telemetry);
      return recordSpan({
        name: "ai.embedMany",
        attributes: selectTelemetryAttributes({
          telemetry,
          attributes: {
            ...assembleOperationName({ operationId: "ai.embedMany", telemetry }),
            ...baseTelemetryAttributes,
            // specific settings that only make sense on the outer level:
            "ai.values": {
              input: () => values.map((value) => JSON.stringify(value))
            }
          }
        }),
        tracer,
        fn: async (span) => {
          const maxEmbeddingsPerCall = model.maxEmbeddingsPerCall;
          if (maxEmbeddingsPerCall == null) {
            const { embeddings: embeddings2, usage } = await retry(() => {
              return recordSpan({
                name: "ai.embedMany.doEmbed",
                attributes: selectTelemetryAttributes({
                  telemetry,
                  attributes: {
                    ...assembleOperationName({
                      operationId: "ai.embedMany.doEmbed",
                      telemetry
                    }),
                    ...baseTelemetryAttributes,
                    // specific settings that only make sense on the outer level:
                    "ai.values": {
                      input: () => values.map((value) => JSON.stringify(value))
                    }
                  }
                }),
                tracer,
                fn: async (doEmbedSpan) => {
                  var _a17;
                  const modelResponse = await model.doEmbed({
                    values,
                    abortSignal,
                    headers
                  });
                  const embeddings3 = modelResponse.embeddings;
                  const usage2 = (_a17 = modelResponse.usage) != null ? _a17 : { tokens: NaN };
                  doEmbedSpan.setAttributes(
                    selectTelemetryAttributes({
                      telemetry,
                      attributes: {
                        "ai.embeddings": {
                          output: () => embeddings3.map((embedding) => JSON.stringify(embedding))
                        },
                        "ai.usage.tokens": usage2.tokens
                      }
                    })
                  );
                  return { embeddings: embeddings3, usage: usage2 };
                }
              });
            });
            span.setAttributes(
              selectTelemetryAttributes({
                telemetry,
                attributes: {
                  "ai.embeddings": {
                    output: () => embeddings2.map((embedding) => JSON.stringify(embedding))
                  },
                  "ai.usage.tokens": usage.tokens
                }
              })
            );
            return new DefaultEmbedManyResult({ values, embeddings: embeddings2, usage });
          }
          const valueChunks = splitArray(values, maxEmbeddingsPerCall);
          const embeddings = [];
          let tokens = 0;
          for (const chunk of valueChunks) {
            const { embeddings: responseEmbeddings, usage } = await retry(() => {
              return recordSpan({
                name: "ai.embedMany.doEmbed",
                attributes: selectTelemetryAttributes({
                  telemetry,
                  attributes: {
                    ...assembleOperationName({
                      operationId: "ai.embedMany.doEmbed",
                      telemetry
                    }),
                    ...baseTelemetryAttributes,
                    // specific settings that only make sense on the outer level:
                    "ai.values": {
                      input: () => chunk.map((value) => JSON.stringify(value))
                    }
                  }
                }),
                tracer,
                fn: async (doEmbedSpan) => {
                  var _a17;
                  const modelResponse = await model.doEmbed({
                    values: chunk,
                    abortSignal,
                    headers
                  });
                  const embeddings2 = modelResponse.embeddings;
                  const usage2 = (_a17 = modelResponse.usage) != null ? _a17 : { tokens: NaN };
                  doEmbedSpan.setAttributes(
                    selectTelemetryAttributes({
                      telemetry,
                      attributes: {
                        "ai.embeddings": {
                          output: () => embeddings2.map((embedding) => JSON.stringify(embedding))
                        },
                        "ai.usage.tokens": usage2.tokens
                      }
                    })
                  );
                  return { embeddings: embeddings2, usage: usage2 };
                }
              });
            });
            embeddings.push(...responseEmbeddings);
            tokens += usage.tokens;
          }
          span.setAttributes(
            selectTelemetryAttributes({
              telemetry,
              attributes: {
                "ai.embeddings": {
                  output: () => embeddings.map((embedding) => JSON.stringify(embedding))
                },
                "ai.usage.tokens": tokens
              }
            })
          );
          return new DefaultEmbedManyResult({
            values,
            embeddings,
            usage: { tokens }
          });
        }
      });
    }
    var DefaultEmbedManyResult = class {
      constructor(options) {
        this.values = options.values;
        this.embeddings = options.embeddings;
        this.usage = options.usage;
      }
    };
    var import_provider4 = require_dist();
    var name3 = "AI_NoImageGeneratedError";
    var marker3 = `vercel.ai.error.${name3}`;
    var symbol3 = Symbol.for(marker3);
    var _a3;
    var NoImageGeneratedError = class extends import_provider4.AISDKError {
      constructor({
        message = "No image generated.",
        cause,
        responses
      }) {
        super({ name: name3, message, cause });
        this[_a3] = true;
        this.responses = responses;
      }
      static isInstance(error) {
        return import_provider4.AISDKError.hasMarker(error, marker3);
      }
    };
    _a3 = symbol3;
    var import_provider_utils2 = require_dist3();
    var DefaultGeneratedFile = class {
      constructor({
        data,
        mimeType
      }) {
        const isUint8Array = data instanceof Uint8Array;
        this.base64Data = isUint8Array ? void 0 : data;
        this.uint8ArrayData = isUint8Array ? data : void 0;
        this.mimeType = mimeType;
      }
      // lazy conversion with caching to avoid unnecessary conversion overhead:
      get base64() {
        if (this.base64Data == null) {
          this.base64Data = (0, import_provider_utils2.convertUint8ArrayToBase64)(this.uint8ArrayData);
        }
        return this.base64Data;
      }
      // lazy conversion with caching to avoid unnecessary conversion overhead:
      get uint8Array() {
        if (this.uint8ArrayData == null) {
          this.uint8ArrayData = (0, import_provider_utils2.convertBase64ToUint8Array)(this.base64Data);
        }
        return this.uint8ArrayData;
      }
    };
    var DefaultGeneratedFileWithType = class extends DefaultGeneratedFile {
      constructor(options) {
        super(options);
        this.type = "file";
      }
    };
    var mimeTypeSignatures = [
      {
        mimeType: "image/gif",
        bytesPrefix: [71, 73, 70],
        base64Prefix: "R0lG"
      },
      {
        mimeType: "image/png",
        bytesPrefix: [137, 80, 78, 71],
        base64Prefix: "iVBORw"
      },
      {
        mimeType: "image/jpeg",
        bytesPrefix: [255, 216],
        base64Prefix: "/9j/"
      },
      {
        mimeType: "image/webp",
        bytesPrefix: [82, 73, 70, 70],
        base64Prefix: "UklGRg"
      },
      {
        mimeType: "image/bmp",
        bytesPrefix: [66, 77],
        base64Prefix: "Qk"
      },
      {
        mimeType: "image/tiff",
        bytesPrefix: [73, 73, 42, 0],
        base64Prefix: "SUkqAA"
      },
      {
        mimeType: "image/tiff",
        bytesPrefix: [77, 77, 0, 42],
        base64Prefix: "TU0AKg"
      },
      {
        mimeType: "image/avif",
        bytesPrefix: [
          0,
          0,
          0,
          32,
          102,
          116,
          121,
          112,
          97,
          118,
          105,
          102
        ],
        base64Prefix: "AAAAIGZ0eXBhdmlm"
      },
      {
        mimeType: "image/heic",
        bytesPrefix: [
          0,
          0,
          0,
          32,
          102,
          116,
          121,
          112,
          104,
          101,
          105,
          99
        ],
        base64Prefix: "AAAAIGZ0eXBoZWlj"
      }
    ];
    function detectImageMimeType(image) {
      for (const signature of mimeTypeSignatures) {
        if (typeof image === "string" ? image.startsWith(signature.base64Prefix) : image.length >= signature.bytesPrefix.length && signature.bytesPrefix.every((byte, index) => image[index] === byte)) {
          return signature.mimeType;
        }
      }
      return void 0;
    }
    async function generateImage({
      model,
      prompt,
      n = 1,
      size,
      aspectRatio,
      seed,
      providerOptions,
      maxRetries: maxRetriesArg,
      abortSignal,
      headers
    }) {
      var _a17;
      const { retry } = prepareRetries({ maxRetries: maxRetriesArg });
      const maxImagesPerCall = (_a17 = model.maxImagesPerCall) != null ? _a17 : 1;
      const callCount = Math.ceil(n / maxImagesPerCall);
      const callImageCounts = Array.from({ length: callCount }, (_, i) => {
        if (i < callCount - 1) {
          return maxImagesPerCall;
        }
        const remainder = n % maxImagesPerCall;
        return remainder === 0 ? maxImagesPerCall : remainder;
      });
      const results = await Promise.all(
        callImageCounts.map(
          async (callImageCount) => retry(
            () => model.doGenerate({
              prompt,
              n: callImageCount,
              abortSignal,
              headers,
              size,
              aspectRatio,
              seed,
              providerOptions: providerOptions != null ? providerOptions : {}
            })
          )
        )
      );
      const images = [];
      const warnings = [];
      const responses = [];
      for (const result of results) {
        images.push(
          ...result.images.map(
            (image) => {
              var _a18;
              return new DefaultGeneratedFile({
                data: image,
                mimeType: (_a18 = detectImageMimeType(image)) != null ? _a18 : "image/png"
              });
            }
          )
        );
        warnings.push(...result.warnings);
        responses.push(result.response);
      }
      if (!images.length) {
        throw new NoImageGeneratedError({ responses });
      }
      return new DefaultGenerateImageResult({ images, warnings, responses });
    }
    var DefaultGenerateImageResult = class {
      constructor(options) {
        this.images = options.images;
        this.warnings = options.warnings;
        this.responses = options.responses;
      }
      get image() {
        return this.images[0];
      }
    };
    var import_provider12 = require_dist();
    var import_provider_utils6 = require_dist3();
    var import_provider5 = require_dist();
    var name4 = "AI_NoObjectGeneratedError";
    var marker4 = `vercel.ai.error.${name4}`;
    var symbol4 = Symbol.for(marker4);
    var _a4;
    var NoObjectGeneratedError = class extends import_provider5.AISDKError {
      constructor({
        message = "No object generated.",
        cause,
        text: text2,
        response,
        usage
      }) {
        super({ name: name4, message, cause });
        this[_a4] = true;
        this.text = text2;
        this.response = response;
        this.usage = usage;
      }
      static isInstance(error) {
        return import_provider5.AISDKError.hasMarker(error, marker4);
      }
    };
    _a4 = symbol4;
    var import_provider6 = require_dist();
    var name5 = "AI_DownloadError";
    var marker5 = `vercel.ai.error.${name5}`;
    var symbol5 = Symbol.for(marker5);
    var _a5;
    var DownloadError = class extends import_provider6.AISDKError {
      constructor({
        url,
        statusCode,
        statusText,
        cause,
        message = cause == null ? `Failed to download ${url}: ${statusCode} ${statusText}` : `Failed to download ${url}: ${cause}`
      }) {
        super({ name: name5, message, cause });
        this[_a5] = true;
        this.url = url;
        this.statusCode = statusCode;
        this.statusText = statusText;
      }
      static isInstance(error) {
        return import_provider6.AISDKError.hasMarker(error, marker5);
      }
    };
    _a5 = symbol5;
    async function download({
      url,
      fetchImplementation = fetch
    }) {
      var _a17;
      const urlText = url.toString();
      try {
        const response = await fetchImplementation(urlText);
        if (!response.ok) {
          throw new DownloadError({
            url: urlText,
            statusCode: response.status,
            statusText: response.statusText
          });
        }
        return {
          data: new Uint8Array(await response.arrayBuffer()),
          mimeType: (_a17 = response.headers.get("content-type")) != null ? _a17 : void 0
        };
      } catch (error) {
        if (DownloadError.isInstance(error)) {
          throw error;
        }
        throw new DownloadError({ url: urlText, cause: error });
      }
    }
    var import_provider_utils3 = require_dist3();
    var import_provider7 = require_dist();
    var name6 = "AI_InvalidDataContentError";
    var marker6 = `vercel.ai.error.${name6}`;
    var symbol6 = Symbol.for(marker6);
    var _a6;
    var InvalidDataContentError = class extends import_provider7.AISDKError {
      constructor({
        content,
        cause,
        message = `Invalid data content. Expected a base64 string, Uint8Array, ArrayBuffer, or Buffer, but got ${typeof content}.`
      }) {
        super({ name: name6, message, cause });
        this[_a6] = true;
        this.content = content;
      }
      static isInstance(error) {
        return import_provider7.AISDKError.hasMarker(error, marker6);
      }
    };
    _a6 = symbol6;
    var import_zod2 = require_lib();
    var dataContentSchema = import_zod2.z.union([
      import_zod2.z.string(),
      import_zod2.z.instanceof(Uint8Array),
      import_zod2.z.instanceof(ArrayBuffer),
      import_zod2.z.custom(
        // Buffer might not be available in some environments such as CloudFlare:
        (value) => {
          var _a17, _b;
          return (_b = (_a17 = globalThis.Buffer) == null ? void 0 : _a17.isBuffer(value)) != null ? _b : false;
        },
        { message: "Must be a Buffer" }
      )
    ]);
    function convertDataContentToBase64String(content) {
      if (typeof content === "string") {
        return content;
      }
      if (content instanceof ArrayBuffer) {
        return (0, import_provider_utils3.convertUint8ArrayToBase64)(new Uint8Array(content));
      }
      return (0, import_provider_utils3.convertUint8ArrayToBase64)(content);
    }
    function convertDataContentToUint8Array(content) {
      if (content instanceof Uint8Array) {
        return content;
      }
      if (typeof content === "string") {
        try {
          return (0, import_provider_utils3.convertBase64ToUint8Array)(content);
        } catch (error) {
          throw new InvalidDataContentError({
            message: "Invalid data content. Content string is not a base64-encoded media.",
            content,
            cause: error
          });
        }
      }
      if (content instanceof ArrayBuffer) {
        return new Uint8Array(content);
      }
      throw new InvalidDataContentError({ content });
    }
    function convertUint8ArrayToText(uint8Array) {
      try {
        return new TextDecoder().decode(uint8Array);
      } catch (error) {
        throw new Error("Error decoding Uint8Array to text");
      }
    }
    var import_provider8 = require_dist();
    var name7 = "AI_InvalidMessageRoleError";
    var marker7 = `vercel.ai.error.${name7}`;
    var symbol7 = Symbol.for(marker7);
    var _a7;
    var InvalidMessageRoleError = class extends import_provider8.AISDKError {
      constructor({
        role,
        message = `Invalid message role: '${role}'. Must be one of: "system", "user", "assistant", "tool".`
      }) {
        super({ name: name7, message });
        this[_a7] = true;
        this.role = role;
      }
      static isInstance(error) {
        return import_provider8.AISDKError.hasMarker(error, marker7);
      }
    };
    _a7 = symbol7;
    function splitDataUrl(dataUrl) {
      try {
        const [header, base64Content] = dataUrl.split(",");
        return {
          mimeType: header.split(";")[0].split(":")[1],
          base64Content
        };
      } catch (error) {
        return {
          mimeType: void 0,
          base64Content: void 0
        };
      }
    }
    async function convertToLanguageModelPrompt({
      prompt,
      modelSupportsImageUrls = true,
      modelSupportsUrl = () => false,
      downloadImplementation = download
    }) {
      const downloadedAssets = await downloadAssets(
        prompt.messages,
        downloadImplementation,
        modelSupportsImageUrls,
        modelSupportsUrl
      );
      return [
        ...prompt.system != null ? [{ role: "system", content: prompt.system }] : [],
        ...prompt.messages.map(
          (message) => convertToLanguageModelMessage(message, downloadedAssets)
        )
      ];
    }
    function convertToLanguageModelMessage(message, downloadedAssets) {
      var _a17, _b, _c, _d, _e, _f;
      const role = message.role;
      switch (role) {
        case "system": {
          return {
            role: "system",
            content: message.content,
            providerMetadata: (_a17 = message.providerOptions) != null ? _a17 : message.experimental_providerMetadata
          };
        }
        case "user": {
          if (typeof message.content === "string") {
            return {
              role: "user",
              content: [{ type: "text", text: message.content }],
              providerMetadata: (_b = message.providerOptions) != null ? _b : message.experimental_providerMetadata
            };
          }
          return {
            role: "user",
            content: message.content.map((part) => convertPartToLanguageModelPart(part, downloadedAssets)).filter((part) => part.type !== "text" || part.text !== ""),
            providerMetadata: (_c = message.providerOptions) != null ? _c : message.experimental_providerMetadata
          };
        }
        case "assistant": {
          if (typeof message.content === "string") {
            return {
              role: "assistant",
              content: [{ type: "text", text: message.content }],
              providerMetadata: (_d = message.providerOptions) != null ? _d : message.experimental_providerMetadata
            };
          }
          return {
            role: "assistant",
            content: message.content.filter(
              // remove empty text parts:
              (part) => part.type !== "text" || part.text !== ""
            ).map((part) => {
              var _a18;
              const providerOptions = (_a18 = part.providerOptions) != null ? _a18 : part.experimental_providerMetadata;
              switch (part.type) {
                case "file": {
                  return {
                    type: "file",
                    data: part.data instanceof URL ? part.data : convertDataContentToBase64String(part.data),
                    filename: part.filename,
                    mimeType: part.mimeType,
                    providerMetadata: providerOptions
                  };
                }
                case "reasoning": {
                  return {
                    type: "reasoning",
                    text: part.text,
                    signature: part.signature,
                    providerMetadata: providerOptions
                  };
                }
                case "redacted-reasoning": {
                  return {
                    type: "redacted-reasoning",
                    data: part.data,
                    providerMetadata: providerOptions
                  };
                }
                case "text": {
                  return {
                    type: "text",
                    text: part.text,
                    providerMetadata: providerOptions
                  };
                }
                case "tool-call": {
                  return {
                    type: "tool-call",
                    toolCallId: part.toolCallId,
                    toolName: part.toolName,
                    args: part.args,
                    providerMetadata: providerOptions
                  };
                }
              }
            }),
            providerMetadata: (_e = message.providerOptions) != null ? _e : message.experimental_providerMetadata
          };
        }
        case "tool": {
          return {
            role: "tool",
            content: message.content.map((part) => {
              var _a18;
              return {
                type: "tool-result",
                toolCallId: part.toolCallId,
                toolName: part.toolName,
                result: part.result,
                content: part.experimental_content,
                isError: part.isError,
                providerMetadata: (_a18 = part.providerOptions) != null ? _a18 : part.experimental_providerMetadata
              };
            }),
            providerMetadata: (_f = message.providerOptions) != null ? _f : message.experimental_providerMetadata
          };
        }
        default: {
          const _exhaustiveCheck = role;
          throw new InvalidMessageRoleError({ role: _exhaustiveCheck });
        }
      }
    }
    async function downloadAssets(messages, downloadImplementation, modelSupportsImageUrls, modelSupportsUrl) {
      const urls = messages.filter((message) => message.role === "user").map((message) => message.content).filter(
        (content) => Array.isArray(content)
      ).flat().filter(
        (part) => part.type === "image" || part.type === "file"
      ).filter(
        (part) => !(part.type === "image" && modelSupportsImageUrls === true)
      ).map((part) => part.type === "image" ? part.image : part.data).map(
        (part) => (
          // support string urls:
          typeof part === "string" && (part.startsWith("http:") || part.startsWith("https:")) ? new URL(part) : part
        )
      ).filter((image) => image instanceof URL).filter((url) => !modelSupportsUrl(url));
      const downloadedImages = await Promise.all(
        urls.map(async (url) => ({
          url,
          data: await downloadImplementation({ url })
        }))
      );
      return Object.fromEntries(
        downloadedImages.map(({ url, data }) => [url.toString(), data])
      );
    }
    function convertPartToLanguageModelPart(part, downloadedAssets) {
      var _a17, _b, _c, _d;
      if (part.type === "text") {
        return {
          type: "text",
          text: part.text,
          providerMetadata: (_a17 = part.providerOptions) != null ? _a17 : part.experimental_providerMetadata
        };
      }
      let mimeType = part.mimeType;
      let data;
      let content;
      let normalizedData;
      const type = part.type;
      switch (type) {
        case "image":
          data = part.image;
          break;
        case "file":
          data = part.data;
          break;
        default:
          throw new Error(`Unsupported part type: ${type}`);
      }
      try {
        content = typeof data === "string" ? new URL(data) : data;
      } catch (error) {
        content = data;
      }
      if (content instanceof URL) {
        if (content.protocol === "data:") {
          const { mimeType: dataUrlMimeType, base64Content } = splitDataUrl(
            content.toString()
          );
          if (dataUrlMimeType == null || base64Content == null) {
            throw new Error(`Invalid data URL format in part ${type}`);
          }
          mimeType = dataUrlMimeType;
          normalizedData = convertDataContentToUint8Array(base64Content);
        } else {
          const downloadedFile = downloadedAssets[content.toString()];
          if (downloadedFile) {
            normalizedData = downloadedFile.data;
            mimeType != null ? mimeType : mimeType = downloadedFile.mimeType;
          } else {
            normalizedData = content;
          }
        }
      } else {
        normalizedData = convertDataContentToUint8Array(content);
      }
      switch (type) {
        case "image": {
          if (normalizedData instanceof Uint8Array) {
            mimeType = (_b = detectImageMimeType(normalizedData)) != null ? _b : mimeType;
          }
          return {
            type: "image",
            image: normalizedData,
            mimeType,
            providerMetadata: (_c = part.providerOptions) != null ? _c : part.experimental_providerMetadata
          };
        }
        case "file": {
          if (mimeType == null) {
            throw new Error(`Mime type is missing for file part`);
          }
          return {
            type: "file",
            data: normalizedData instanceof Uint8Array ? convertDataContentToBase64String(normalizedData) : normalizedData,
            filename: part.filename,
            mimeType,
            providerMetadata: (_d = part.providerOptions) != null ? _d : part.experimental_providerMetadata
          };
        }
      }
    }
    function prepareCallSettings({
      maxTokens,
      temperature,
      topP,
      topK,
      presencePenalty,
      frequencyPenalty,
      stopSequences,
      seed
    }) {
      if (maxTokens != null) {
        if (!Number.isInteger(maxTokens)) {
          throw new InvalidArgumentError({
            parameter: "maxTokens",
            value: maxTokens,
            message: "maxTokens must be an integer"
          });
        }
        if (maxTokens < 1) {
          throw new InvalidArgumentError({
            parameter: "maxTokens",
            value: maxTokens,
            message: "maxTokens must be >= 1"
          });
        }
      }
      if (temperature != null) {
        if (typeof temperature !== "number") {
          throw new InvalidArgumentError({
            parameter: "temperature",
            value: temperature,
            message: "temperature must be a number"
          });
        }
      }
      if (topP != null) {
        if (typeof topP !== "number") {
          throw new InvalidArgumentError({
            parameter: "topP",
            value: topP,
            message: "topP must be a number"
          });
        }
      }
      if (topK != null) {
        if (typeof topK !== "number") {
          throw new InvalidArgumentError({
            parameter: "topK",
            value: topK,
            message: "topK must be a number"
          });
        }
      }
      if (presencePenalty != null) {
        if (typeof presencePenalty !== "number") {
          throw new InvalidArgumentError({
            parameter: "presencePenalty",
            value: presencePenalty,
            message: "presencePenalty must be a number"
          });
        }
      }
      if (frequencyPenalty != null) {
        if (typeof frequencyPenalty !== "number") {
          throw new InvalidArgumentError({
            parameter: "frequencyPenalty",
            value: frequencyPenalty,
            message: "frequencyPenalty must be a number"
          });
        }
      }
      if (seed != null) {
        if (!Number.isInteger(seed)) {
          throw new InvalidArgumentError({
            parameter: "seed",
            value: seed,
            message: "seed must be an integer"
          });
        }
      }
      return {
        maxTokens,
        // TODO v5 remove default 0 for temperature
        temperature: temperature != null ? temperature : 0,
        topP,
        topK,
        presencePenalty,
        frequencyPenalty,
        stopSequences: stopSequences != null && stopSequences.length > 0 ? stopSequences : void 0,
        seed
      };
    }
    var import_provider10 = require_dist();
    var import_provider_utils4 = require_dist3();
    var import_zod7 = require_lib();
    function attachmentsToParts(attachments) {
      var _a17, _b, _c;
      const parts = [];
      for (const attachment of attachments) {
        let url;
        try {
          url = new URL(attachment.url);
        } catch (error) {
          throw new Error(`Invalid URL: ${attachment.url}`);
        }
        switch (url.protocol) {
          case "http:":
          case "https:": {
            if ((_a17 = attachment.contentType) == null ? void 0 : _a17.startsWith("image/")) {
              parts.push({ type: "image", image: url });
            } else {
              if (!attachment.contentType) {
                throw new Error(
                  "If the attachment is not an image, it must specify a content type"
                );
              }
              parts.push({
                type: "file",
                data: url,
                mimeType: attachment.contentType
              });
            }
            break;
          }
          case "data:": {
            let header;
            let base64Content;
            let mimeType;
            try {
              [header, base64Content] = attachment.url.split(",");
              mimeType = header.split(";")[0].split(":")[1];
            } catch (error) {
              throw new Error(`Error processing data URL: ${attachment.url}`);
            }
            if (mimeType == null || base64Content == null) {
              throw new Error(`Invalid data URL format: ${attachment.url}`);
            }
            if ((_b = attachment.contentType) == null ? void 0 : _b.startsWith("image/")) {
              parts.push({
                type: "image",
                image: convertDataContentToUint8Array(base64Content)
              });
            } else if ((_c = attachment.contentType) == null ? void 0 : _c.startsWith("text/")) {
              parts.push({
                type: "text",
                text: convertUint8ArrayToText(
                  convertDataContentToUint8Array(base64Content)
                )
              });
            } else {
              if (!attachment.contentType) {
                throw new Error(
                  "If the attachment is not an image or text, it must specify a content type"
                );
              }
              parts.push({
                type: "file",
                data: base64Content,
                mimeType: attachment.contentType
              });
            }
            break;
          }
          default: {
            throw new Error(`Unsupported URL protocol: ${url.protocol}`);
          }
        }
      }
      return parts;
    }
    var import_provider9 = require_dist();
    var name8 = "AI_MessageConversionError";
    var marker8 = `vercel.ai.error.${name8}`;
    var symbol8 = Symbol.for(marker8);
    var _a8;
    var MessageConversionError = class extends import_provider9.AISDKError {
      constructor({
        originalMessage,
        message
      }) {
        super({ name: name8, message });
        this[_a8] = true;
        this.originalMessage = originalMessage;
      }
      static isInstance(error) {
        return import_provider9.AISDKError.hasMarker(error, marker8);
      }
    };
    _a8 = symbol8;
    function convertToCoreMessages(messages, options) {
      var _a17, _b;
      const tools = (_a17 = options == null ? void 0 : options.tools) != null ? _a17 : {};
      const coreMessages = [];
      for (let i = 0; i < messages.length; i++) {
        const message = messages[i];
        const isLastMessage = i === messages.length - 1;
        const { role, content, experimental_attachments } = message;
        switch (role) {
          case "system": {
            coreMessages.push({
              role: "system",
              content
            });
            break;
          }
          case "user": {
            coreMessages.push({
              role: "user",
              content: experimental_attachments ? [
                { type: "text", text: content },
                ...attachmentsToParts(experimental_attachments)
              ] : content
            });
            break;
          }
          case "assistant": {
            if (message.parts != null) {
              let processBlock2 = function() {
                const content2 = [];
                for (const part of block) {
                  switch (part.type) {
                    case "file":
                    case "text": {
                      content2.push(part);
                      break;
                    }
                    case "reasoning": {
                      for (const detail of part.details) {
                        switch (detail.type) {
                          case "text":
                            content2.push({
                              type: "reasoning",
                              text: detail.text,
                              signature: detail.signature
                            });
                            break;
                          case "redacted":
                            content2.push({
                              type: "redacted-reasoning",
                              data: detail.data
                            });
                            break;
                        }
                      }
                      break;
                    }
                    case "tool-invocation":
                      content2.push({
                        type: "tool-call",
                        toolCallId: part.toolInvocation.toolCallId,
                        toolName: part.toolInvocation.toolName,
                        args: part.toolInvocation.args
                      });
                      break;
                    default: {
                      const _exhaustiveCheck = part;
                      throw new Error(`Unsupported part: ${_exhaustiveCheck}`);
                    }
                  }
                }
                coreMessages.push({
                  role: "assistant",
                  content: content2
                });
                const stepInvocations = block.filter(
                  (part) => part.type === "tool-invocation"
                ).map((part) => part.toolInvocation);
                if (stepInvocations.length > 0) {
                  coreMessages.push({
                    role: "tool",
                    content: stepInvocations.map(
                      (toolInvocation) => {
                        if (!("result" in toolInvocation)) {
                          throw new MessageConversionError({
                            originalMessage: message,
                            message: "ToolInvocation must have a result: " + JSON.stringify(toolInvocation)
                          });
                        }
                        const { toolCallId, toolName, result } = toolInvocation;
                        const tool2 = tools[toolName];
                        return (tool2 == null ? void 0 : tool2.experimental_toToolResultContent) != null ? {
                          type: "tool-result",
                          toolCallId,
                          toolName,
                          result: tool2.experimental_toToolResultContent(result),
                          experimental_content: tool2.experimental_toToolResultContent(result)
                        } : {
                          type: "tool-result",
                          toolCallId,
                          toolName,
                          result
                        };
                      }
                    )
                  });
                }
                block = [];
                blockHasToolInvocations = false;
                currentStep++;
              };
              var processBlock = processBlock2;
              let currentStep = 0;
              let blockHasToolInvocations = false;
              let block = [];
              for (const part of message.parts) {
                switch (part.type) {
                  case "text": {
                    if (blockHasToolInvocations) {
                      processBlock2();
                    }
                    block.push(part);
                    break;
                  }
                  case "file":
                  case "reasoning": {
                    block.push(part);
                    break;
                  }
                  case "tool-invocation": {
                    if (((_b = part.toolInvocation.step) != null ? _b : 0) !== currentStep) {
                      processBlock2();
                    }
                    block.push(part);
                    blockHasToolInvocations = true;
                    break;
                  }
                }
              }
              processBlock2();
              break;
            }
            const toolInvocations = message.toolInvocations;
            if (toolInvocations == null || toolInvocations.length === 0) {
              coreMessages.push({ role: "assistant", content });
              break;
            }
            const maxStep = toolInvocations.reduce((max, toolInvocation) => {
              var _a18;
              return Math.max(max, (_a18 = toolInvocation.step) != null ? _a18 : 0);
            }, 0);
            for (let i2 = 0; i2 <= maxStep; i2++) {
              const stepInvocations = toolInvocations.filter(
                (toolInvocation) => {
                  var _a18;
                  return ((_a18 = toolInvocation.step) != null ? _a18 : 0) === i2;
                }
              );
              if (stepInvocations.length === 0) {
                continue;
              }
              coreMessages.push({
                role: "assistant",
                content: [
                  ...isLastMessage && content && i2 === 0 ? [{ type: "text", text: content }] : [],
                  ...stepInvocations.map(
                    ({ toolCallId, toolName, args }) => ({
                      type: "tool-call",
                      toolCallId,
                      toolName,
                      args
                    })
                  )
                ]
              });
              coreMessages.push({
                role: "tool",
                content: stepInvocations.map((toolInvocation) => {
                  if (!("result" in toolInvocation)) {
                    throw new MessageConversionError({
                      originalMessage: message,
                      message: "ToolInvocation must have a result: " + JSON.stringify(toolInvocation)
                    });
                  }
                  const { toolCallId, toolName, result } = toolInvocation;
                  const tool2 = tools[toolName];
                  return (tool2 == null ? void 0 : tool2.experimental_toToolResultContent) != null ? {
                    type: "tool-result",
                    toolCallId,
                    toolName,
                    result: tool2.experimental_toToolResultContent(result),
                    experimental_content: tool2.experimental_toToolResultContent(result)
                  } : {
                    type: "tool-result",
                    toolCallId,
                    toolName,
                    result
                  };
                })
              });
            }
            if (content && !isLastMessage) {
              coreMessages.push({ role: "assistant", content });
            }
            break;
          }
          case "data": {
            break;
          }
          default: {
            const _exhaustiveCheck = role;
            throw new MessageConversionError({
              originalMessage: message,
              message: `Unsupported role: ${_exhaustiveCheck}`
            });
          }
        }
      }
      return coreMessages;
    }
    function detectPromptType(prompt) {
      if (!Array.isArray(prompt)) {
        return "other";
      }
      if (prompt.length === 0) {
        return "messages";
      }
      const characteristics = prompt.map(detectSingleMessageCharacteristics);
      if (characteristics.some((c) => c === "has-ui-specific-parts")) {
        return "ui-messages";
      } else if (characteristics.every(
        (c) => c === "has-core-specific-parts" || c === "message"
      )) {
        return "messages";
      } else {
        return "other";
      }
    }
    function detectSingleMessageCharacteristics(message) {
      if (typeof message === "object" && message !== null && (message.role === "function" || // UI-only role
      message.role === "data" || // UI-only role
      "toolInvocations" in message || // UI-specific field
      "parts" in message || // UI-specific field
      "experimental_attachments" in message)) {
        return "has-ui-specific-parts";
      } else if (typeof message === "object" && message !== null && "content" in message && (Array.isArray(message.content) || // Core messages can have array content
      "experimental_providerMetadata" in message || "providerOptions" in message)) {
        return "has-core-specific-parts";
      } else if (typeof message === "object" && message !== null && "role" in message && "content" in message && typeof message.content === "string" && ["system", "user", "assistant", "tool"].includes(message.role)) {
        return "message";
      } else {
        return "other";
      }
    }
    var import_zod6 = require_lib();
    var import_zod3 = require_lib();
    var import_zod22 = require_lib();
    var jsonValueSchema = import_zod22.z.lazy(
      () => import_zod22.z.union([
        import_zod22.z.null(),
        import_zod22.z.string(),
        import_zod22.z.number(),
        import_zod22.z.boolean(),
        import_zod22.z.record(import_zod22.z.string(), jsonValueSchema),
        import_zod22.z.array(jsonValueSchema)
      ])
    );
    var providerMetadataSchema = import_zod3.z.record(
      import_zod3.z.string(),
      import_zod3.z.record(import_zod3.z.string(), jsonValueSchema)
    );
    var import_zod5 = require_lib();
    var import_zod4 = require_lib();
    var toolResultContentSchema = import_zod4.z.array(
      import_zod4.z.union([
        import_zod4.z.object({ type: import_zod4.z.literal("text"), text: import_zod4.z.string() }),
        import_zod4.z.object({
          type: import_zod4.z.literal("image"),
          data: import_zod4.z.string(),
          mimeType: import_zod4.z.string().optional()
        })
      ])
    );
    var textPartSchema = import_zod5.z.object({
      type: import_zod5.z.literal("text"),
      text: import_zod5.z.string(),
      providerOptions: providerMetadataSchema.optional(),
      experimental_providerMetadata: providerMetadataSchema.optional()
    });
    var imagePartSchema = import_zod5.z.object({
      type: import_zod5.z.literal("image"),
      image: import_zod5.z.union([dataContentSchema, import_zod5.z.instanceof(URL)]),
      mimeType: import_zod5.z.string().optional(),
      providerOptions: providerMetadataSchema.optional(),
      experimental_providerMetadata: providerMetadataSchema.optional()
    });
    var filePartSchema = import_zod5.z.object({
      type: import_zod5.z.literal("file"),
      data: import_zod5.z.union([dataContentSchema, import_zod5.z.instanceof(URL)]),
      filename: import_zod5.z.string().optional(),
      mimeType: import_zod5.z.string(),
      providerOptions: providerMetadataSchema.optional(),
      experimental_providerMetadata: providerMetadataSchema.optional()
    });
    var reasoningPartSchema = import_zod5.z.object({
      type: import_zod5.z.literal("reasoning"),
      text: import_zod5.z.string(),
      providerOptions: providerMetadataSchema.optional(),
      experimental_providerMetadata: providerMetadataSchema.optional()
    });
    var redactedReasoningPartSchema = import_zod5.z.object({
      type: import_zod5.z.literal("redacted-reasoning"),
      data: import_zod5.z.string(),
      providerOptions: providerMetadataSchema.optional(),
      experimental_providerMetadata: providerMetadataSchema.optional()
    });
    var toolCallPartSchema = import_zod5.z.object({
      type: import_zod5.z.literal("tool-call"),
      toolCallId: import_zod5.z.string(),
      toolName: import_zod5.z.string(),
      args: import_zod5.z.unknown(),
      providerOptions: providerMetadataSchema.optional(),
      experimental_providerMetadata: providerMetadataSchema.optional()
    });
    var toolResultPartSchema = import_zod5.z.object({
      type: import_zod5.z.literal("tool-result"),
      toolCallId: import_zod5.z.string(),
      toolName: import_zod5.z.string(),
      result: import_zod5.z.unknown(),
      content: toolResultContentSchema.optional(),
      isError: import_zod5.z.boolean().optional(),
      providerOptions: providerMetadataSchema.optional(),
      experimental_providerMetadata: providerMetadataSchema.optional()
    });
    var coreSystemMessageSchema = import_zod6.z.object({
      role: import_zod6.z.literal("system"),
      content: import_zod6.z.string(),
      providerOptions: providerMetadataSchema.optional(),
      experimental_providerMetadata: providerMetadataSchema.optional()
    });
    var coreUserMessageSchema = import_zod6.z.object({
      role: import_zod6.z.literal("user"),
      content: import_zod6.z.union([
        import_zod6.z.string(),
        import_zod6.z.array(import_zod6.z.union([textPartSchema, imagePartSchema, filePartSchema]))
      ]),
      providerOptions: providerMetadataSchema.optional(),
      experimental_providerMetadata: providerMetadataSchema.optional()
    });
    var coreAssistantMessageSchema = import_zod6.z.object({
      role: import_zod6.z.literal("assistant"),
      content: import_zod6.z.union([
        import_zod6.z.string(),
        import_zod6.z.array(
          import_zod6.z.union([
            textPartSchema,
            filePartSchema,
            reasoningPartSchema,
            redactedReasoningPartSchema,
            toolCallPartSchema
          ])
        )
      ]),
      providerOptions: providerMetadataSchema.optional(),
      experimental_providerMetadata: providerMetadataSchema.optional()
    });
    var coreToolMessageSchema = import_zod6.z.object({
      role: import_zod6.z.literal("tool"),
      content: import_zod6.z.array(toolResultPartSchema),
      providerOptions: providerMetadataSchema.optional(),
      experimental_providerMetadata: providerMetadataSchema.optional()
    });
    var coreMessageSchema = import_zod6.z.union([
      coreSystemMessageSchema,
      coreUserMessageSchema,
      coreAssistantMessageSchema,
      coreToolMessageSchema
    ]);
    function standardizePrompt({
      prompt,
      tools
    }) {
      if (prompt.prompt == null && prompt.messages == null) {
        throw new import_provider10.InvalidPromptError({
          prompt,
          message: "prompt or messages must be defined"
        });
      }
      if (prompt.prompt != null && prompt.messages != null) {
        throw new import_provider10.InvalidPromptError({
          prompt,
          message: "prompt and messages cannot be defined at the same time"
        });
      }
      if (prompt.system != null && typeof prompt.system !== "string") {
        throw new import_provider10.InvalidPromptError({
          prompt,
          message: "system must be a string"
        });
      }
      if (prompt.prompt != null) {
        if (typeof prompt.prompt !== "string") {
          throw new import_provider10.InvalidPromptError({
            prompt,
            message: "prompt must be a string"
          });
        }
        return {
          type: "prompt",
          system: prompt.system,
          messages: [
            {
              role: "user",
              content: prompt.prompt
            }
          ]
        };
      }
      if (prompt.messages != null) {
        const promptType = detectPromptType(prompt.messages);
        if (promptType === "other") {
          throw new import_provider10.InvalidPromptError({
            prompt,
            message: "messages must be an array of CoreMessage or UIMessage"
          });
        }
        const messages = promptType === "ui-messages" ? convertToCoreMessages(prompt.messages, {
          tools
        }) : prompt.messages;
        const validationResult = (0, import_provider_utils4.safeValidateTypes)({
          value: messages,
          schema: import_zod7.z.array(coreMessageSchema)
        });
        if (!validationResult.success) {
          throw new import_provider10.InvalidPromptError({
            prompt,
            message: "messages must be an array of CoreMessage or UIMessage",
            cause: validationResult.error
          });
        }
        return {
          type: "messages",
          messages,
          system: prompt.system
        };
      }
      throw new Error("unreachable");
    }
    function calculateLanguageModelUsage({
      promptTokens,
      completionTokens
    }) {
      return {
        promptTokens,
        completionTokens,
        totalTokens: promptTokens + completionTokens
      };
    }
    function addLanguageModelUsage(usage1, usage2) {
      return {
        promptTokens: usage1.promptTokens + usage2.promptTokens,
        completionTokens: usage1.completionTokens + usage2.completionTokens,
        totalTokens: usage1.totalTokens + usage2.totalTokens
      };
    }
    var DEFAULT_SCHEMA_PREFIX = "JSON schema:";
    var DEFAULT_SCHEMA_SUFFIX = "You MUST answer with a JSON object that matches the JSON schema above.";
    var DEFAULT_GENERIC_SUFFIX = "You MUST answer with JSON.";
    function injectJsonInstruction({
      prompt,
      schema,
      schemaPrefix = schema != null ? DEFAULT_SCHEMA_PREFIX : void 0,
      schemaSuffix = schema != null ? DEFAULT_SCHEMA_SUFFIX : DEFAULT_GENERIC_SUFFIX
    }) {
      return [
        prompt != null && prompt.length > 0 ? prompt : void 0,
        prompt != null && prompt.length > 0 ? "" : void 0,
        // add a newline if prompt is not null
        schemaPrefix,
        schema != null ? JSON.stringify(schema) : void 0,
        schemaSuffix
      ].filter((line) => line != null).join("\n");
    }
    var import_provider11 = require_dist();
    var import_provider_utils5 = require_dist3();
    var import_ui_utils2 = require_dist7();
    function createAsyncIterableStream(source) {
      const stream = source.pipeThrough(new TransformStream());
      stream[Symbol.asyncIterator] = () => {
        const reader = stream.getReader();
        return {
          async next() {
            const { done, value } = await reader.read();
            return done ? { done: true, value: void 0 } : { done: false, value };
          }
        };
      };
      return stream;
    }
    var noSchemaOutputStrategy = {
      type: "no-schema",
      jsonSchema: void 0,
      validatePartialResult({ value, textDelta }) {
        return { success: true, value: { partial: value, textDelta } };
      },
      validateFinalResult(value, context2) {
        return value === void 0 ? {
          success: false,
          error: new NoObjectGeneratedError({
            message: "No object generated: response did not match schema.",
            text: context2.text,
            response: context2.response,
            usage: context2.usage
          })
        } : { success: true, value };
      },
      createElementStream() {
        throw new import_provider11.UnsupportedFunctionalityError({
          functionality: "element streams in no-schema mode"
        });
      }
    };
    var objectOutputStrategy = (schema) => ({
      type: "object",
      jsonSchema: schema.jsonSchema,
      validatePartialResult({ value, textDelta }) {
        return {
          success: true,
          value: {
            // Note: currently no validation of partial results:
            partial: value,
            textDelta
          }
        };
      },
      validateFinalResult(value) {
        return (0, import_provider_utils5.safeValidateTypes)({ value, schema });
      },
      createElementStream() {
        throw new import_provider11.UnsupportedFunctionalityError({
          functionality: "element streams in object mode"
        });
      }
    });
    var arrayOutputStrategy = (schema) => {
      const { $schema, ...itemSchema } = schema.jsonSchema;
      return {
        type: "enum",
        // wrap in object that contains array of elements, since most LLMs will not
        // be able to generate an array directly:
        // possible future optimization: use arrays directly when model supports grammar-guided generation
        jsonSchema: {
          $schema: "http://json-schema.org/draft-07/schema#",
          type: "object",
          properties: {
            elements: { type: "array", items: itemSchema }
          },
          required: ["elements"],
          additionalProperties: false
        },
        validatePartialResult({ value, latestObject, isFirstDelta, isFinalDelta }) {
          var _a17;
          if (!(0, import_provider11.isJSONObject)(value) || !(0, import_provider11.isJSONArray)(value.elements)) {
            return {
              success: false,
              error: new import_provider11.TypeValidationError({
                value,
                cause: "value must be an object that contains an array of elements"
              })
            };
          }
          const inputArray = value.elements;
          const resultArray = [];
          for (let i = 0; i < inputArray.length; i++) {
            const element = inputArray[i];
            const result = (0, import_provider_utils5.safeValidateTypes)({ value: element, schema });
            if (i === inputArray.length - 1 && !isFinalDelta) {
              continue;
            }
            if (!result.success) {
              return result;
            }
            resultArray.push(result.value);
          }
          const publishedElementCount = (_a17 = latestObject == null ? void 0 : latestObject.length) != null ? _a17 : 0;
          let textDelta = "";
          if (isFirstDelta) {
            textDelta += "[";
          }
          if (publishedElementCount > 0) {
            textDelta += ",";
          }
          textDelta += resultArray.slice(publishedElementCount).map((element) => JSON.stringify(element)).join(",");
          if (isFinalDelta) {
            textDelta += "]";
          }
          return {
            success: true,
            value: {
              partial: resultArray,
              textDelta
            }
          };
        },
        validateFinalResult(value) {
          if (!(0, import_provider11.isJSONObject)(value) || !(0, import_provider11.isJSONArray)(value.elements)) {
            return {
              success: false,
              error: new import_provider11.TypeValidationError({
                value,
                cause: "value must be an object that contains an array of elements"
              })
            };
          }
          const inputArray = value.elements;
          for (const element of inputArray) {
            const result = (0, import_provider_utils5.safeValidateTypes)({ value: element, schema });
            if (!result.success) {
              return result;
            }
          }
          return { success: true, value: inputArray };
        },
        createElementStream(originalStream) {
          let publishedElements = 0;
          return createAsyncIterableStream(
            originalStream.pipeThrough(
              new TransformStream({
                transform(chunk, controller) {
                  switch (chunk.type) {
                    case "object": {
                      const array = chunk.object;
                      for (; publishedElements < array.length; publishedElements++) {
                        controller.enqueue(array[publishedElements]);
                      }
                      break;
                    }
                    case "text-delta":
                    case "finish":
                    case "error":
                      break;
                    default: {
                      const _exhaustiveCheck = chunk;
                      throw new Error(
                        `Unsupported chunk type: ${_exhaustiveCheck}`
                      );
                    }
                  }
                }
              })
            )
          );
        }
      };
    };
    var enumOutputStrategy = (enumValues) => {
      return {
        type: "enum",
        // wrap in object that contains result, since most LLMs will not
        // be able to generate an enum value directly:
        // possible future optimization: use enums directly when model supports top-level enums
        jsonSchema: {
          $schema: "http://json-schema.org/draft-07/schema#",
          type: "object",
          properties: {
            result: { type: "string", enum: enumValues }
          },
          required: ["result"],
          additionalProperties: false
        },
        validateFinalResult(value) {
          if (!(0, import_provider11.isJSONObject)(value) || typeof value.result !== "string") {
            return {
              success: false,
              error: new import_provider11.TypeValidationError({
                value,
                cause: 'value must be an object that contains a string in the "result" property.'
              })
            };
          }
          const result = value.result;
          return enumValues.includes(result) ? { success: true, value: result } : {
            success: false,
            error: new import_provider11.TypeValidationError({
              value,
              cause: "value must be a string in the enum"
            })
          };
        },
        validatePartialResult() {
          throw new import_provider11.UnsupportedFunctionalityError({
            functionality: "partial results in enum mode"
          });
        },
        createElementStream() {
          throw new import_provider11.UnsupportedFunctionalityError({
            functionality: "element streams in enum mode"
          });
        }
      };
    };
    function getOutputStrategy({
      output,
      schema,
      enumValues
    }) {
      switch (output) {
        case "object":
          return objectOutputStrategy((0, import_ui_utils2.asSchema)(schema));
        case "array":
          return arrayOutputStrategy((0, import_ui_utils2.asSchema)(schema));
        case "enum":
          return enumOutputStrategy(enumValues);
        case "no-schema":
          return noSchemaOutputStrategy;
        default: {
          const _exhaustiveCheck = output;
          throw new Error(`Unsupported output: ${_exhaustiveCheck}`);
        }
      }
    }
    function validateObjectGenerationInput({
      output,
      mode,
      schema,
      schemaName,
      schemaDescription,
      enumValues
    }) {
      if (output != null && output !== "object" && output !== "array" && output !== "enum" && output !== "no-schema") {
        throw new InvalidArgumentError({
          parameter: "output",
          value: output,
          message: "Invalid output type."
        });
      }
      if (output === "no-schema") {
        if (mode === "auto" || mode === "tool") {
          throw new InvalidArgumentError({
            parameter: "mode",
            value: mode,
            message: 'Mode must be "json" for no-schema output.'
          });
        }
        if (schema != null) {
          throw new InvalidArgumentError({
            parameter: "schema",
            value: schema,
            message: "Schema is not supported for no-schema output."
          });
        }
        if (schemaDescription != null) {
          throw new InvalidArgumentError({
            parameter: "schemaDescription",
            value: schemaDescription,
            message: "Schema description is not supported for no-schema output."
          });
        }
        if (schemaName != null) {
          throw new InvalidArgumentError({
            parameter: "schemaName",
            value: schemaName,
            message: "Schema name is not supported for no-schema output."
          });
        }
        if (enumValues != null) {
          throw new InvalidArgumentError({
            parameter: "enumValues",
            value: enumValues,
            message: "Enum values are not supported for no-schema output."
          });
        }
      }
      if (output === "object") {
        if (schema == null) {
          throw new InvalidArgumentError({
            parameter: "schema",
            value: schema,
            message: "Schema is required for object output."
          });
        }
        if (enumValues != null) {
          throw new InvalidArgumentError({
            parameter: "enumValues",
            value: enumValues,
            message: "Enum values are not supported for object output."
          });
        }
      }
      if (output === "array") {
        if (schema == null) {
          throw new InvalidArgumentError({
            parameter: "schema",
            value: schema,
            message: "Element schema is required for array output."
          });
        }
        if (enumValues != null) {
          throw new InvalidArgumentError({
            parameter: "enumValues",
            value: enumValues,
            message: "Enum values are not supported for array output."
          });
        }
      }
      if (output === "enum") {
        if (schema != null) {
          throw new InvalidArgumentError({
            parameter: "schema",
            value: schema,
            message: "Schema is not supported for enum output."
          });
        }
        if (schemaDescription != null) {
          throw new InvalidArgumentError({
            parameter: "schemaDescription",
            value: schemaDescription,
            message: "Schema description is not supported for enum output."
          });
        }
        if (schemaName != null) {
          throw new InvalidArgumentError({
            parameter: "schemaName",
            value: schemaName,
            message: "Schema name is not supported for enum output."
          });
        }
        if (enumValues == null) {
          throw new InvalidArgumentError({
            parameter: "enumValues",
            value: enumValues,
            message: "Enum values are required for enum output."
          });
        }
        for (const value of enumValues) {
          if (typeof value !== "string") {
            throw new InvalidArgumentError({
              parameter: "enumValues",
              value,
              message: "Enum values must be strings."
            });
          }
        }
      }
    }
    var originalGenerateId = (0, import_provider_utils6.createIdGenerator)({ prefix: "aiobj", size: 24 });
    async function generateObject({
      model,
      enum: enumValues,
      // rename bc enum is reserved by typescript
      schema: inputSchema,
      schemaName,
      schemaDescription,
      mode,
      output = "object",
      system,
      prompt,
      messages,
      maxRetries: maxRetriesArg,
      abortSignal,
      headers,
      experimental_repairText: repairText,
      experimental_telemetry: telemetry,
      experimental_providerMetadata,
      providerOptions = experimental_providerMetadata,
      _internal: {
        generateId: generateId3 = originalGenerateId,
        currentDate = () => /* @__PURE__ */ new Date()
      } = {},
      ...settings
    }) {
      validateObjectGenerationInput({
        output,
        mode,
        schema: inputSchema,
        schemaName,
        schemaDescription,
        enumValues
      });
      const { maxRetries, retry } = prepareRetries({ maxRetries: maxRetriesArg });
      const outputStrategy = getOutputStrategy({
        output,
        schema: inputSchema,
        enumValues
      });
      if (outputStrategy.type === "no-schema" && mode === void 0) {
        mode = "json";
      }
      const baseTelemetryAttributes = getBaseTelemetryAttributes({
        model,
        telemetry,
        headers,
        settings: { ...settings, maxRetries }
      });
      const tracer = getTracer(telemetry);
      return recordSpan({
        name: "ai.generateObject",
        attributes: selectTelemetryAttributes({
          telemetry,
          attributes: {
            ...assembleOperationName({
              operationId: "ai.generateObject",
              telemetry
            }),
            ...baseTelemetryAttributes,
            // specific settings that only make sense on the outer level:
            "ai.prompt": {
              input: () => JSON.stringify({ system, prompt, messages })
            },
            "ai.schema": outputStrategy.jsonSchema != null ? { input: () => JSON.stringify(outputStrategy.jsonSchema) } : void 0,
            "ai.schema.name": schemaName,
            "ai.schema.description": schemaDescription,
            "ai.settings.output": outputStrategy.type,
            "ai.settings.mode": mode
          }
        }),
        tracer,
        fn: async (span) => {
          var _a17, _b, _c, _d;
          if (mode === "auto" || mode == null) {
            mode = model.defaultObjectGenerationMode;
          }
          let result;
          let finishReason;
          let usage;
          let warnings;
          let rawResponse;
          let response;
          let request;
          let logprobs;
          let resultProviderMetadata;
          switch (mode) {
            case "json": {
              const standardizedPrompt = standardizePrompt({
                prompt: {
                  system: outputStrategy.jsonSchema == null ? injectJsonInstruction({ prompt: system }) : model.supportsStructuredOutputs ? system : injectJsonInstruction({
                    prompt: system,
                    schema: outputStrategy.jsonSchema
                  }),
                  prompt,
                  messages
                },
                tools: void 0
              });
              const promptMessages = await convertToLanguageModelPrompt({
                prompt: standardizedPrompt,
                modelSupportsImageUrls: model.supportsImageUrls,
                modelSupportsUrl: (_a17 = model.supportsUrl) == null ? void 0 : _a17.bind(model)
                // support 'this' context
              });
              const generateResult = await retry(
                () => recordSpan({
                  name: "ai.generateObject.doGenerate",
                  attributes: selectTelemetryAttributes({
                    telemetry,
                    attributes: {
                      ...assembleOperationName({
                        operationId: "ai.generateObject.doGenerate",
                        telemetry
                      }),
                      ...baseTelemetryAttributes,
                      "ai.prompt.format": {
                        input: () => standardizedPrompt.type
                      },
                      "ai.prompt.messages": {
                        input: () => JSON.stringify(promptMessages)
                      },
                      "ai.settings.mode": mode,
                      // standardized gen-ai llm span attributes:
                      "gen_ai.system": model.provider,
                      "gen_ai.request.model": model.modelId,
                      "gen_ai.request.frequency_penalty": settings.frequencyPenalty,
                      "gen_ai.request.max_tokens": settings.maxTokens,
                      "gen_ai.request.presence_penalty": settings.presencePenalty,
                      "gen_ai.request.temperature": settings.temperature,
                      "gen_ai.request.top_k": settings.topK,
                      "gen_ai.request.top_p": settings.topP
                    }
                  }),
                  tracer,
                  fn: async (span2) => {
                    var _a18, _b2, _c2, _d2, _e, _f;
                    const result2 = await model.doGenerate({
                      mode: {
                        type: "object-json",
                        schema: outputStrategy.jsonSchema,
                        name: schemaName,
                        description: schemaDescription
                      },
                      ...prepareCallSettings(settings),
                      inputFormat: standardizedPrompt.type,
                      prompt: promptMessages,
                      providerMetadata: providerOptions,
                      abortSignal,
                      headers
                    });
                    const responseData = {
                      id: (_b2 = (_a18 = result2.response) == null ? void 0 : _a18.id) != null ? _b2 : generateId3(),
                      timestamp: (_d2 = (_c2 = result2.response) == null ? void 0 : _c2.timestamp) != null ? _d2 : currentDate(),
                      modelId: (_f = (_e = result2.response) == null ? void 0 : _e.modelId) != null ? _f : model.modelId
                    };
                    if (result2.text === void 0) {
                      throw new NoObjectGeneratedError({
                        message: "No object generated: the model did not return a response.",
                        response: responseData,
                        usage: calculateLanguageModelUsage(result2.usage)
                      });
                    }
                    span2.setAttributes(
                      selectTelemetryAttributes({
                        telemetry,
                        attributes: {
                          "ai.response.finishReason": result2.finishReason,
                          "ai.response.object": { output: () => result2.text },
                          "ai.response.id": responseData.id,
                          "ai.response.model": responseData.modelId,
                          "ai.response.timestamp": responseData.timestamp.toISOString(),
                          "ai.usage.promptTokens": result2.usage.promptTokens,
                          "ai.usage.completionTokens": result2.usage.completionTokens,
                          // standardized gen-ai llm span attributes:
                          "gen_ai.response.finish_reasons": [result2.finishReason],
                          "gen_ai.response.id": responseData.id,
                          "gen_ai.response.model": responseData.modelId,
                          "gen_ai.usage.prompt_tokens": result2.usage.promptTokens,
                          "gen_ai.usage.completion_tokens": result2.usage.completionTokens
                        }
                      })
                    );
                    return { ...result2, objectText: result2.text, responseData };
                  }
                })
              );
              result = generateResult.objectText;
              finishReason = generateResult.finishReason;
              usage = generateResult.usage;
              warnings = generateResult.warnings;
              rawResponse = generateResult.rawResponse;
              logprobs = generateResult.logprobs;
              resultProviderMetadata = generateResult.providerMetadata;
              request = (_b = generateResult.request) != null ? _b : {};
              response = generateResult.responseData;
              break;
            }
            case "tool": {
              const standardizedPrompt = standardizePrompt({
                prompt: { system, prompt, messages },
                tools: void 0
              });
              const promptMessages = await convertToLanguageModelPrompt({
                prompt: standardizedPrompt,
                modelSupportsImageUrls: model.supportsImageUrls,
                modelSupportsUrl: (_c = model.supportsUrl) == null ? void 0 : _c.bind(model)
                // support 'this' context,
              });
              const inputFormat = standardizedPrompt.type;
              const generateResult = await retry(
                () => recordSpan({
                  name: "ai.generateObject.doGenerate",
                  attributes: selectTelemetryAttributes({
                    telemetry,
                    attributes: {
                      ...assembleOperationName({
                        operationId: "ai.generateObject.doGenerate",
                        telemetry
                      }),
                      ...baseTelemetryAttributes,
                      "ai.prompt.format": {
                        input: () => inputFormat
                      },
                      "ai.prompt.messages": {
                        input: () => JSON.stringify(promptMessages)
                      },
                      "ai.settings.mode": mode,
                      // standardized gen-ai llm span attributes:
                      "gen_ai.system": model.provider,
                      "gen_ai.request.model": model.modelId,
                      "gen_ai.request.frequency_penalty": settings.frequencyPenalty,
                      "gen_ai.request.max_tokens": settings.maxTokens,
                      "gen_ai.request.presence_penalty": settings.presencePenalty,
                      "gen_ai.request.temperature": settings.temperature,
                      "gen_ai.request.top_k": settings.topK,
                      "gen_ai.request.top_p": settings.topP
                    }
                  }),
                  tracer,
                  fn: async (span2) => {
                    var _a18, _b2, _c2, _d2, _e, _f, _g, _h;
                    const result2 = await model.doGenerate({
                      mode: {
                        type: "object-tool",
                        tool: {
                          type: "function",
                          name: schemaName != null ? schemaName : "json",
                          description: schemaDescription != null ? schemaDescription : "Respond with a JSON object.",
                          parameters: outputStrategy.jsonSchema
                        }
                      },
                      ...prepareCallSettings(settings),
                      inputFormat,
                      prompt: promptMessages,
                      providerMetadata: providerOptions,
                      abortSignal,
                      headers
                    });
                    const objectText = (_b2 = (_a18 = result2.toolCalls) == null ? void 0 : _a18[0]) == null ? void 0 : _b2.args;
                    const responseData = {
                      id: (_d2 = (_c2 = result2.response) == null ? void 0 : _c2.id) != null ? _d2 : generateId3(),
                      timestamp: (_f = (_e = result2.response) == null ? void 0 : _e.timestamp) != null ? _f : currentDate(),
                      modelId: (_h = (_g = result2.response) == null ? void 0 : _g.modelId) != null ? _h : model.modelId
                    };
                    if (objectText === void 0) {
                      throw new NoObjectGeneratedError({
                        message: "No object generated: the tool was not called.",
                        response: responseData,
                        usage: calculateLanguageModelUsage(result2.usage)
                      });
                    }
                    span2.setAttributes(
                      selectTelemetryAttributes({
                        telemetry,
                        attributes: {
                          "ai.response.finishReason": result2.finishReason,
                          "ai.response.object": { output: () => objectText },
                          "ai.response.id": responseData.id,
                          "ai.response.model": responseData.modelId,
                          "ai.response.timestamp": responseData.timestamp.toISOString(),
                          "ai.usage.promptTokens": result2.usage.promptTokens,
                          "ai.usage.completionTokens": result2.usage.completionTokens,
                          // standardized gen-ai llm span attributes:
                          "gen_ai.response.finish_reasons": [result2.finishReason],
                          "gen_ai.response.id": responseData.id,
                          "gen_ai.response.model": responseData.modelId,
                          "gen_ai.usage.input_tokens": result2.usage.promptTokens,
                          "gen_ai.usage.output_tokens": result2.usage.completionTokens
                        }
                      })
                    );
                    return { ...result2, objectText, responseData };
                  }
                })
              );
              result = generateResult.objectText;
              finishReason = generateResult.finishReason;
              usage = generateResult.usage;
              warnings = generateResult.warnings;
              rawResponse = generateResult.rawResponse;
              logprobs = generateResult.logprobs;
              resultProviderMetadata = generateResult.providerMetadata;
              request = (_d = generateResult.request) != null ? _d : {};
              response = generateResult.responseData;
              break;
            }
            case void 0: {
              throw new Error(
                "Model does not have a default object generation mode."
              );
            }
            default: {
              const _exhaustiveCheck = mode;
              throw new Error(`Unsupported mode: ${_exhaustiveCheck}`);
            }
          }
          function processResult(result2) {
            const parseResult = (0, import_provider_utils6.safeParseJSON)({ text: result2 });
            if (!parseResult.success) {
              throw new NoObjectGeneratedError({
                message: "No object generated: could not parse the response.",
                cause: parseResult.error,
                text: result2,
                response,
                usage: calculateLanguageModelUsage(usage)
              });
            }
            const validationResult = outputStrategy.validateFinalResult(
              parseResult.value,
              {
                text: result2,
                response,
                usage: calculateLanguageModelUsage(usage)
              }
            );
            if (!validationResult.success) {
              throw new NoObjectGeneratedError({
                message: "No object generated: response did not match schema.",
                cause: validationResult.error,
                text: result2,
                response,
                usage: calculateLanguageModelUsage(usage)
              });
            }
            return validationResult.value;
          }
          let object2;
          try {
            object2 = processResult(result);
          } catch (error) {
            if (repairText != null && NoObjectGeneratedError.isInstance(error) && (import_provider12.JSONParseError.isInstance(error.cause) || import_provider12.TypeValidationError.isInstance(error.cause))) {
              const repairedText = await repairText({
                text: result,
                error: error.cause
              });
              if (repairedText === null) {
                throw error;
              }
              object2 = processResult(repairedText);
            } else {
              throw error;
            }
          }
          span.setAttributes(
            selectTelemetryAttributes({
              telemetry,
              attributes: {
                "ai.response.finishReason": finishReason,
                "ai.response.object": {
                  output: () => JSON.stringify(object2)
                },
                "ai.usage.promptTokens": usage.promptTokens,
                "ai.usage.completionTokens": usage.completionTokens
              }
            })
          );
          return new DefaultGenerateObjectResult({
            object: object2,
            finishReason,
            usage: calculateLanguageModelUsage(usage),
            warnings,
            request,
            response: {
              ...response,
              headers: rawResponse == null ? void 0 : rawResponse.headers,
              body: rawResponse == null ? void 0 : rawResponse.body
            },
            logprobs,
            providerMetadata: resultProviderMetadata
          });
        }
      });
    }
    var DefaultGenerateObjectResult = class {
      constructor(options) {
        this.object = options.object;
        this.finishReason = options.finishReason;
        this.usage = options.usage;
        this.warnings = options.warnings;
        this.providerMetadata = options.providerMetadata;
        this.experimental_providerMetadata = options.providerMetadata;
        this.response = options.response;
        this.request = options.request;
        this.logprobs = options.logprobs;
      }
      toJsonResponse(init) {
        var _a17;
        return new Response(JSON.stringify(this.object), {
          status: (_a17 = init == null ? void 0 : init.status) != null ? _a17 : 200,
          headers: prepareResponseHeaders(init == null ? void 0 : init.headers, {
            contentType: "application/json; charset=utf-8"
          })
        });
      }
    };
    var import_provider_utils7 = require_dist3();
    var import_ui_utils3 = require_dist7();
    var DelayedPromise = class {
      constructor() {
        this.status = { type: "pending" };
        this._resolve = void 0;
        this._reject = void 0;
      }
      get value() {
        if (this.promise) {
          return this.promise;
        }
        this.promise = new Promise((resolve3, reject) => {
          if (this.status.type === "resolved") {
            resolve3(this.status.value);
          } else if (this.status.type === "rejected") {
            reject(this.status.error);
          }
          this._resolve = resolve3;
          this._reject = reject;
        });
        return this.promise;
      }
      resolve(value) {
        var _a17;
        this.status = { type: "resolved", value };
        if (this.promise) {
          (_a17 = this._resolve) == null ? void 0 : _a17.call(this, value);
        }
      }
      reject(error) {
        var _a17;
        this.status = { type: "rejected", error };
        if (this.promise) {
          (_a17 = this._reject) == null ? void 0 : _a17.call(this, error);
        }
      }
    };
    function createResolvablePromise() {
      let resolve3;
      let reject;
      const promise = new Promise((res, rej) => {
        resolve3 = res;
        reject = rej;
      });
      return {
        promise,
        resolve: resolve3,
        reject
      };
    }
    function createStitchableStream() {
      let innerStreamReaders = [];
      let controller = null;
      let isClosed = false;
      let waitForNewStream = createResolvablePromise();
      const processPull = async () => {
        if (isClosed && innerStreamReaders.length === 0) {
          controller == null ? void 0 : controller.close();
          return;
        }
        if (innerStreamReaders.length === 0) {
          waitForNewStream = createResolvablePromise();
          await waitForNewStream.promise;
          return processPull();
        }
        try {
          const { value, done } = await innerStreamReaders[0].read();
          if (done) {
            innerStreamReaders.shift();
            if (innerStreamReaders.length > 0) {
              await processPull();
            } else if (isClosed) {
              controller == null ? void 0 : controller.close();
            }
          } else {
            controller == null ? void 0 : controller.enqueue(value);
          }
        } catch (error) {
          controller == null ? void 0 : controller.error(error);
          innerStreamReaders.shift();
          if (isClosed && innerStreamReaders.length === 0) {
            controller == null ? void 0 : controller.close();
          }
        }
      };
      return {
        stream: new ReadableStream({
          start(controllerParam) {
            controller = controllerParam;
          },
          pull: processPull,
          async cancel() {
            for (const reader of innerStreamReaders) {
              await reader.cancel();
            }
            innerStreamReaders = [];
            isClosed = true;
          }
        }),
        addStream: (innerStream) => {
          if (isClosed) {
            throw new Error("Cannot add inner stream: outer stream is closed");
          }
          innerStreamReaders.push(innerStream.getReader());
          waitForNewStream.resolve();
        },
        /**
         * Gracefully close the outer stream. This will let the inner streams
         * finish processing and then close the outer stream.
         */
        close: () => {
          isClosed = true;
          waitForNewStream.resolve();
          if (innerStreamReaders.length === 0) {
            controller == null ? void 0 : controller.close();
          }
        },
        /**
         * Immediately close the outer stream. This will cancel all inner streams
         * and close the outer stream.
         */
        terminate: () => {
          isClosed = true;
          waitForNewStream.resolve();
          innerStreamReaders.forEach((reader) => reader.cancel());
          innerStreamReaders = [];
          controller == null ? void 0 : controller.close();
        }
      };
    }
    function now() {
      var _a17, _b;
      return (_b = (_a17 = globalThis == null ? void 0 : globalThis.performance) == null ? void 0 : _a17.now()) != null ? _b : Date.now();
    }
    var originalGenerateId2 = (0, import_provider_utils7.createIdGenerator)({ prefix: "aiobj", size: 24 });
    function streamObject({
      model,
      schema: inputSchema,
      schemaName,
      schemaDescription,
      mode,
      output = "object",
      system,
      prompt,
      messages,
      maxRetries,
      abortSignal,
      headers,
      experimental_telemetry: telemetry,
      experimental_providerMetadata,
      providerOptions = experimental_providerMetadata,
      onError,
      onFinish,
      _internal: {
        generateId: generateId3 = originalGenerateId2,
        currentDate = () => /* @__PURE__ */ new Date(),
        now: now2 = now
      } = {},
      ...settings
    }) {
      validateObjectGenerationInput({
        output,
        mode,
        schema: inputSchema,
        schemaName,
        schemaDescription
      });
      const outputStrategy = getOutputStrategy({ output, schema: inputSchema });
      if (outputStrategy.type === "no-schema" && mode === void 0) {
        mode = "json";
      }
      return new DefaultStreamObjectResult({
        model,
        telemetry,
        headers,
        settings,
        maxRetries,
        abortSignal,
        outputStrategy,
        system,
        prompt,
        messages,
        schemaName,
        schemaDescription,
        providerOptions,
        mode,
        onError,
        onFinish,
        generateId: generateId3,
        currentDate,
        now: now2
      });
    }
    var DefaultStreamObjectResult = class {
      constructor({
        model,
        headers,
        telemetry,
        settings,
        maxRetries: maxRetriesArg,
        abortSignal,
        outputStrategy,
        system,
        prompt,
        messages,
        schemaName,
        schemaDescription,
        providerOptions,
        mode,
        onError,
        onFinish,
        generateId: generateId3,
        currentDate,
        now: now2
      }) {
        this.objectPromise = new DelayedPromise();
        this.usagePromise = new DelayedPromise();
        this.providerMetadataPromise = new DelayedPromise();
        this.warningsPromise = new DelayedPromise();
        this.requestPromise = new DelayedPromise();
        this.responsePromise = new DelayedPromise();
        const { maxRetries, retry } = prepareRetries({
          maxRetries: maxRetriesArg
        });
        const baseTelemetryAttributes = getBaseTelemetryAttributes({
          model,
          telemetry,
          headers,
          settings: { ...settings, maxRetries }
        });
        const tracer = getTracer(telemetry);
        const self = this;
        const stitchableStream = createStitchableStream();
        const eventProcessor = new TransformStream({
          transform(chunk, controller) {
            controller.enqueue(chunk);
            if (chunk.type === "error") {
              onError == null ? void 0 : onError({ error: chunk.error });
            }
          }
        });
        this.baseStream = stitchableStream.stream.pipeThrough(eventProcessor);
        recordSpan({
          name: "ai.streamObject",
          attributes: selectTelemetryAttributes({
            telemetry,
            attributes: {
              ...assembleOperationName({
                operationId: "ai.streamObject",
                telemetry
              }),
              ...baseTelemetryAttributes,
              // specific settings that only make sense on the outer level:
              "ai.prompt": {
                input: () => JSON.stringify({ system, prompt, messages })
              },
              "ai.schema": outputStrategy.jsonSchema != null ? { input: () => JSON.stringify(outputStrategy.jsonSchema) } : void 0,
              "ai.schema.name": schemaName,
              "ai.schema.description": schemaDescription,
              "ai.settings.output": outputStrategy.type,
              "ai.settings.mode": mode
            }
          }),
          tracer,
          endWhenDone: false,
          fn: async (rootSpan) => {
            var _a17, _b;
            if (mode === "auto" || mode == null) {
              mode = model.defaultObjectGenerationMode;
            }
            let callOptions;
            let transformer;
            switch (mode) {
              case "json": {
                const standardizedPrompt = standardizePrompt({
                  prompt: {
                    system: outputStrategy.jsonSchema == null ? injectJsonInstruction({ prompt: system }) : model.supportsStructuredOutputs ? system : injectJsonInstruction({
                      prompt: system,
                      schema: outputStrategy.jsonSchema
                    }),
                    prompt,
                    messages
                  },
                  tools: void 0
                });
                callOptions = {
                  mode: {
                    type: "object-json",
                    schema: outputStrategy.jsonSchema,
                    name: schemaName,
                    description: schemaDescription
                  },
                  ...prepareCallSettings(settings),
                  inputFormat: standardizedPrompt.type,
                  prompt: await convertToLanguageModelPrompt({
                    prompt: standardizedPrompt,
                    modelSupportsImageUrls: model.supportsImageUrls,
                    modelSupportsUrl: (_a17 = model.supportsUrl) == null ? void 0 : _a17.bind(model)
                    // support 'this' context
                  }),
                  providerMetadata: providerOptions,
                  abortSignal,
                  headers
                };
                transformer = {
                  transform: (chunk, controller) => {
                    switch (chunk.type) {
                      case "text-delta":
                        controller.enqueue(chunk.textDelta);
                        break;
                      case "response-metadata":
                      case "finish":
                      case "error":
                        controller.enqueue(chunk);
                        break;
                    }
                  }
                };
                break;
              }
              case "tool": {
                const standardizedPrompt = standardizePrompt({
                  prompt: { system, prompt, messages },
                  tools: void 0
                });
                callOptions = {
                  mode: {
                    type: "object-tool",
                    tool: {
                      type: "function",
                      name: schemaName != null ? schemaName : "json",
                      description: schemaDescription != null ? schemaDescription : "Respond with a JSON object.",
                      parameters: outputStrategy.jsonSchema
                    }
                  },
                  ...prepareCallSettings(settings),
                  inputFormat: standardizedPrompt.type,
                  prompt: await convertToLanguageModelPrompt({
                    prompt: standardizedPrompt,
                    modelSupportsImageUrls: model.supportsImageUrls,
                    modelSupportsUrl: (_b = model.supportsUrl) == null ? void 0 : _b.bind(model)
                    // support 'this' context,
                  }),
                  providerMetadata: providerOptions,
                  abortSignal,
                  headers
                };
                transformer = {
                  transform(chunk, controller) {
                    switch (chunk.type) {
                      case "tool-call-delta":
                        controller.enqueue(chunk.argsTextDelta);
                        break;
                      case "response-metadata":
                      case "finish":
                      case "error":
                        controller.enqueue(chunk);
                        break;
                    }
                  }
                };
                break;
              }
              case void 0: {
                throw new Error(
                  "Model does not have a default object generation mode."
                );
              }
              default: {
                const _exhaustiveCheck = mode;
                throw new Error(`Unsupported mode: ${_exhaustiveCheck}`);
              }
            }
            const {
              result: { stream, warnings, rawResponse, request },
              doStreamSpan,
              startTimestampMs
            } = await retry(
              () => recordSpan({
                name: "ai.streamObject.doStream",
                attributes: selectTelemetryAttributes({
                  telemetry,
                  attributes: {
                    ...assembleOperationName({
                      operationId: "ai.streamObject.doStream",
                      telemetry
                    }),
                    ...baseTelemetryAttributes,
                    "ai.prompt.format": {
                      input: () => callOptions.inputFormat
                    },
                    "ai.prompt.messages": {
                      input: () => JSON.stringify(callOptions.prompt)
                    },
                    "ai.settings.mode": mode,
                    // standardized gen-ai llm span attributes:
                    "gen_ai.system": model.provider,
                    "gen_ai.request.model": model.modelId,
                    "gen_ai.request.frequency_penalty": settings.frequencyPenalty,
                    "gen_ai.request.max_tokens": settings.maxTokens,
                    "gen_ai.request.presence_penalty": settings.presencePenalty,
                    "gen_ai.request.temperature": settings.temperature,
                    "gen_ai.request.top_k": settings.topK,
                    "gen_ai.request.top_p": settings.topP
                  }
                }),
                tracer,
                endWhenDone: false,
                fn: async (doStreamSpan2) => ({
                  startTimestampMs: now2(),
                  doStreamSpan: doStreamSpan2,
                  result: await model.doStream(callOptions)
                })
              })
            );
            self.requestPromise.resolve(request != null ? request : {});
            let usage;
            let finishReason;
            let providerMetadata;
            let object2;
            let error;
            let accumulatedText = "";
            let textDelta = "";
            let response = {
              id: generateId3(),
              timestamp: currentDate(),
              modelId: model.modelId
            };
            let latestObjectJson = void 0;
            let latestObject = void 0;
            let isFirstChunk = true;
            let isFirstDelta = true;
            const transformedStream = stream.pipeThrough(new TransformStream(transformer)).pipeThrough(
              new TransformStream({
                async transform(chunk, controller) {
                  var _a18, _b2, _c;
                  if (isFirstChunk) {
                    const msToFirstChunk = now2() - startTimestampMs;
                    isFirstChunk = false;
                    doStreamSpan.addEvent("ai.stream.firstChunk", {
                      "ai.stream.msToFirstChunk": msToFirstChunk
                    });
                    doStreamSpan.setAttributes({
                      "ai.stream.msToFirstChunk": msToFirstChunk
                    });
                  }
                  if (typeof chunk === "string") {
                    accumulatedText += chunk;
                    textDelta += chunk;
                    const { value: currentObjectJson, state: parseState } = (0, import_ui_utils3.parsePartialJson)(accumulatedText);
                    if (currentObjectJson !== void 0 && !(0, import_ui_utils3.isDeepEqualData)(latestObjectJson, currentObjectJson)) {
                      const validationResult = outputStrategy.validatePartialResult({
                        value: currentObjectJson,
                        textDelta,
                        latestObject,
                        isFirstDelta,
                        isFinalDelta: parseState === "successful-parse"
                      });
                      if (validationResult.success && !(0, import_ui_utils3.isDeepEqualData)(
                        latestObject,
                        validationResult.value.partial
                      )) {
                        latestObjectJson = currentObjectJson;
                        latestObject = validationResult.value.partial;
                        controller.enqueue({
                          type: "object",
                          object: latestObject
                        });
                        controller.enqueue({
                          type: "text-delta",
                          textDelta: validationResult.value.textDelta
                        });
                        textDelta = "";
                        isFirstDelta = false;
                      }
                    }
                    return;
                  }
                  switch (chunk.type) {
                    case "response-metadata": {
                      response = {
                        id: (_a18 = chunk.id) != null ? _a18 : response.id,
                        timestamp: (_b2 = chunk.timestamp) != null ? _b2 : response.timestamp,
                        modelId: (_c = chunk.modelId) != null ? _c : response.modelId
                      };
                      break;
                    }
                    case "finish": {
                      if (textDelta !== "") {
                        controller.enqueue({ type: "text-delta", textDelta });
                      }
                      finishReason = chunk.finishReason;
                      usage = calculateLanguageModelUsage(chunk.usage);
                      providerMetadata = chunk.providerMetadata;
                      controller.enqueue({ ...chunk, usage, response });
                      self.usagePromise.resolve(usage);
                      self.providerMetadataPromise.resolve(providerMetadata);
                      self.responsePromise.resolve({
                        ...response,
                        headers: rawResponse == null ? void 0 : rawResponse.headers
                      });
                      const validationResult = outputStrategy.validateFinalResult(
                        latestObjectJson,
                        {
                          text: accumulatedText,
                          response,
                          usage
                        }
                      );
                      if (validationResult.success) {
                        object2 = validationResult.value;
                        self.objectPromise.resolve(object2);
                      } else {
                        error = new NoObjectGeneratedError({
                          message: "No object generated: response did not match schema.",
                          cause: validationResult.error,
                          text: accumulatedText,
                          response,
                          usage
                        });
                        self.objectPromise.reject(error);
                      }
                      break;
                    }
                    default: {
                      controller.enqueue(chunk);
                      break;
                    }
                  }
                },
                // invoke onFinish callback and resolve toolResults promise when the stream is about to close:
                async flush(controller) {
                  try {
                    const finalUsage = usage != null ? usage : {
                      promptTokens: NaN,
                      completionTokens: NaN,
                      totalTokens: NaN
                    };
                    doStreamSpan.setAttributes(
                      selectTelemetryAttributes({
                        telemetry,
                        attributes: {
                          "ai.response.finishReason": finishReason,
                          "ai.response.object": {
                            output: () => JSON.stringify(object2)
                          },
                          "ai.response.id": response.id,
                          "ai.response.model": response.modelId,
                          "ai.response.timestamp": response.timestamp.toISOString(),
                          "ai.usage.promptTokens": finalUsage.promptTokens,
                          "ai.usage.completionTokens": finalUsage.completionTokens,
                          // standardized gen-ai llm span attributes:
                          "gen_ai.response.finish_reasons": [finishReason],
                          "gen_ai.response.id": response.id,
                          "gen_ai.response.model": response.modelId,
                          "gen_ai.usage.input_tokens": finalUsage.promptTokens,
                          "gen_ai.usage.output_tokens": finalUsage.completionTokens
                        }
                      })
                    );
                    doStreamSpan.end();
                    rootSpan.setAttributes(
                      selectTelemetryAttributes({
                        telemetry,
                        attributes: {
                          "ai.usage.promptTokens": finalUsage.promptTokens,
                          "ai.usage.completionTokens": finalUsage.completionTokens,
                          "ai.response.object": {
                            output: () => JSON.stringify(object2)
                          }
                        }
                      })
                    );
                    await (onFinish == null ? void 0 : onFinish({
                      usage: finalUsage,
                      object: object2,
                      error,
                      response: {
                        ...response,
                        headers: rawResponse == null ? void 0 : rawResponse.headers
                      },
                      warnings,
                      providerMetadata,
                      experimental_providerMetadata: providerMetadata
                    }));
                  } catch (error2) {
                    controller.enqueue({ type: "error", error: error2 });
                  } finally {
                    rootSpan.end();
                  }
                }
              })
            );
            stitchableStream.addStream(transformedStream);
          }
        }).catch((error) => {
          stitchableStream.addStream(
            new ReadableStream({
              start(controller) {
                controller.enqueue({ type: "error", error });
                controller.close();
              }
            })
          );
        }).finally(() => {
          stitchableStream.close();
        });
        this.outputStrategy = outputStrategy;
      }
      get object() {
        return this.objectPromise.value;
      }
      get usage() {
        return this.usagePromise.value;
      }
      get experimental_providerMetadata() {
        return this.providerMetadataPromise.value;
      }
      get providerMetadata() {
        return this.providerMetadataPromise.value;
      }
      get warnings() {
        return this.warningsPromise.value;
      }
      get request() {
        return this.requestPromise.value;
      }
      get response() {
        return this.responsePromise.value;
      }
      get partialObjectStream() {
        return createAsyncIterableStream(
          this.baseStream.pipeThrough(
            new TransformStream({
              transform(chunk, controller) {
                switch (chunk.type) {
                  case "object":
                    controller.enqueue(chunk.object);
                    break;
                  case "text-delta":
                  case "finish":
                  case "error":
                    break;
                  default: {
                    const _exhaustiveCheck = chunk;
                    throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);
                  }
                }
              }
            })
          )
        );
      }
      get elementStream() {
        return this.outputStrategy.createElementStream(this.baseStream);
      }
      get textStream() {
        return createAsyncIterableStream(
          this.baseStream.pipeThrough(
            new TransformStream({
              transform(chunk, controller) {
                switch (chunk.type) {
                  case "text-delta":
                    controller.enqueue(chunk.textDelta);
                    break;
                  case "object":
                  case "finish":
                  case "error":
                    break;
                  default: {
                    const _exhaustiveCheck = chunk;
                    throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);
                  }
                }
              }
            })
          )
        );
      }
      get fullStream() {
        return createAsyncIterableStream(this.baseStream);
      }
      pipeTextStreamToResponse(response, init) {
        writeToServerResponse({
          response,
          status: init == null ? void 0 : init.status,
          statusText: init == null ? void 0 : init.statusText,
          headers: prepareOutgoingHttpHeaders(init == null ? void 0 : init.headers, {
            contentType: "text/plain; charset=utf-8"
          }),
          stream: this.textStream.pipeThrough(new TextEncoderStream())
        });
      }
      toTextStreamResponse(init) {
        var _a17;
        return new Response(this.textStream.pipeThrough(new TextEncoderStream()), {
          status: (_a17 = init == null ? void 0 : init.status) != null ? _a17 : 200,
          headers: prepareResponseHeaders(init == null ? void 0 : init.headers, {
            contentType: "text/plain; charset=utf-8"
          })
        });
      }
    };
    var import_provider_utils9 = require_dist3();
    var import_provider13 = require_dist();
    var name9 = "AI_NoOutputSpecifiedError";
    var marker9 = `vercel.ai.error.${name9}`;
    var symbol9 = Symbol.for(marker9);
    var _a9;
    var NoOutputSpecifiedError = class extends import_provider13.AISDKError {
      // used in isInstance
      constructor({ message = "No output specified." } = {}) {
        super({ name: name9, message });
        this[_a9] = true;
      }
      static isInstance(error) {
        return import_provider13.AISDKError.hasMarker(error, marker9);
      }
    };
    _a9 = symbol9;
    var import_provider14 = require_dist();
    var name10 = "AI_ToolExecutionError";
    var marker10 = `vercel.ai.error.${name10}`;
    var symbol10 = Symbol.for(marker10);
    var _a10;
    var ToolExecutionError = class extends import_provider14.AISDKError {
      constructor({
        toolArgs,
        toolName,
        toolCallId,
        cause,
        message = `Error executing tool ${toolName}: ${(0, import_provider14.getErrorMessage)(cause)}`
      }) {
        super({ name: name10, message, cause });
        this[_a10] = true;
        this.toolArgs = toolArgs;
        this.toolName = toolName;
        this.toolCallId = toolCallId;
      }
      static isInstance(error) {
        return import_provider14.AISDKError.hasMarker(error, marker10);
      }
    };
    _a10 = symbol10;
    var import_ui_utils4 = require_dist7();
    function isNonEmptyObject(object2) {
      return object2 != null && Object.keys(object2).length > 0;
    }
    function prepareToolsAndToolChoice({
      tools,
      toolChoice,
      activeTools
    }) {
      if (!isNonEmptyObject(tools)) {
        return {
          tools: void 0,
          toolChoice: void 0
        };
      }
      const filteredTools = activeTools != null ? Object.entries(tools).filter(
        ([name17]) => activeTools.includes(name17)
      ) : Object.entries(tools);
      return {
        tools: filteredTools.map(([name17, tool2]) => {
          const toolType = tool2.type;
          switch (toolType) {
            case void 0:
            case "function":
              return {
                type: "function",
                name: name17,
                description: tool2.description,
                parameters: (0, import_ui_utils4.asSchema)(tool2.parameters).jsonSchema
              };
            case "provider-defined":
              return {
                type: "provider-defined",
                name: name17,
                id: tool2.id,
                args: tool2.args
              };
            default: {
              const exhaustiveCheck = toolType;
              throw new Error(`Unsupported tool type: ${exhaustiveCheck}`);
            }
          }
        }),
        toolChoice: toolChoice == null ? { type: "auto" } : typeof toolChoice === "string" ? { type: toolChoice } : { type: "tool", toolName: toolChoice.toolName }
      };
    }
    var lastWhitespaceRegexp = /^([\s\S]*?)(\s+)(\S*)$/;
    function splitOnLastWhitespace(text2) {
      const match = text2.match(lastWhitespaceRegexp);
      return match ? { prefix: match[1], whitespace: match[2], suffix: match[3] } : void 0;
    }
    function removeTextAfterLastWhitespace(text2) {
      const match = splitOnLastWhitespace(text2);
      return match ? match.prefix + match.whitespace : text2;
    }
    var import_provider_utils8 = require_dist3();
    var import_ui_utils5 = require_dist7();
    var import_provider15 = require_dist();
    var name11 = "AI_InvalidToolArgumentsError";
    var marker11 = `vercel.ai.error.${name11}`;
    var symbol11 = Symbol.for(marker11);
    var _a11;
    var InvalidToolArgumentsError = class extends import_provider15.AISDKError {
      constructor({
        toolArgs,
        toolName,
        cause,
        message = `Invalid arguments for tool ${toolName}: ${(0, import_provider15.getErrorMessage)(
          cause
        )}`
      }) {
        super({ name: name11, message, cause });
        this[_a11] = true;
        this.toolArgs = toolArgs;
        this.toolName = toolName;
      }
      static isInstance(error) {
        return import_provider15.AISDKError.hasMarker(error, marker11);
      }
    };
    _a11 = symbol11;
    var import_provider16 = require_dist();
    var name12 = "AI_NoSuchToolError";
    var marker12 = `vercel.ai.error.${name12}`;
    var symbol12 = Symbol.for(marker12);
    var _a12;
    var NoSuchToolError = class extends import_provider16.AISDKError {
      constructor({
        toolName,
        availableTools = void 0,
        message = `Model tried to call unavailable tool '${toolName}'. ${availableTools === void 0 ? "No tools are available." : `Available tools: ${availableTools.join(", ")}.`}`
      }) {
        super({ name: name12, message });
        this[_a12] = true;
        this.toolName = toolName;
        this.availableTools = availableTools;
      }
      static isInstance(error) {
        return import_provider16.AISDKError.hasMarker(error, marker12);
      }
    };
    _a12 = symbol12;
    var import_provider17 = require_dist();
    var name13 = "AI_ToolCallRepairError";
    var marker13 = `vercel.ai.error.${name13}`;
    var symbol13 = Symbol.for(marker13);
    var _a13;
    var ToolCallRepairError = class extends import_provider17.AISDKError {
      constructor({
        cause,
        originalError,
        message = `Error repairing tool call: ${(0, import_provider17.getErrorMessage)(cause)}`
      }) {
        super({ name: name13, message, cause });
        this[_a13] = true;
        this.originalError = originalError;
      }
      static isInstance(error) {
        return import_provider17.AISDKError.hasMarker(error, marker13);
      }
    };
    _a13 = symbol13;
    async function parseToolCall({
      toolCall,
      tools,
      repairToolCall,
      system,
      messages
    }) {
      if (tools == null) {
        throw new NoSuchToolError({ toolName: toolCall.toolName });
      }
      try {
        return await doParseToolCall({ toolCall, tools });
      } catch (error) {
        if (repairToolCall == null || !(NoSuchToolError.isInstance(error) || InvalidToolArgumentsError.isInstance(error))) {
          throw error;
        }
        let repairedToolCall = null;
        try {
          repairedToolCall = await repairToolCall({
            toolCall,
            tools,
            parameterSchema: ({ toolName }) => (0, import_ui_utils5.asSchema)(tools[toolName].parameters).jsonSchema,
            system,
            messages,
            error
          });
        } catch (repairError) {
          throw new ToolCallRepairError({
            cause: repairError,
            originalError: error
          });
        }
        if (repairedToolCall == null) {
          throw error;
        }
        return await doParseToolCall({ toolCall: repairedToolCall, tools });
      }
    }
    async function doParseToolCall({
      toolCall,
      tools
    }) {
      const toolName = toolCall.toolName;
      const tool2 = tools[toolName];
      if (tool2 == null) {
        throw new NoSuchToolError({
          toolName: toolCall.toolName,
          availableTools: Object.keys(tools)
        });
      }
      const schema = (0, import_ui_utils5.asSchema)(tool2.parameters);
      const parseResult = toolCall.args.trim() === "" ? (0, import_provider_utils8.safeValidateTypes)({ value: {}, schema }) : (0, import_provider_utils8.safeParseJSON)({ text: toolCall.args, schema });
      if (parseResult.success === false) {
        throw new InvalidToolArgumentsError({
          toolName,
          toolArgs: toolCall.args,
          cause: parseResult.error
        });
      }
      return {
        type: "tool-call",
        toolCallId: toolCall.toolCallId,
        toolName,
        args: parseResult.value
      };
    }
    function asReasoningText(reasoning) {
      const reasoningText = reasoning.filter((part) => part.type === "text").map((part) => part.text).join("");
      return reasoningText.length > 0 ? reasoningText : void 0;
    }
    function toResponseMessages({
      text: text2 = "",
      files,
      reasoning,
      tools,
      toolCalls,
      toolResults,
      messageId,
      generateMessageId
    }) {
      const responseMessages = [];
      responseMessages.push({
        role: "assistant",
        content: [
          ...reasoning.map(
            (part) => part.type === "text" ? { ...part, type: "reasoning" } : { ...part, type: "redacted-reasoning" }
          ),
          // TODO language model v2: switch to order response content (instead of type-based ordering)
          ...files.map((file) => ({
            type: "file",
            data: file.base64,
            mimeType: file.mimeType
          })),
          { type: "text", text: text2 },
          ...toolCalls
        ],
        id: messageId
      });
      if (toolResults.length > 0) {
        responseMessages.push({
          role: "tool",
          id: generateMessageId(),
          content: toolResults.map((toolResult) => {
            const tool2 = tools[toolResult.toolName];
            return (tool2 == null ? void 0 : tool2.experimental_toToolResultContent) != null ? {
              type: "tool-result",
              toolCallId: toolResult.toolCallId,
              toolName: toolResult.toolName,
              result: tool2.experimental_toToolResultContent(toolResult.result),
              experimental_content: tool2.experimental_toToolResultContent(
                toolResult.result
              )
            } : {
              type: "tool-result",
              toolCallId: toolResult.toolCallId,
              toolName: toolResult.toolName,
              result: toolResult.result
            };
          })
        });
      }
      return responseMessages;
    }
    var originalGenerateId3 = (0, import_provider_utils9.createIdGenerator)({
      prefix: "aitxt",
      size: 24
    });
    var originalGenerateMessageId = (0, import_provider_utils9.createIdGenerator)({
      prefix: "msg",
      size: 24
    });
    async function generateText({
      model,
      tools,
      toolChoice,
      system,
      prompt,
      messages,
      maxRetries: maxRetriesArg,
      abortSignal,
      headers,
      maxSteps = 1,
      experimental_generateMessageId: generateMessageId = originalGenerateMessageId,
      experimental_output: output,
      experimental_continueSteps: continueSteps = false,
      experimental_telemetry: telemetry,
      experimental_providerMetadata,
      providerOptions = experimental_providerMetadata,
      experimental_activeTools: activeTools,
      experimental_repairToolCall: repairToolCall,
      _internal: {
        generateId: generateId3 = originalGenerateId3,
        currentDate = () => /* @__PURE__ */ new Date()
      } = {},
      onStepFinish,
      ...settings
    }) {
      var _a17;
      if (maxSteps < 1) {
        throw new InvalidArgumentError({
          parameter: "maxSteps",
          value: maxSteps,
          message: "maxSteps must be at least 1"
        });
      }
      const { maxRetries, retry } = prepareRetries({ maxRetries: maxRetriesArg });
      const baseTelemetryAttributes = getBaseTelemetryAttributes({
        model,
        telemetry,
        headers,
        settings: { ...settings, maxRetries }
      });
      const initialPrompt = standardizePrompt({
        prompt: {
          system: (_a17 = output == null ? void 0 : output.injectIntoSystemPrompt({ system, model })) != null ? _a17 : system,
          prompt,
          messages
        },
        tools
      });
      const tracer = getTracer(telemetry);
      return recordSpan({
        name: "ai.generateText",
        attributes: selectTelemetryAttributes({
          telemetry,
          attributes: {
            ...assembleOperationName({
              operationId: "ai.generateText",
              telemetry
            }),
            ...baseTelemetryAttributes,
            // specific settings that only make sense on the outer level:
            "ai.prompt": {
              input: () => JSON.stringify({ system, prompt, messages })
            },
            "ai.settings.maxSteps": maxSteps
          }
        }),
        tracer,
        fn: async (span) => {
          var _a18, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k;
          const mode = {
            type: "regular",
            ...prepareToolsAndToolChoice({ tools, toolChoice, activeTools })
          };
          const callSettings = prepareCallSettings(settings);
          let currentModelResponse;
          let currentToolCalls = [];
          let currentToolResults = [];
          let currentReasoningDetails = [];
          let stepCount = 0;
          const responseMessages = [];
          let text2 = "";
          const sources = [];
          const steps = [];
          let usage = {
            completionTokens: 0,
            promptTokens: 0,
            totalTokens: 0
          };
          let stepType = "initial";
          do {
            const promptFormat = stepCount === 0 ? initialPrompt.type : "messages";
            const stepInputMessages = [
              ...initialPrompt.messages,
              ...responseMessages
            ];
            const promptMessages = await convertToLanguageModelPrompt({
              prompt: {
                type: promptFormat,
                system: initialPrompt.system,
                messages: stepInputMessages
              },
              modelSupportsImageUrls: model.supportsImageUrls,
              modelSupportsUrl: (_a18 = model.supportsUrl) == null ? void 0 : _a18.bind(model)
              // support 'this' context
            });
            currentModelResponse = await retry(
              () => recordSpan({
                name: "ai.generateText.doGenerate",
                attributes: selectTelemetryAttributes({
                  telemetry,
                  attributes: {
                    ...assembleOperationName({
                      operationId: "ai.generateText.doGenerate",
                      telemetry
                    }),
                    ...baseTelemetryAttributes,
                    "ai.prompt.format": { input: () => promptFormat },
                    "ai.prompt.messages": {
                      input: () => JSON.stringify(promptMessages)
                    },
                    "ai.prompt.tools": {
                      // convert the language model level tools:
                      input: () => {
                        var _a19;
                        return (_a19 = mode.tools) == null ? void 0 : _a19.map((tool2) => JSON.stringify(tool2));
                      }
                    },
                    "ai.prompt.toolChoice": {
                      input: () => mode.toolChoice != null ? JSON.stringify(mode.toolChoice) : void 0
                    },
                    // standardized gen-ai llm span attributes:
                    "gen_ai.system": model.provider,
                    "gen_ai.request.model": model.modelId,
                    "gen_ai.request.frequency_penalty": settings.frequencyPenalty,
                    "gen_ai.request.max_tokens": settings.maxTokens,
                    "gen_ai.request.presence_penalty": settings.presencePenalty,
                    "gen_ai.request.stop_sequences": settings.stopSequences,
                    "gen_ai.request.temperature": settings.temperature,
                    "gen_ai.request.top_k": settings.topK,
                    "gen_ai.request.top_p": settings.topP
                  }
                }),
                tracer,
                fn: async (span2) => {
                  var _a19, _b2, _c2, _d2, _e2, _f2;
                  const result = await model.doGenerate({
                    mode,
                    ...callSettings,
                    inputFormat: promptFormat,
                    responseFormat: output == null ? void 0 : output.responseFormat({ model }),
                    prompt: promptMessages,
                    providerMetadata: providerOptions,
                    abortSignal,
                    headers
                  });
                  const responseData = {
                    id: (_b2 = (_a19 = result.response) == null ? void 0 : _a19.id) != null ? _b2 : generateId3(),
                    timestamp: (_d2 = (_c2 = result.response) == null ? void 0 : _c2.timestamp) != null ? _d2 : currentDate(),
                    modelId: (_f2 = (_e2 = result.response) == null ? void 0 : _e2.modelId) != null ? _f2 : model.modelId
                  };
                  span2.setAttributes(
                    selectTelemetryAttributes({
                      telemetry,
                      attributes: {
                        "ai.response.finishReason": result.finishReason,
                        "ai.response.text": {
                          output: () => result.text
                        },
                        "ai.response.toolCalls": {
                          output: () => JSON.stringify(result.toolCalls)
                        },
                        "ai.response.id": responseData.id,
                        "ai.response.model": responseData.modelId,
                        "ai.response.timestamp": responseData.timestamp.toISOString(),
                        "ai.usage.promptTokens": result.usage.promptTokens,
                        "ai.usage.completionTokens": result.usage.completionTokens,
                        // standardized gen-ai llm span attributes:
                        "gen_ai.response.finish_reasons": [result.finishReason],
                        "gen_ai.response.id": responseData.id,
                        "gen_ai.response.model": responseData.modelId,
                        "gen_ai.usage.input_tokens": result.usage.promptTokens,
                        "gen_ai.usage.output_tokens": result.usage.completionTokens
                      }
                    })
                  );
                  return { ...result, response: responseData };
                }
              })
            );
            currentToolCalls = await Promise.all(
              ((_b = currentModelResponse.toolCalls) != null ? _b : []).map(
                (toolCall) => parseToolCall({
                  toolCall,
                  tools,
                  repairToolCall,
                  system,
                  messages: stepInputMessages
                })
              )
            );
            currentToolResults = tools == null ? [] : await executeTools({
              toolCalls: currentToolCalls,
              tools,
              tracer,
              telemetry,
              messages: stepInputMessages,
              abortSignal
            });
            const currentUsage = calculateLanguageModelUsage(
              currentModelResponse.usage
            );
            usage = addLanguageModelUsage(usage, currentUsage);
            let nextStepType = "done";
            if (++stepCount < maxSteps) {
              if (continueSteps && currentModelResponse.finishReason === "length" && // only use continue when there are no tool calls:
              currentToolCalls.length === 0) {
                nextStepType = "continue";
              } else if (
                // there are tool calls:
                currentToolCalls.length > 0 && // all current tool calls have results:
                currentToolResults.length === currentToolCalls.length
              ) {
                nextStepType = "tool-result";
              }
            }
            const originalText = (_c = currentModelResponse.text) != null ? _c : "";
            const stepTextLeadingWhitespaceTrimmed = stepType === "continue" && // only for continue steps
            text2.trimEnd() !== text2 ? originalText.trimStart() : originalText;
            const stepText = nextStepType === "continue" ? removeTextAfterLastWhitespace(stepTextLeadingWhitespaceTrimmed) : stepTextLeadingWhitespaceTrimmed;
            text2 = nextStepType === "continue" || stepType === "continue" ? text2 + stepText : stepText;
            currentReasoningDetails = asReasoningDetails(
              currentModelResponse.reasoning
            );
            sources.push(...(_d = currentModelResponse.sources) != null ? _d : []);
            if (stepType === "continue") {
              const lastMessage = responseMessages[responseMessages.length - 1];
              if (typeof lastMessage.content === "string") {
                lastMessage.content += stepText;
              } else {
                lastMessage.content.push({
                  text: stepText,
                  type: "text"
                });
              }
            } else {
              responseMessages.push(
                ...toResponseMessages({
                  text: text2,
                  files: asFiles(currentModelResponse.files),
                  reasoning: asReasoningDetails(currentModelResponse.reasoning),
                  tools: tools != null ? tools : {},
                  toolCalls: currentToolCalls,
                  toolResults: currentToolResults,
                  messageId: generateMessageId(),
                  generateMessageId
                })
              );
            }
            const currentStepResult = {
              stepType,
              text: stepText,
              // TODO v5: rename reasoning to reasoningText (and use reasoning for composite array)
              reasoning: asReasoningText(currentReasoningDetails),
              reasoningDetails: currentReasoningDetails,
              files: asFiles(currentModelResponse.files),
              sources: (_e = currentModelResponse.sources) != null ? _e : [],
              toolCalls: currentToolCalls,
              toolResults: currentToolResults,
              finishReason: currentModelResponse.finishReason,
              usage: currentUsage,
              warnings: currentModelResponse.warnings,
              logprobs: currentModelResponse.logprobs,
              request: (_f = currentModelResponse.request) != null ? _f : {},
              response: {
                ...currentModelResponse.response,
                headers: (_g = currentModelResponse.rawResponse) == null ? void 0 : _g.headers,
                body: (_h = currentModelResponse.rawResponse) == null ? void 0 : _h.body,
                // deep clone msgs to avoid mutating past messages in multi-step:
                messages: structuredClone(responseMessages)
              },
              providerMetadata: currentModelResponse.providerMetadata,
              experimental_providerMetadata: currentModelResponse.providerMetadata,
              isContinued: nextStepType === "continue"
            };
            steps.push(currentStepResult);
            await (onStepFinish == null ? void 0 : onStepFinish(currentStepResult));
            stepType = nextStepType;
          } while (stepType !== "done");
          span.setAttributes(
            selectTelemetryAttributes({
              telemetry,
              attributes: {
                "ai.response.finishReason": currentModelResponse.finishReason,
                "ai.response.text": {
                  output: () => currentModelResponse.text
                },
                "ai.response.toolCalls": {
                  output: () => JSON.stringify(currentModelResponse.toolCalls)
                },
                "ai.usage.promptTokens": currentModelResponse.usage.promptTokens,
                "ai.usage.completionTokens": currentModelResponse.usage.completionTokens
              }
            })
          );
          return new DefaultGenerateTextResult({
            text: text2,
            files: asFiles(currentModelResponse.files),
            reasoning: asReasoningText(currentReasoningDetails),
            reasoningDetails: currentReasoningDetails,
            sources,
            outputResolver: () => {
              if (output == null) {
                throw new NoOutputSpecifiedError();
              }
              return output.parseOutput(
                { text: text2 },
                { response: currentModelResponse.response, usage }
              );
            },
            toolCalls: currentToolCalls,
            toolResults: currentToolResults,
            finishReason: currentModelResponse.finishReason,
            usage,
            warnings: currentModelResponse.warnings,
            request: (_i = currentModelResponse.request) != null ? _i : {},
            response: {
              ...currentModelResponse.response,
              headers: (_j = currentModelResponse.rawResponse) == null ? void 0 : _j.headers,
              body: (_k = currentModelResponse.rawResponse) == null ? void 0 : _k.body,
              messages: responseMessages
            },
            logprobs: currentModelResponse.logprobs,
            steps,
            providerMetadata: currentModelResponse.providerMetadata
          });
        }
      });
    }
    async function executeTools({
      toolCalls,
      tools,
      tracer,
      telemetry,
      messages,
      abortSignal
    }) {
      const toolResults = await Promise.all(
        toolCalls.map(async ({ toolCallId, toolName, args }) => {
          const tool2 = tools[toolName];
          if ((tool2 == null ? void 0 : tool2.execute) == null) {
            return void 0;
          }
          const result = await recordSpan({
            name: "ai.toolCall",
            attributes: selectTelemetryAttributes({
              telemetry,
              attributes: {
                ...assembleOperationName({
                  operationId: "ai.toolCall",
                  telemetry
                }),
                "ai.toolCall.name": toolName,
                "ai.toolCall.id": toolCallId,
                "ai.toolCall.args": {
                  output: () => JSON.stringify(args)
                }
              }
            }),
            tracer,
            fn: async (span) => {
              try {
                const result2 = await tool2.execute(args, {
                  toolCallId,
                  messages,
                  abortSignal
                });
                try {
                  span.setAttributes(
                    selectTelemetryAttributes({
                      telemetry,
                      attributes: {
                        "ai.toolCall.result": {
                          output: () => JSON.stringify(result2)
                        }
                      }
                    })
                  );
                } catch (ignored) {
                }
                return result2;
              } catch (error) {
                throw new ToolExecutionError({
                  toolCallId,
                  toolName,
                  toolArgs: args,
                  cause: error
                });
              }
            }
          });
          return {
            type: "tool-result",
            toolCallId,
            toolName,
            args,
            result
          };
        })
      );
      return toolResults.filter(
        (result) => result != null
      );
    }
    var DefaultGenerateTextResult = class {
      constructor(options) {
        this.text = options.text;
        this.files = options.files;
        this.reasoning = options.reasoning;
        this.reasoningDetails = options.reasoningDetails;
        this.toolCalls = options.toolCalls;
        this.toolResults = options.toolResults;
        this.finishReason = options.finishReason;
        this.usage = options.usage;
        this.warnings = options.warnings;
        this.request = options.request;
        this.response = options.response;
        this.steps = options.steps;
        this.experimental_providerMetadata = options.providerMetadata;
        this.providerMetadata = options.providerMetadata;
        this.logprobs = options.logprobs;
        this.outputResolver = options.outputResolver;
        this.sources = options.sources;
      }
      get experimental_output() {
        return this.outputResolver();
      }
    };
    function asReasoningDetails(reasoning) {
      if (reasoning == null) {
        return [];
      }
      if (typeof reasoning === "string") {
        return [{ type: "text", text: reasoning }];
      }
      return reasoning;
    }
    function asFiles(files) {
      var _a17;
      return (_a17 = files == null ? void 0 : files.map((file) => new DefaultGeneratedFile(file))) != null ? _a17 : [];
    }
    var output_exports = {};
    __export2(output_exports, {
      object: () => object,
      text: () => text
    });
    var import_provider_utils10 = require_dist3();
    var import_ui_utils6 = require_dist7();
    var import_provider20 = require_dist();
    var import_provider18 = require_dist();
    var name14 = "AI_InvalidStreamPartError";
    var marker14 = `vercel.ai.error.${name14}`;
    var symbol14 = Symbol.for(marker14);
    var _a14;
    var InvalidStreamPartError = class extends import_provider18.AISDKError {
      constructor({
        chunk,
        message
      }) {
        super({ name: name14, message });
        this[_a14] = true;
        this.chunk = chunk;
      }
      static isInstance(error) {
        return import_provider18.AISDKError.hasMarker(error, marker14);
      }
    };
    _a14 = symbol14;
    var import_provider19 = require_dist();
    var name15 = "AI_MCPClientError";
    var marker15 = `vercel.ai.error.${name15}`;
    var symbol15 = Symbol.for(marker15);
    var _a15;
    var MCPClientError = class extends import_provider19.AISDKError {
      constructor({
        name: name17 = "MCPClientError",
        message,
        cause
      }) {
        super({ name: name17, message, cause });
        this[_a15] = true;
      }
      static isInstance(error) {
        return import_provider19.AISDKError.hasMarker(error, marker15);
      }
    };
    _a15 = symbol15;
    var text = () => ({
      type: "text",
      responseFormat: () => ({ type: "text" }),
      injectIntoSystemPrompt({ system }) {
        return system;
      },
      parsePartial({ text: text2 }) {
        return { partial: text2 };
      },
      parseOutput({ text: text2 }) {
        return text2;
      }
    });
    var object = ({
      schema: inputSchema
    }) => {
      const schema = (0, import_ui_utils6.asSchema)(inputSchema);
      return {
        type: "object",
        responseFormat: ({ model }) => ({
          type: "json",
          schema: model.supportsStructuredOutputs ? schema.jsonSchema : void 0
        }),
        injectIntoSystemPrompt({ system, model }) {
          return model.supportsStructuredOutputs ? system : injectJsonInstruction({
            prompt: system,
            schema: schema.jsonSchema
          });
        },
        parsePartial({ text: text2 }) {
          const result = (0, import_ui_utils6.parsePartialJson)(text2);
          switch (result.state) {
            case "failed-parse":
            case "undefined-input":
              return void 0;
            case "repaired-parse":
            case "successful-parse":
              return {
                // Note: currently no validation of partial results:
                partial: result.value
              };
            default: {
              const _exhaustiveCheck = result.state;
              throw new Error(`Unsupported parse state: ${_exhaustiveCheck}`);
            }
          }
        },
        parseOutput({ text: text2 }, context2) {
          const parseResult = (0, import_provider_utils10.safeParseJSON)({ text: text2 });
          if (!parseResult.success) {
            throw new NoObjectGeneratedError({
              message: "No object generated: could not parse the response.",
              cause: parseResult.error,
              text: text2,
              response: context2.response,
              usage: context2.usage
            });
          }
          const validationResult = (0, import_provider_utils10.safeValidateTypes)({
            value: parseResult.value,
            schema
          });
          if (!validationResult.success) {
            throw new NoObjectGeneratedError({
              message: "No object generated: response did not match schema.",
              cause: validationResult.error,
              text: text2,
              response: context2.response,
              usage: context2.usage
            });
          }
          return validationResult.value;
        }
      };
    };
    var import_provider21 = require_dist();
    var import_provider_utils11 = require_dist3();
    var CHUNKING_REGEXPS = {
      word: /\s*\S+\s+/m,
      line: /[^\n]*\n/m
    };
    function smoothStream({
      delayInMs = 10,
      chunking = "word",
      _internal: { delay: delay2 = import_provider_utils11.delay } = {}
    } = {}) {
      const chunkingRegexp = typeof chunking === "string" ? CHUNKING_REGEXPS[chunking] : chunking;
      if (chunkingRegexp == null) {
        throw new import_provider21.InvalidArgumentError({
          argument: "chunking",
          message: `Chunking must be "word" or "line" or a RegExp. Received: ${chunking}`
        });
      }
      return () => {
        let buffer = "";
        return new TransformStream({
          async transform(chunk, controller) {
            if (chunk.type === "step-finish") {
              if (buffer.length > 0) {
                controller.enqueue({ type: "text-delta", textDelta: buffer });
                buffer = "";
              }
              controller.enqueue(chunk);
              return;
            }
            if (chunk.type !== "text-delta") {
              controller.enqueue(chunk);
              return;
            }
            buffer += chunk.textDelta;
            let match;
            while ((match = chunkingRegexp.exec(buffer)) != null) {
              const chunk2 = match[0];
              controller.enqueue({ type: "text-delta", textDelta: chunk2 });
              buffer = buffer.slice(chunk2.length);
              await delay2(delayInMs);
            }
          }
        });
      };
    }
    var import_provider22 = require_dist();
    var import_provider_utils12 = require_dist3();
    var import_ui_utils8 = require_dist7();
    function asArray(value) {
      return value === void 0 ? [] : Array.isArray(value) ? value : [value];
    }
    function mergeStreams(stream1, stream2) {
      const reader1 = stream1.getReader();
      const reader2 = stream2.getReader();
      let lastRead1 = void 0;
      let lastRead2 = void 0;
      let stream1Done = false;
      let stream2Done = false;
      async function readStream1(controller) {
        try {
          if (lastRead1 == null) {
            lastRead1 = reader1.read();
          }
          const result = await lastRead1;
          lastRead1 = void 0;
          if (!result.done) {
            controller.enqueue(result.value);
          } else {
            controller.close();
          }
        } catch (error) {
          controller.error(error);
        }
      }
      async function readStream2(controller) {
        try {
          if (lastRead2 == null) {
            lastRead2 = reader2.read();
          }
          const result = await lastRead2;
          lastRead2 = void 0;
          if (!result.done) {
            controller.enqueue(result.value);
          } else {
            controller.close();
          }
        } catch (error) {
          controller.error(error);
        }
      }
      return new ReadableStream({
        async pull(controller) {
          try {
            if (stream1Done) {
              await readStream2(controller);
              return;
            }
            if (stream2Done) {
              await readStream1(controller);
              return;
            }
            if (lastRead1 == null) {
              lastRead1 = reader1.read();
            }
            if (lastRead2 == null) {
              lastRead2 = reader2.read();
            }
            const { result, reader } = await Promise.race([
              lastRead1.then((result2) => ({ result: result2, reader: reader1 })),
              lastRead2.then((result2) => ({ result: result2, reader: reader2 }))
            ]);
            if (!result.done) {
              controller.enqueue(result.value);
            }
            if (reader === reader1) {
              lastRead1 = void 0;
              if (result.done) {
                await readStream2(controller);
                stream1Done = true;
              }
            } else {
              lastRead2 = void 0;
              if (result.done) {
                stream2Done = true;
                await readStream1(controller);
              }
            }
          } catch (error) {
            controller.error(error);
          }
        },
        cancel() {
          reader1.cancel();
          reader2.cancel();
        }
      });
    }
    var import_ui_utils7 = require_dist7();
    function runToolsTransformation({
      tools,
      generatorStream,
      toolCallStreaming,
      tracer,
      telemetry,
      system,
      messages,
      abortSignal,
      repairToolCall
    }) {
      let toolResultsStreamController = null;
      const toolResultsStream = new ReadableStream({
        start(controller) {
          toolResultsStreamController = controller;
        }
      });
      const activeToolCalls = {};
      const outstandingToolResults = /* @__PURE__ */ new Set();
      let canClose = false;
      let finishChunk = void 0;
      function attemptClose() {
        if (canClose && outstandingToolResults.size === 0) {
          if (finishChunk != null) {
            toolResultsStreamController.enqueue(finishChunk);
          }
          toolResultsStreamController.close();
        }
      }
      const forwardStream = new TransformStream({
        async transform(chunk, controller) {
          const chunkType = chunk.type;
          switch (chunkType) {
            case "text-delta":
            case "reasoning":
            case "reasoning-signature":
            case "redacted-reasoning":
            case "source":
            case "response-metadata":
            case "error": {
              controller.enqueue(chunk);
              break;
            }
            case "file": {
              controller.enqueue(
                new DefaultGeneratedFileWithType({
                  data: chunk.data,
                  mimeType: chunk.mimeType
                })
              );
              break;
            }
            case "tool-call-delta": {
              if (toolCallStreaming) {
                if (!activeToolCalls[chunk.toolCallId]) {
                  controller.enqueue({
                    type: "tool-call-streaming-start",
                    toolCallId: chunk.toolCallId,
                    toolName: chunk.toolName
                  });
                  activeToolCalls[chunk.toolCallId] = true;
                }
                controller.enqueue({
                  type: "tool-call-delta",
                  toolCallId: chunk.toolCallId,
                  toolName: chunk.toolName,
                  argsTextDelta: chunk.argsTextDelta
                });
              }
              break;
            }
            case "tool-call": {
              try {
                const toolCall = await parseToolCall({
                  toolCall: chunk,
                  tools,
                  repairToolCall,
                  system,
                  messages
                });
                controller.enqueue(toolCall);
                const tool2 = tools[toolCall.toolName];
                if (tool2.execute != null) {
                  const toolExecutionId = (0, import_ui_utils7.generateId)();
                  outstandingToolResults.add(toolExecutionId);
                  recordSpan({
                    name: "ai.toolCall",
                    attributes: selectTelemetryAttributes({
                      telemetry,
                      attributes: {
                        ...assembleOperationName({
                          operationId: "ai.toolCall",
                          telemetry
                        }),
                        "ai.toolCall.name": toolCall.toolName,
                        "ai.toolCall.id": toolCall.toolCallId,
                        "ai.toolCall.args": {
                          output: () => JSON.stringify(toolCall.args)
                        }
                      }
                    }),
                    tracer,
                    fn: async (span) => tool2.execute(toolCall.args, {
                      toolCallId: toolCall.toolCallId,
                      messages,
                      abortSignal
                    }).then(
                      (result) => {
                        toolResultsStreamController.enqueue({
                          ...toolCall,
                          type: "tool-result",
                          result
                        });
                        outstandingToolResults.delete(toolExecutionId);
                        attemptClose();
                        try {
                          span.setAttributes(
                            selectTelemetryAttributes({
                              telemetry,
                              attributes: {
                                "ai.toolCall.result": {
                                  output: () => JSON.stringify(result)
                                }
                              }
                            })
                          );
                        } catch (ignored) {
                        }
                      },
                      (error) => {
                        toolResultsStreamController.enqueue({
                          type: "error",
                          error: new ToolExecutionError({
                            toolCallId: toolCall.toolCallId,
                            toolName: toolCall.toolName,
                            toolArgs: toolCall.args,
                            cause: error
                          })
                        });
                        outstandingToolResults.delete(toolExecutionId);
                        attemptClose();
                      }
                    )
                  });
                }
              } catch (error) {
                toolResultsStreamController.enqueue({
                  type: "error",
                  error
                });
              }
              break;
            }
            case "finish": {
              finishChunk = {
                type: "finish",
                finishReason: chunk.finishReason,
                logprobs: chunk.logprobs,
                usage: calculateLanguageModelUsage(chunk.usage),
                experimental_providerMetadata: chunk.providerMetadata
              };
              break;
            }
            default: {
              const _exhaustiveCheck = chunkType;
              throw new Error(`Unhandled chunk type: ${_exhaustiveCheck}`);
            }
          }
        },
        flush() {
          canClose = true;
          attemptClose();
        }
      });
      return new ReadableStream({
        async start(controller) {
          return Promise.all([
            generatorStream.pipeThrough(forwardStream).pipeTo(
              new WritableStream({
                write(chunk) {
                  controller.enqueue(chunk);
                },
                close() {
                }
              })
            ),
            toolResultsStream.pipeTo(
              new WritableStream({
                write(chunk) {
                  controller.enqueue(chunk);
                },
                close() {
                  controller.close();
                }
              })
            )
          ]);
        }
      });
    }
    var originalGenerateId4 = (0, import_provider_utils12.createIdGenerator)({
      prefix: "aitxt",
      size: 24
    });
    var originalGenerateMessageId2 = (0, import_provider_utils12.createIdGenerator)({
      prefix: "msg",
      size: 24
    });
    function streamText({
      model,
      tools,
      toolChoice,
      system,
      prompt,
      messages,
      maxRetries,
      abortSignal,
      headers,
      maxSteps = 1,
      experimental_generateMessageId: generateMessageId = originalGenerateMessageId2,
      experimental_output: output,
      experimental_continueSteps: continueSteps = false,
      experimental_telemetry: telemetry,
      experimental_providerMetadata,
      providerOptions = experimental_providerMetadata,
      experimental_toolCallStreaming = false,
      toolCallStreaming = experimental_toolCallStreaming,
      experimental_activeTools: activeTools,
      experimental_repairToolCall: repairToolCall,
      experimental_transform: transform,
      onChunk,
      onError,
      onFinish,
      onStepFinish,
      _internal: {
        now: now2 = now,
        generateId: generateId3 = originalGenerateId4,
        currentDate = () => /* @__PURE__ */ new Date()
      } = {},
      ...settings
    }) {
      return new DefaultStreamTextResult({
        model,
        telemetry,
        headers,
        settings,
        maxRetries,
        abortSignal,
        system,
        prompt,
        messages,
        tools,
        toolChoice,
        toolCallStreaming,
        transforms: asArray(transform),
        activeTools,
        repairToolCall,
        maxSteps,
        output,
        continueSteps,
        providerOptions,
        onChunk,
        onError,
        onFinish,
        onStepFinish,
        now: now2,
        currentDate,
        generateId: generateId3,
        generateMessageId
      });
    }
    function createOutputTransformStream(output) {
      if (!output) {
        return new TransformStream({
          transform(chunk, controller) {
            controller.enqueue({ part: chunk, partialOutput: void 0 });
          }
        });
      }
      let text2 = "";
      let textChunk = "";
      let lastPublishedJson = "";
      function publishTextChunk({
        controller,
        partialOutput = void 0
      }) {
        controller.enqueue({
          part: { type: "text-delta", textDelta: textChunk },
          partialOutput
        });
        textChunk = "";
      }
      return new TransformStream({
        transform(chunk, controller) {
          if (chunk.type === "step-finish") {
            publishTextChunk({ controller });
          }
          if (chunk.type !== "text-delta") {
            controller.enqueue({ part: chunk, partialOutput: void 0 });
            return;
          }
          text2 += chunk.textDelta;
          textChunk += chunk.textDelta;
          const result = output.parsePartial({ text: text2 });
          if (result != null) {
            const currentJson = JSON.stringify(result.partial);
            if (currentJson !== lastPublishedJson) {
              publishTextChunk({ controller, partialOutput: result.partial });
              lastPublishedJson = currentJson;
            }
          }
        },
        flush(controller) {
          if (textChunk.length > 0) {
            publishTextChunk({ controller });
          }
        }
      });
    }
    var DefaultStreamTextResult = class {
      constructor({
        model,
        telemetry,
        headers,
        settings,
        maxRetries: maxRetriesArg,
        abortSignal,
        system,
        prompt,
        messages,
        tools,
        toolChoice,
        toolCallStreaming,
        transforms,
        activeTools,
        repairToolCall,
        maxSteps,
        output,
        continueSteps,
        providerOptions,
        now: now2,
        currentDate,
        generateId: generateId3,
        generateMessageId,
        onChunk,
        onError,
        onFinish,
        onStepFinish
      }) {
        this.warningsPromise = new DelayedPromise();
        this.usagePromise = new DelayedPromise();
        this.finishReasonPromise = new DelayedPromise();
        this.providerMetadataPromise = new DelayedPromise();
        this.textPromise = new DelayedPromise();
        this.reasoningPromise = new DelayedPromise();
        this.reasoningDetailsPromise = new DelayedPromise();
        this.sourcesPromise = new DelayedPromise();
        this.filesPromise = new DelayedPromise();
        this.toolCallsPromise = new DelayedPromise();
        this.toolResultsPromise = new DelayedPromise();
        this.requestPromise = new DelayedPromise();
        this.responsePromise = new DelayedPromise();
        this.stepsPromise = new DelayedPromise();
        var _a17;
        if (maxSteps < 1) {
          throw new InvalidArgumentError({
            parameter: "maxSteps",
            value: maxSteps,
            message: "maxSteps must be at least 1"
          });
        }
        this.output = output;
        let recordedStepText = "";
        let recordedContinuationText = "";
        let recordedFullText = "";
        let stepReasoning = [];
        let stepFiles = [];
        let activeReasoningText = void 0;
        let recordedStepSources = [];
        const recordedSources = [];
        const recordedResponse = {
          id: generateId3(),
          timestamp: currentDate(),
          modelId: model.modelId,
          messages: []
        };
        let recordedToolCalls = [];
        let recordedToolResults = [];
        let recordedFinishReason = void 0;
        let recordedUsage = void 0;
        let stepType = "initial";
        const recordedSteps = [];
        let rootSpan;
        const eventProcessor = new TransformStream({
          async transform(chunk, controller) {
            controller.enqueue(chunk);
            const { part } = chunk;
            if (part.type === "text-delta" || part.type === "reasoning" || part.type === "source" || part.type === "tool-call" || part.type === "tool-result" || part.type === "tool-call-streaming-start" || part.type === "tool-call-delta") {
              await (onChunk == null ? void 0 : onChunk({ chunk: part }));
            }
            if (part.type === "error") {
              await (onError == null ? void 0 : onError({ error: part.error }));
            }
            if (part.type === "text-delta") {
              recordedStepText += part.textDelta;
              recordedContinuationText += part.textDelta;
              recordedFullText += part.textDelta;
            }
            if (part.type === "reasoning") {
              if (activeReasoningText == null) {
                activeReasoningText = { type: "text", text: part.textDelta };
                stepReasoning.push(activeReasoningText);
              } else {
                activeReasoningText.text += part.textDelta;
              }
            }
            if (part.type === "reasoning-signature") {
              if (activeReasoningText == null) {
                throw new import_provider22.AISDKError({
                  name: "InvalidStreamPart",
                  message: "reasoning-signature without reasoning"
                });
              }
              activeReasoningText.signature = part.signature;
              activeReasoningText = void 0;
            }
            if (part.type === "redacted-reasoning") {
              stepReasoning.push({ type: "redacted", data: part.data });
            }
            if (part.type === "file") {
              stepFiles.push(part);
            }
            if (part.type === "source") {
              recordedSources.push(part.source);
              recordedStepSources.push(part.source);
            }
            if (part.type === "tool-call") {
              recordedToolCalls.push(part);
            }
            if (part.type === "tool-result") {
              recordedToolResults.push(part);
            }
            if (part.type === "step-finish") {
              const stepMessages = toResponseMessages({
                text: recordedContinuationText,
                files: stepFiles,
                reasoning: stepReasoning,
                tools: tools != null ? tools : {},
                toolCalls: recordedToolCalls,
                toolResults: recordedToolResults,
                messageId: part.messageId,
                generateMessageId
              });
              const currentStep = recordedSteps.length;
              let nextStepType = "done";
              if (currentStep + 1 < maxSteps) {
                if (continueSteps && part.finishReason === "length" && // only use continue when there are no tool calls:
                recordedToolCalls.length === 0) {
                  nextStepType = "continue";
                } else if (
                  // there are tool calls:
                  recordedToolCalls.length > 0 && // all current tool calls have results:
                  recordedToolResults.length === recordedToolCalls.length
                ) {
                  nextStepType = "tool-result";
                }
              }
              const currentStepResult = {
                stepType,
                text: recordedStepText,
                reasoning: asReasoningText(stepReasoning),
                reasoningDetails: stepReasoning,
                files: stepFiles,
                sources: recordedStepSources,
                toolCalls: recordedToolCalls,
                toolResults: recordedToolResults,
                finishReason: part.finishReason,
                usage: part.usage,
                warnings: part.warnings,
                logprobs: part.logprobs,
                request: part.request,
                response: {
                  ...part.response,
                  messages: [...recordedResponse.messages, ...stepMessages]
                },
                providerMetadata: part.experimental_providerMetadata,
                experimental_providerMetadata: part.experimental_providerMetadata,
                isContinued: part.isContinued
              };
              await (onStepFinish == null ? void 0 : onStepFinish(currentStepResult));
              recordedSteps.push(currentStepResult);
              recordedToolCalls = [];
              recordedToolResults = [];
              recordedStepText = "";
              recordedStepSources = [];
              stepReasoning = [];
              stepFiles = [];
              activeReasoningText = void 0;
              if (nextStepType !== "done") {
                stepType = nextStepType;
              }
              if (nextStepType !== "continue") {
                recordedResponse.messages.push(...stepMessages);
                recordedContinuationText = "";
              }
            }
            if (part.type === "finish") {
              recordedResponse.id = part.response.id;
              recordedResponse.timestamp = part.response.timestamp;
              recordedResponse.modelId = part.response.modelId;
              recordedResponse.headers = part.response.headers;
              recordedUsage = part.usage;
              recordedFinishReason = part.finishReason;
            }
          },
          async flush(controller) {
            var _a18;
            try {
              if (recordedSteps.length === 0) {
                return;
              }
              const lastStep = recordedSteps[recordedSteps.length - 1];
              self.warningsPromise.resolve(lastStep.warnings);
              self.requestPromise.resolve(lastStep.request);
              self.responsePromise.resolve(lastStep.response);
              self.toolCallsPromise.resolve(lastStep.toolCalls);
              self.toolResultsPromise.resolve(lastStep.toolResults);
              self.providerMetadataPromise.resolve(
                lastStep.experimental_providerMetadata
              );
              self.reasoningPromise.resolve(lastStep.reasoning);
              self.reasoningDetailsPromise.resolve(lastStep.reasoningDetails);
              const finishReason = recordedFinishReason != null ? recordedFinishReason : "unknown";
              const usage = recordedUsage != null ? recordedUsage : {
                completionTokens: NaN,
                promptTokens: NaN,
                totalTokens: NaN
              };
              self.finishReasonPromise.resolve(finishReason);
              self.usagePromise.resolve(usage);
              self.textPromise.resolve(recordedFullText);
              self.sourcesPromise.resolve(recordedSources);
              self.filesPromise.resolve(lastStep.files);
              self.stepsPromise.resolve(recordedSteps);
              await (onFinish == null ? void 0 : onFinish({
                finishReason,
                logprobs: void 0,
                usage,
                text: recordedFullText,
                reasoning: lastStep.reasoning,
                reasoningDetails: lastStep.reasoningDetails,
                files: lastStep.files,
                sources: lastStep.sources,
                toolCalls: lastStep.toolCalls,
                toolResults: lastStep.toolResults,
                request: (_a18 = lastStep.request) != null ? _a18 : {},
                response: lastStep.response,
                warnings: lastStep.warnings,
                providerMetadata: lastStep.providerMetadata,
                experimental_providerMetadata: lastStep.experimental_providerMetadata,
                steps: recordedSteps
              }));
              rootSpan.setAttributes(
                selectTelemetryAttributes({
                  telemetry,
                  attributes: {
                    "ai.response.finishReason": finishReason,
                    "ai.response.text": { output: () => recordedFullText },
                    "ai.response.toolCalls": {
                      output: () => {
                        var _a19;
                        return ((_a19 = lastStep.toolCalls) == null ? void 0 : _a19.length) ? JSON.stringify(lastStep.toolCalls) : void 0;
                      }
                    },
                    "ai.usage.promptTokens": usage.promptTokens,
                    "ai.usage.completionTokens": usage.completionTokens
                  }
                })
              );
            } catch (error) {
              controller.error(error);
            } finally {
              rootSpan.end();
            }
          }
        });
        const stitchableStream = createStitchableStream();
        this.addStream = stitchableStream.addStream;
        this.closeStream = stitchableStream.close;
        let stream = stitchableStream.stream;
        for (const transform of transforms) {
          stream = stream.pipeThrough(
            transform({
              tools,
              stopStream() {
                stitchableStream.terminate();
              }
            })
          );
        }
        this.baseStream = stream.pipeThrough(createOutputTransformStream(output)).pipeThrough(eventProcessor);
        const { maxRetries, retry } = prepareRetries({
          maxRetries: maxRetriesArg
        });
        const tracer = getTracer(telemetry);
        const baseTelemetryAttributes = getBaseTelemetryAttributes({
          model,
          telemetry,
          headers,
          settings: { ...settings, maxRetries }
        });
        const initialPrompt = standardizePrompt({
          prompt: {
            system: (_a17 = output == null ? void 0 : output.injectIntoSystemPrompt({ system, model })) != null ? _a17 : system,
            prompt,
            messages
          },
          tools
        });
        const self = this;
        recordSpan({
          name: "ai.streamText",
          attributes: selectTelemetryAttributes({
            telemetry,
            attributes: {
              ...assembleOperationName({ operationId: "ai.streamText", telemetry }),
              ...baseTelemetryAttributes,
              // specific settings that only make sense on the outer level:
              "ai.prompt": {
                input: () => JSON.stringify({ system, prompt, messages })
              },
              "ai.settings.maxSteps": maxSteps
            }
          }),
          tracer,
          endWhenDone: false,
          fn: async (rootSpanArg) => {
            rootSpan = rootSpanArg;
            async function streamStep({
              currentStep,
              responseMessages,
              usage,
              stepType: stepType2,
              previousStepText,
              hasLeadingWhitespace,
              messageId
            }) {
              var _a18;
              const promptFormat = responseMessages.length === 0 ? initialPrompt.type : "messages";
              const stepInputMessages = [
                ...initialPrompt.messages,
                ...responseMessages
              ];
              const promptMessages = await convertToLanguageModelPrompt({
                prompt: {
                  type: promptFormat,
                  system: initialPrompt.system,
                  messages: stepInputMessages
                },
                modelSupportsImageUrls: model.supportsImageUrls,
                modelSupportsUrl: (_a18 = model.supportsUrl) == null ? void 0 : _a18.bind(model)
                // support 'this' context
              });
              const mode = {
                type: "regular",
                ...prepareToolsAndToolChoice({ tools, toolChoice, activeTools })
              };
              const {
                result: { stream: stream2, warnings, rawResponse, request },
                doStreamSpan,
                startTimestampMs
              } = await retry(
                () => recordSpan({
                  name: "ai.streamText.doStream",
                  attributes: selectTelemetryAttributes({
                    telemetry,
                    attributes: {
                      ...assembleOperationName({
                        operationId: "ai.streamText.doStream",
                        telemetry
                      }),
                      ...baseTelemetryAttributes,
                      "ai.prompt.format": {
                        input: () => promptFormat
                      },
                      "ai.prompt.messages": {
                        input: () => JSON.stringify(promptMessages)
                      },
                      "ai.prompt.tools": {
                        // convert the language model level tools:
                        input: () => {
                          var _a19;
                          return (_a19 = mode.tools) == null ? void 0 : _a19.map((tool2) => JSON.stringify(tool2));
                        }
                      },
                      "ai.prompt.toolChoice": {
                        input: () => mode.toolChoice != null ? JSON.stringify(mode.toolChoice) : void 0
                      },
                      // standardized gen-ai llm span attributes:
                      "gen_ai.system": model.provider,
                      "gen_ai.request.model": model.modelId,
                      "gen_ai.request.frequency_penalty": settings.frequencyPenalty,
                      "gen_ai.request.max_tokens": settings.maxTokens,
                      "gen_ai.request.presence_penalty": settings.presencePenalty,
                      "gen_ai.request.stop_sequences": settings.stopSequences,
                      "gen_ai.request.temperature": settings.temperature,
                      "gen_ai.request.top_k": settings.topK,
                      "gen_ai.request.top_p": settings.topP
                    }
                  }),
                  tracer,
                  endWhenDone: false,
                  fn: async (doStreamSpan2) => ({
                    startTimestampMs: now2(),
                    // get before the call
                    doStreamSpan: doStreamSpan2,
                    result: await model.doStream({
                      mode,
                      ...prepareCallSettings(settings),
                      inputFormat: promptFormat,
                      responseFormat: output == null ? void 0 : output.responseFormat({ model }),
                      prompt: promptMessages,
                      providerMetadata: providerOptions,
                      abortSignal,
                      headers
                    })
                  })
                })
              );
              const transformedStream = runToolsTransformation({
                tools,
                generatorStream: stream2,
                toolCallStreaming,
                tracer,
                telemetry,
                system,
                messages: stepInputMessages,
                repairToolCall,
                abortSignal
              });
              const stepRequest = request != null ? request : {};
              const stepToolCalls = [];
              const stepToolResults = [];
              const stepReasoning2 = [];
              const stepFiles2 = [];
              let activeReasoningText2 = void 0;
              let stepFinishReason = "unknown";
              let stepUsage = {
                promptTokens: 0,
                completionTokens: 0,
                totalTokens: 0
              };
              let stepProviderMetadata;
              let stepFirstChunk = true;
              let stepText = "";
              let fullStepText = stepType2 === "continue" ? previousStepText : "";
              let stepLogProbs;
              let stepResponse = {
                id: generateId3(),
                timestamp: currentDate(),
                modelId: model.modelId
              };
              let chunkBuffer = "";
              let chunkTextPublished = false;
              let inWhitespacePrefix = true;
              let hasWhitespaceSuffix = false;
              async function publishTextChunk({
                controller,
                chunk
              }) {
                controller.enqueue(chunk);
                stepText += chunk.textDelta;
                fullStepText += chunk.textDelta;
                chunkTextPublished = true;
                hasWhitespaceSuffix = chunk.textDelta.trimEnd() !== chunk.textDelta;
              }
              self.addStream(
                transformedStream.pipeThrough(
                  new TransformStream({
                    async transform(chunk, controller) {
                      var _a19, _b, _c;
                      if (stepFirstChunk) {
                        const msToFirstChunk = now2() - startTimestampMs;
                        stepFirstChunk = false;
                        doStreamSpan.addEvent("ai.stream.firstChunk", {
                          "ai.response.msToFirstChunk": msToFirstChunk
                        });
                        doStreamSpan.setAttributes({
                          "ai.response.msToFirstChunk": msToFirstChunk
                        });
                        controller.enqueue({
                          type: "step-start",
                          messageId,
                          request: stepRequest,
                          warnings: warnings != null ? warnings : []
                        });
                      }
                      if (chunk.type === "text-delta" && chunk.textDelta.length === 0) {
                        return;
                      }
                      const chunkType = chunk.type;
                      switch (chunkType) {
                        case "text-delta": {
                          if (continueSteps) {
                            const trimmedChunkText = inWhitespacePrefix && hasLeadingWhitespace ? chunk.textDelta.trimStart() : chunk.textDelta;
                            if (trimmedChunkText.length === 0) {
                              break;
                            }
                            inWhitespacePrefix = false;
                            chunkBuffer += trimmedChunkText;
                            const split = splitOnLastWhitespace(chunkBuffer);
                            if (split != null) {
                              chunkBuffer = split.suffix;
                              await publishTextChunk({
                                controller,
                                chunk: {
                                  type: "text-delta",
                                  textDelta: split.prefix + split.whitespace
                                }
                              });
                            }
                          } else {
                            await publishTextChunk({ controller, chunk });
                          }
                          break;
                        }
                        case "reasoning": {
                          controller.enqueue(chunk);
                          if (activeReasoningText2 == null) {
                            activeReasoningText2 = {
                              type: "text",
                              text: chunk.textDelta
                            };
                            stepReasoning2.push(activeReasoningText2);
                          } else {
                            activeReasoningText2.text += chunk.textDelta;
                          }
                          break;
                        }
                        case "reasoning-signature": {
                          controller.enqueue(chunk);
                          if (activeReasoningText2 == null) {
                            throw new InvalidStreamPartError({
                              chunk,
                              message: "reasoning-signature without reasoning"
                            });
                          }
                          activeReasoningText2.signature = chunk.signature;
                          activeReasoningText2 = void 0;
                          break;
                        }
                        case "redacted-reasoning": {
                          controller.enqueue(chunk);
                          stepReasoning2.push({
                            type: "redacted",
                            data: chunk.data
                          });
                          break;
                        }
                        case "tool-call": {
                          controller.enqueue(chunk);
                          stepToolCalls.push(chunk);
                          break;
                        }
                        case "tool-result": {
                          controller.enqueue(chunk);
                          stepToolResults.push(chunk);
                          break;
                        }
                        case "response-metadata": {
                          stepResponse = {
                            id: (_a19 = chunk.id) != null ? _a19 : stepResponse.id,
                            timestamp: (_b = chunk.timestamp) != null ? _b : stepResponse.timestamp,
                            modelId: (_c = chunk.modelId) != null ? _c : stepResponse.modelId
                          };
                          break;
                        }
                        case "finish": {
                          stepUsage = chunk.usage;
                          stepFinishReason = chunk.finishReason;
                          stepProviderMetadata = chunk.experimental_providerMetadata;
                          stepLogProbs = chunk.logprobs;
                          const msToFinish = now2() - startTimestampMs;
                          doStreamSpan.addEvent("ai.stream.finish");
                          doStreamSpan.setAttributes({
                            "ai.response.msToFinish": msToFinish,
                            "ai.response.avgCompletionTokensPerSecond": 1e3 * stepUsage.completionTokens / msToFinish
                          });
                          break;
                        }
                        case "file": {
                          stepFiles2.push(chunk);
                          controller.enqueue(chunk);
                          break;
                        }
                        case "source":
                        case "tool-call-streaming-start":
                        case "tool-call-delta": {
                          controller.enqueue(chunk);
                          break;
                        }
                        case "error": {
                          controller.enqueue(chunk);
                          stepFinishReason = "error";
                          break;
                        }
                        default: {
                          const exhaustiveCheck = chunkType;
                          throw new Error(`Unknown chunk type: ${exhaustiveCheck}`);
                        }
                      }
                    },
                    // invoke onFinish callback and resolve toolResults promise when the stream is about to close:
                    async flush(controller) {
                      const stepToolCallsJson = stepToolCalls.length > 0 ? JSON.stringify(stepToolCalls) : void 0;
                      let nextStepType = "done";
                      if (currentStep + 1 < maxSteps) {
                        if (continueSteps && stepFinishReason === "length" && // only use continue when there are no tool calls:
                        stepToolCalls.length === 0) {
                          nextStepType = "continue";
                        } else if (
                          // there are tool calls:
                          stepToolCalls.length > 0 && // all current tool calls have results:
                          stepToolResults.length === stepToolCalls.length
                        ) {
                          nextStepType = "tool-result";
                        }
                      }
                      if (continueSteps && chunkBuffer.length > 0 && (nextStepType !== "continue" || // when the next step is a regular step, publish the buffer
                      stepType2 === "continue" && !chunkTextPublished)) {
                        await publishTextChunk({
                          controller,
                          chunk: {
                            type: "text-delta",
                            textDelta: chunkBuffer
                          }
                        });
                        chunkBuffer = "";
                      }
                      try {
                        doStreamSpan.setAttributes(
                          selectTelemetryAttributes({
                            telemetry,
                            attributes: {
                              "ai.response.finishReason": stepFinishReason,
                              "ai.response.text": { output: () => stepText },
                              "ai.response.toolCalls": {
                                output: () => stepToolCallsJson
                              },
                              "ai.response.id": stepResponse.id,
                              "ai.response.model": stepResponse.modelId,
                              "ai.response.timestamp": stepResponse.timestamp.toISOString(),
                              "ai.usage.promptTokens": stepUsage.promptTokens,
                              "ai.usage.completionTokens": stepUsage.completionTokens,
                              // standardized gen-ai llm span attributes:
                              "gen_ai.response.finish_reasons": [stepFinishReason],
                              "gen_ai.response.id": stepResponse.id,
                              "gen_ai.response.model": stepResponse.modelId,
                              "gen_ai.usage.input_tokens": stepUsage.promptTokens,
                              "gen_ai.usage.output_tokens": stepUsage.completionTokens
                            }
                          })
                        );
                      } catch (error) {
                      } finally {
                        doStreamSpan.end();
                      }
                      controller.enqueue({
                        type: "step-finish",
                        finishReason: stepFinishReason,
                        usage: stepUsage,
                        providerMetadata: stepProviderMetadata,
                        experimental_providerMetadata: stepProviderMetadata,
                        logprobs: stepLogProbs,
                        request: stepRequest,
                        response: {
                          ...stepResponse,
                          headers: rawResponse == null ? void 0 : rawResponse.headers
                        },
                        warnings,
                        isContinued: nextStepType === "continue",
                        messageId
                      });
                      const combinedUsage = addLanguageModelUsage(usage, stepUsage);
                      if (nextStepType === "done") {
                        controller.enqueue({
                          type: "finish",
                          finishReason: stepFinishReason,
                          usage: combinedUsage,
                          providerMetadata: stepProviderMetadata,
                          experimental_providerMetadata: stepProviderMetadata,
                          logprobs: stepLogProbs,
                          response: {
                            ...stepResponse,
                            headers: rawResponse == null ? void 0 : rawResponse.headers
                          }
                        });
                        self.closeStream();
                      } else {
                        if (stepType2 === "continue") {
                          const lastMessage = responseMessages[responseMessages.length - 1];
                          if (typeof lastMessage.content === "string") {
                            lastMessage.content += stepText;
                          } else {
                            lastMessage.content.push({
                              text: stepText,
                              type: "text"
                            });
                          }
                        } else {
                          responseMessages.push(
                            ...toResponseMessages({
                              text: stepText,
                              files: stepFiles2,
                              reasoning: stepReasoning2,
                              tools: tools != null ? tools : {},
                              toolCalls: stepToolCalls,
                              toolResults: stepToolResults,
                              messageId,
                              generateMessageId
                            })
                          );
                        }
                        await streamStep({
                          currentStep: currentStep + 1,
                          responseMessages,
                          usage: combinedUsage,
                          stepType: nextStepType,
                          previousStepText: fullStepText,
                          hasLeadingWhitespace: hasWhitespaceSuffix,
                          messageId: (
                            // keep the same id when continuing a step:
                            nextStepType === "continue" ? messageId : generateMessageId()
                          )
                        });
                      }
                    }
                  })
                )
              );
            }
            await streamStep({
              currentStep: 0,
              responseMessages: [],
              usage: {
                promptTokens: 0,
                completionTokens: 0,
                totalTokens: 0
              },
              previousStepText: "",
              stepType: "initial",
              hasLeadingWhitespace: false,
              messageId: generateMessageId()
            });
          }
        }).catch((error) => {
          self.addStream(
            new ReadableStream({
              start(controller) {
                controller.enqueue({ type: "error", error });
                controller.close();
              }
            })
          );
          self.closeStream();
        });
      }
      get warnings() {
        return this.warningsPromise.value;
      }
      get usage() {
        return this.usagePromise.value;
      }
      get finishReason() {
        return this.finishReasonPromise.value;
      }
      get experimental_providerMetadata() {
        return this.providerMetadataPromise.value;
      }
      get providerMetadata() {
        return this.providerMetadataPromise.value;
      }
      get text() {
        return this.textPromise.value;
      }
      get reasoning() {
        return this.reasoningPromise.value;
      }
      get reasoningDetails() {
        return this.reasoningDetailsPromise.value;
      }
      get sources() {
        return this.sourcesPromise.value;
      }
      get files() {
        return this.filesPromise.value;
      }
      get toolCalls() {
        return this.toolCallsPromise.value;
      }
      get toolResults() {
        return this.toolResultsPromise.value;
      }
      get request() {
        return this.requestPromise.value;
      }
      get response() {
        return this.responsePromise.value;
      }
      get steps() {
        return this.stepsPromise.value;
      }
      /**
      Split out a new stream from the original stream.
      The original stream is replaced to allow for further splitting,
      since we do not know how many times the stream will be split.
      
      Note: this leads to buffering the stream content on the server.
      However, the LLM results are expected to be small enough to not cause issues.
         */
      teeStream() {
        const [stream1, stream2] = this.baseStream.tee();
        this.baseStream = stream2;
        return stream1;
      }
      get textStream() {
        return createAsyncIterableStream(
          this.teeStream().pipeThrough(
            new TransformStream({
              transform({ part }, controller) {
                if (part.type === "text-delta") {
                  controller.enqueue(part.textDelta);
                }
              }
            })
          )
        );
      }
      get fullStream() {
        return createAsyncIterableStream(
          this.teeStream().pipeThrough(
            new TransformStream({
              transform({ part }, controller) {
                controller.enqueue(part);
              }
            })
          )
        );
      }
      async consumeStream() {
        const stream = this.fullStream;
        for await (const part of stream) {
        }
      }
      get experimental_partialOutputStream() {
        if (this.output == null) {
          throw new NoOutputSpecifiedError();
        }
        return createAsyncIterableStream(
          this.teeStream().pipeThrough(
            new TransformStream({
              transform({ partialOutput }, controller) {
                if (partialOutput != null) {
                  controller.enqueue(partialOutput);
                }
              }
            })
          )
        );
      }
      toDataStreamInternal({
        getErrorMessage: getErrorMessage5 = () => "An error occurred.",
        // mask error messages for safety by default
        sendUsage = true,
        sendReasoning = false,
        sendSources = false,
        experimental_sendFinish = true
      }) {
        return this.fullStream.pipeThrough(
          new TransformStream({
            transform: async (chunk, controller) => {
              const chunkType = chunk.type;
              switch (chunkType) {
                case "text-delta": {
                  controller.enqueue((0, import_ui_utils8.formatDataStreamPart)("text", chunk.textDelta));
                  break;
                }
                case "reasoning": {
                  if (sendReasoning) {
                    controller.enqueue(
                      (0, import_ui_utils8.formatDataStreamPart)("reasoning", chunk.textDelta)
                    );
                  }
                  break;
                }
                case "redacted-reasoning": {
                  if (sendReasoning) {
                    controller.enqueue(
                      (0, import_ui_utils8.formatDataStreamPart)("redacted_reasoning", {
                        data: chunk.data
                      })
                    );
                  }
                  break;
                }
                case "reasoning-signature": {
                  if (sendReasoning) {
                    controller.enqueue(
                      (0, import_ui_utils8.formatDataStreamPart)("reasoning_signature", {
                        signature: chunk.signature
                      })
                    );
                  }
                  break;
                }
                case "file": {
                  controller.enqueue(
                    (0, import_ui_utils8.formatDataStreamPart)("file", {
                      mimeType: chunk.mimeType,
                      data: chunk.base64
                    })
                  );
                  break;
                }
                case "source": {
                  if (sendSources) {
                    controller.enqueue(
                      (0, import_ui_utils8.formatDataStreamPart)("source", chunk.source)
                    );
                  }
                  break;
                }
                case "tool-call-streaming-start": {
                  controller.enqueue(
                    (0, import_ui_utils8.formatDataStreamPart)("tool_call_streaming_start", {
                      toolCallId: chunk.toolCallId,
                      toolName: chunk.toolName
                    })
                  );
                  break;
                }
                case "tool-call-delta": {
                  controller.enqueue(
                    (0, import_ui_utils8.formatDataStreamPart)("tool_call_delta", {
                      toolCallId: chunk.toolCallId,
                      argsTextDelta: chunk.argsTextDelta
                    })
                  );
                  break;
                }
                case "tool-call": {
                  controller.enqueue(
                    (0, import_ui_utils8.formatDataStreamPart)("tool_call", {
                      toolCallId: chunk.toolCallId,
                      toolName: chunk.toolName,
                      args: chunk.args
                    })
                  );
                  break;
                }
                case "tool-result": {
                  controller.enqueue(
                    (0, import_ui_utils8.formatDataStreamPart)("tool_result", {
                      toolCallId: chunk.toolCallId,
                      result: chunk.result
                    })
                  );
                  break;
                }
                case "error": {
                  controller.enqueue(
                    (0, import_ui_utils8.formatDataStreamPart)("error", getErrorMessage5(chunk.error))
                  );
                  break;
                }
                case "step-start": {
                  controller.enqueue(
                    (0, import_ui_utils8.formatDataStreamPart)("start_step", {
                      messageId: chunk.messageId
                    })
                  );
                  break;
                }
                case "step-finish": {
                  controller.enqueue(
                    (0, import_ui_utils8.formatDataStreamPart)("finish_step", {
                      finishReason: chunk.finishReason,
                      usage: sendUsage ? {
                        promptTokens: chunk.usage.promptTokens,
                        completionTokens: chunk.usage.completionTokens
                      } : void 0,
                      isContinued: chunk.isContinued
                    })
                  );
                  break;
                }
                case "finish": {
                  if (experimental_sendFinish) {
                    controller.enqueue(
                      (0, import_ui_utils8.formatDataStreamPart)("finish_message", {
                        finishReason: chunk.finishReason,
                        usage: sendUsage ? {
                          promptTokens: chunk.usage.promptTokens,
                          completionTokens: chunk.usage.completionTokens
                        } : void 0
                      })
                    );
                  }
                  break;
                }
                default: {
                  const exhaustiveCheck = chunkType;
                  throw new Error(`Unknown chunk type: ${exhaustiveCheck}`);
                }
              }
            }
          })
        );
      }
      pipeDataStreamToResponse(response, {
        status,
        statusText,
        headers,
        data,
        getErrorMessage: getErrorMessage5,
        sendUsage,
        sendReasoning,
        sendSources,
        experimental_sendFinish
      } = {}) {
        writeToServerResponse({
          response,
          status,
          statusText,
          headers: prepareOutgoingHttpHeaders(headers, {
            contentType: "text/plain; charset=utf-8",
            dataStreamVersion: "v1"
          }),
          stream: this.toDataStream({
            data,
            getErrorMessage: getErrorMessage5,
            sendUsage,
            sendReasoning,
            sendSources,
            experimental_sendFinish
          })
        });
      }
      pipeTextStreamToResponse(response, init) {
        writeToServerResponse({
          response,
          status: init == null ? void 0 : init.status,
          statusText: init == null ? void 0 : init.statusText,
          headers: prepareOutgoingHttpHeaders(init == null ? void 0 : init.headers, {
            contentType: "text/plain; charset=utf-8"
          }),
          stream: this.textStream.pipeThrough(new TextEncoderStream())
        });
      }
      // TODO breaking change 5.0: remove pipeThrough(new TextEncoderStream())
      toDataStream(options) {
        const stream = this.toDataStreamInternal({
          getErrorMessage: options == null ? void 0 : options.getErrorMessage,
          sendUsage: options == null ? void 0 : options.sendUsage,
          sendReasoning: options == null ? void 0 : options.sendReasoning,
          sendSources: options == null ? void 0 : options.sendSources,
          experimental_sendFinish: options == null ? void 0 : options.experimental_sendFinish
        }).pipeThrough(new TextEncoderStream());
        return (options == null ? void 0 : options.data) ? mergeStreams(options == null ? void 0 : options.data.stream, stream) : stream;
      }
      mergeIntoDataStream(writer, options) {
        writer.merge(
          this.toDataStreamInternal({
            getErrorMessage: writer.onError,
            sendUsage: options == null ? void 0 : options.sendUsage,
            sendReasoning: options == null ? void 0 : options.sendReasoning,
            sendSources: options == null ? void 0 : options.sendSources,
            experimental_sendFinish: options == null ? void 0 : options.experimental_sendFinish
          })
        );
      }
      toDataStreamResponse({
        headers,
        status,
        statusText,
        data,
        getErrorMessage: getErrorMessage5,
        sendUsage,
        sendReasoning,
        sendSources,
        experimental_sendFinish
      } = {}) {
        return new Response(
          this.toDataStream({
            data,
            getErrorMessage: getErrorMessage5,
            sendUsage,
            sendReasoning,
            sendSources,
            experimental_sendFinish
          }),
          {
            status,
            statusText,
            headers: prepareResponseHeaders(headers, {
              contentType: "text/plain; charset=utf-8",
              dataStreamVersion: "v1"
            })
          }
        );
      }
      toTextStreamResponse(init) {
        var _a17;
        return new Response(this.textStream.pipeThrough(new TextEncoderStream()), {
          status: (_a17 = init == null ? void 0 : init.status) != null ? _a17 : 200,
          headers: prepareResponseHeaders(init == null ? void 0 : init.headers, {
            contentType: "text/plain; charset=utf-8"
          })
        });
      }
    };
    function mergeObjects(target, source) {
      if (target === void 0 && source === void 0) {
        return void 0;
      }
      if (target === void 0) {
        return source;
      }
      if (source === void 0) {
        return target;
      }
      const result = { ...target };
      for (const key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          const sourceValue = source[key];
          if (sourceValue === void 0)
            continue;
          const targetValue = key in target ? target[key] : void 0;
          const isSourceObject = sourceValue !== null && typeof sourceValue === "object" && !Array.isArray(sourceValue) && !(sourceValue instanceof Date) && !(sourceValue instanceof RegExp);
          const isTargetObject = targetValue !== null && targetValue !== void 0 && typeof targetValue === "object" && !Array.isArray(targetValue) && !(targetValue instanceof Date) && !(targetValue instanceof RegExp);
          if (isSourceObject && isTargetObject) {
            result[key] = mergeObjects(
              targetValue,
              sourceValue
            );
          } else {
            result[key] = sourceValue;
          }
        }
      }
      return result;
    }
    function defaultSettingsMiddleware({
      settings
    }) {
      return {
        middlewareVersion: "v1",
        transformParams: async ({ params }) => {
          var _a17;
          return {
            ...settings,
            ...params,
            providerMetadata: mergeObjects(
              settings.providerMetadata,
              params.providerMetadata
            ),
            // special case for temperature 0
            // TODO remove when temperature defaults to undefined
            temperature: params.temperature === 0 || params.temperature == null ? (_a17 = settings.temperature) != null ? _a17 : 0 : params.temperature
          };
        }
      };
    }
    function getPotentialStartIndex(text2, searchedText) {
      if (searchedText.length === 0) {
        return null;
      }
      const directIndex = text2.indexOf(searchedText);
      if (directIndex !== -1) {
        return directIndex;
      }
      for (let i = text2.length - 1; i >= 0; i--) {
        const suffix = text2.substring(i);
        if (searchedText.startsWith(suffix)) {
          return i;
        }
      }
      return null;
    }
    function extractReasoningMiddleware({
      tagName,
      separator = "\n",
      startWithReasoning = false
    }) {
      const openingTag = `<${tagName}>`;
      const closingTag = `</${tagName}>`;
      return {
        middlewareVersion: "v1",
        wrapGenerate: async ({ doGenerate }) => {
          const { text: rawText, ...rest } = await doGenerate();
          if (rawText == null) {
            return { text: rawText, ...rest };
          }
          const text2 = startWithReasoning ? openingTag + rawText : rawText;
          const regexp = new RegExp(`${openingTag}(.*?)${closingTag}`, "gs");
          const matches = Array.from(text2.matchAll(regexp));
          if (!matches.length) {
            return { text: text2, ...rest };
          }
          const reasoning = matches.map((match) => match[1]).join(separator);
          let textWithoutReasoning = text2;
          for (let i = matches.length - 1; i >= 0; i--) {
            const match = matches[i];
            const beforeMatch = textWithoutReasoning.slice(0, match.index);
            const afterMatch = textWithoutReasoning.slice(
              match.index + match[0].length
            );
            textWithoutReasoning = beforeMatch + (beforeMatch.length > 0 && afterMatch.length > 0 ? separator : "") + afterMatch;
          }
          return { ...rest, text: textWithoutReasoning, reasoning };
        },
        wrapStream: async ({ doStream }) => {
          const { stream, ...rest } = await doStream();
          let isFirstReasoning = true;
          let isFirstText = true;
          let afterSwitch = false;
          let isReasoning = startWithReasoning;
          let buffer = "";
          return {
            stream: stream.pipeThrough(
              new TransformStream({
                transform: (chunk, controller) => {
                  if (chunk.type !== "text-delta") {
                    controller.enqueue(chunk);
                    return;
                  }
                  buffer += chunk.textDelta;
                  function publish(text2) {
                    if (text2.length > 0) {
                      const prefix = afterSwitch && (isReasoning ? !isFirstReasoning : !isFirstText) ? separator : "";
                      controller.enqueue({
                        type: isReasoning ? "reasoning" : "text-delta",
                        textDelta: prefix + text2
                      });
                      afterSwitch = false;
                      if (isReasoning) {
                        isFirstReasoning = false;
                      } else {
                        isFirstText = false;
                      }
                    }
                  }
                  do {
                    const nextTag = isReasoning ? closingTag : openingTag;
                    const startIndex = getPotentialStartIndex(buffer, nextTag);
                    if (startIndex == null) {
                      publish(buffer);
                      buffer = "";
                      break;
                    }
                    publish(buffer.slice(0, startIndex));
                    const foundFullMatch = startIndex + nextTag.length <= buffer.length;
                    if (foundFullMatch) {
                      buffer = buffer.slice(startIndex + nextTag.length);
                      isReasoning = !isReasoning;
                      afterSwitch = true;
                    } else {
                      buffer = buffer.slice(startIndex);
                      break;
                    }
                  } while (true);
                }
              })
            ),
            ...rest
          };
        }
      };
    }
    function simulateStreamingMiddleware() {
      return {
        middlewareVersion: "v1",
        wrapStream: async ({ doGenerate }) => {
          const result = await doGenerate();
          const simulatedStream = new ReadableStream({
            start(controller) {
              controller.enqueue({ type: "response-metadata", ...result.response });
              if (result.reasoning) {
                if (typeof result.reasoning === "string") {
                  controller.enqueue({
                    type: "reasoning",
                    textDelta: result.reasoning
                  });
                } else {
                  for (const reasoning of result.reasoning) {
                    switch (reasoning.type) {
                      case "text": {
                        controller.enqueue({
                          type: "reasoning",
                          textDelta: reasoning.text
                        });
                        if (reasoning.signature != null) {
                          controller.enqueue({
                            type: "reasoning-signature",
                            signature: reasoning.signature
                          });
                        }
                        break;
                      }
                      case "redacted": {
                        controller.enqueue({
                          type: "redacted-reasoning",
                          data: reasoning.data
                        });
                        break;
                      }
                    }
                  }
                }
              }
              if (result.text) {
                controller.enqueue({
                  type: "text-delta",
                  textDelta: result.text
                });
              }
              if (result.toolCalls) {
                for (const toolCall of result.toolCalls) {
                  controller.enqueue({
                    type: "tool-call-delta",
                    toolCallType: "function",
                    toolCallId: toolCall.toolCallId,
                    toolName: toolCall.toolName,
                    argsTextDelta: toolCall.args
                  });
                  controller.enqueue({
                    type: "tool-call",
                    ...toolCall
                  });
                }
              }
              controller.enqueue({
                type: "finish",
                finishReason: result.finishReason,
                usage: result.usage,
                logprobs: result.logprobs,
                providerMetadata: result.providerMetadata
              });
              controller.close();
            }
          });
          return {
            stream: simulatedStream,
            rawCall: result.rawCall,
            rawResponse: result.rawResponse,
            warnings: result.warnings
          };
        }
      };
    }
    var wrapLanguageModel = ({
      model,
      middleware: middlewareArg,
      modelId,
      providerId
    }) => {
      return asArray(middlewareArg).reverse().reduce((wrappedModel, middleware) => {
        return doWrap({ model: wrappedModel, middleware, modelId, providerId });
      }, model);
    };
    var doWrap = ({
      model,
      middleware: { transformParams, wrapGenerate, wrapStream },
      modelId,
      providerId
    }) => {
      var _a17;
      async function doTransform({
        params,
        type
      }) {
        return transformParams ? await transformParams({ params, type }) : params;
      }
      return {
        specificationVersion: "v1",
        provider: providerId != null ? providerId : model.provider,
        modelId: modelId != null ? modelId : model.modelId,
        defaultObjectGenerationMode: model.defaultObjectGenerationMode,
        supportsImageUrls: model.supportsImageUrls,
        supportsUrl: (_a17 = model.supportsUrl) == null ? void 0 : _a17.bind(model),
        supportsStructuredOutputs: model.supportsStructuredOutputs,
        async doGenerate(params) {
          const transformedParams = await doTransform({ params, type: "generate" });
          const doGenerate = async () => model.doGenerate(transformedParams);
          const doStream = async () => model.doStream(transformedParams);
          return wrapGenerate ? wrapGenerate({
            doGenerate,
            doStream,
            params: transformedParams,
            model
          }) : doGenerate();
        },
        async doStream(params) {
          const transformedParams = await doTransform({ params, type: "stream" });
          const doGenerate = async () => model.doGenerate(transformedParams);
          const doStream = async () => model.doStream(transformedParams);
          return wrapStream ? wrapStream({ doGenerate, doStream, params: transformedParams, model }) : doStream();
        }
      };
    };
    var experimental_wrapLanguageModel = wrapLanguageModel;
    function appendClientMessage({
      messages,
      message
    }) {
      return [
        ...messages.length > 0 && messages[messages.length - 1].id === message.id ? messages.slice(0, -1) : messages,
        message
      ];
    }
    var import_ui_utils9 = require_dist7();
    var import_provider23 = require_dist();
    function appendResponseMessages({
      messages,
      responseMessages,
      _internal: { currentDate = () => /* @__PURE__ */ new Date() } = {}
    }) {
      var _a17, _b, _c, _d;
      const clonedMessages = structuredClone(messages);
      for (const message of responseMessages) {
        const role = message.role;
        const lastMessage = clonedMessages[clonedMessages.length - 1];
        const isLastMessageAssistant = lastMessage.role === "assistant";
        switch (role) {
          case "assistant": {
            let getToolInvocations2 = function(step) {
              return (typeof message.content === "string" ? [] : message.content.filter((part) => part.type === "tool-call")).map((call) => ({
                state: "call",
                step,
                args: call.args,
                toolCallId: call.toolCallId,
                toolName: call.toolName
              }));
            };
            var getToolInvocations = getToolInvocations2;
            const parts = [];
            let textContent = "";
            let reasoningTextContent = void 0;
            if (typeof message.content === "string") {
              textContent = message.content;
              parts.push({
                type: "text",
                text: message.content
              });
            } else {
              let reasoningPart = void 0;
              for (const part of message.content) {
                switch (part.type) {
                  case "text": {
                    reasoningPart = void 0;
                    textContent += part.text;
                    parts.push({
                      type: "text",
                      text: part.text
                    });
                    break;
                  }
                  case "reasoning": {
                    if (reasoningPart == null) {
                      reasoningPart = {
                        type: "reasoning",
                        reasoning: "",
                        details: []
                      };
                      parts.push(reasoningPart);
                    }
                    reasoningTextContent = (reasoningTextContent != null ? reasoningTextContent : "") + part.text;
                    reasoningPart.reasoning += part.text;
                    reasoningPart.details.push({
                      type: "text",
                      text: part.text,
                      signature: part.signature
                    });
                    break;
                  }
                  case "redacted-reasoning": {
                    if (reasoningPart == null) {
                      reasoningPart = {
                        type: "reasoning",
                        reasoning: "",
                        details: []
                      };
                      parts.push(reasoningPart);
                    }
                    reasoningPart.details.push({
                      type: "redacted",
                      data: part.data
                    });
                    break;
                  }
                  case "tool-call":
                    break;
                  case "file":
                    if (part.data instanceof URL) {
                      throw new import_provider23.AISDKError({
                        name: "InvalidAssistantFileData",
                        message: "File data cannot be a URL"
                      });
                    }
                    parts.push({
                      type: "file",
                      mimeType: part.mimeType,
                      data: convertDataContentToBase64String(part.data)
                    });
                    break;
                }
              }
            }
            if (isLastMessageAssistant) {
              const maxStep = (0, import_ui_utils9.extractMaxToolInvocationStep)(
                lastMessage.toolInvocations
              );
              (_a17 = lastMessage.parts) != null ? _a17 : lastMessage.parts = [];
              lastMessage.content = textContent;
              lastMessage.reasoning = reasoningTextContent;
              lastMessage.parts.push(...parts);
              lastMessage.toolInvocations = [
                ...(_b = lastMessage.toolInvocations) != null ? _b : [],
                ...getToolInvocations2(maxStep === void 0 ? 0 : maxStep + 1)
              ];
              getToolInvocations2(maxStep === void 0 ? 0 : maxStep + 1).map((call) => ({
                type: "tool-invocation",
                toolInvocation: call
              })).forEach((part) => {
                lastMessage.parts.push(part);
              });
            } else {
              clonedMessages.push({
                role: "assistant",
                id: message.id,
                createdAt: currentDate(),
                // generate a createdAt date for the message, will be overridden by the client
                content: textContent,
                reasoning: reasoningTextContent,
                toolInvocations: getToolInvocations2(0),
                parts: [
                  ...parts,
                  ...getToolInvocations2(0).map((call) => ({
                    type: "tool-invocation",
                    toolInvocation: call
                  }))
                ]
              });
            }
            break;
          }
          case "tool": {
            (_c = lastMessage.toolInvocations) != null ? _c : lastMessage.toolInvocations = [];
            if (lastMessage.role !== "assistant") {
              throw new Error(
                `Tool result must follow an assistant message: ${lastMessage.role}`
              );
            }
            (_d = lastMessage.parts) != null ? _d : lastMessage.parts = [];
            for (const contentPart of message.content) {
              const toolCall = lastMessage.toolInvocations.find(
                (call) => call.toolCallId === contentPart.toolCallId
              );
              const toolCallPart = lastMessage.parts.find(
                (part) => part.type === "tool-invocation" && part.toolInvocation.toolCallId === contentPart.toolCallId
              );
              if (!toolCall) {
                throw new Error("Tool call not found in previous message");
              }
              toolCall.state = "result";
              const toolResult = toolCall;
              toolResult.result = contentPart.result;
              if (toolCallPart) {
                toolCallPart.toolInvocation = toolResult;
              } else {
                lastMessage.parts.push({
                  type: "tool-invocation",
                  toolInvocation: toolResult
                });
              }
            }
            break;
          }
          default: {
            const _exhaustiveCheck = role;
            throw new Error(`Unsupported message role: ${_exhaustiveCheck}`);
          }
        }
      }
      return clonedMessages;
    }
    var import_provider24 = require_dist();
    function customProvider({
      languageModels,
      textEmbeddingModels,
      imageModels,
      fallbackProvider
    }) {
      return {
        languageModel(modelId) {
          if (languageModels != null && modelId in languageModels) {
            return languageModels[modelId];
          }
          if (fallbackProvider) {
            return fallbackProvider.languageModel(modelId);
          }
          throw new import_provider24.NoSuchModelError({ modelId, modelType: "languageModel" });
        },
        textEmbeddingModel(modelId) {
          if (textEmbeddingModels != null && modelId in textEmbeddingModels) {
            return textEmbeddingModels[modelId];
          }
          if (fallbackProvider) {
            return fallbackProvider.textEmbeddingModel(modelId);
          }
          throw new import_provider24.NoSuchModelError({ modelId, modelType: "textEmbeddingModel" });
        },
        imageModel(modelId) {
          if (imageModels != null && modelId in imageModels) {
            return imageModels[modelId];
          }
          if (fallbackProvider == null ? void 0 : fallbackProvider.imageModel) {
            return fallbackProvider.imageModel(modelId);
          }
          throw new import_provider24.NoSuchModelError({ modelId, modelType: "imageModel" });
        }
      };
    }
    var experimental_customProvider = customProvider;
    var import_provider25 = require_dist();
    var name16 = "AI_NoSuchProviderError";
    var marker16 = `vercel.ai.error.${name16}`;
    var symbol16 = Symbol.for(marker16);
    var _a16;
    var NoSuchProviderError = class extends import_provider25.NoSuchModelError {
      constructor({
        modelId,
        modelType,
        providerId,
        availableProviders,
        message = `No such provider: ${providerId} (available providers: ${availableProviders.join()})`
      }) {
        super({ errorName: name16, modelId, modelType, message });
        this[_a16] = true;
        this.providerId = providerId;
        this.availableProviders = availableProviders;
      }
      static isInstance(error) {
        return import_provider25.AISDKError.hasMarker(error, marker16);
      }
    };
    _a16 = symbol16;
    var import_provider26 = require_dist();
    function experimental_createProviderRegistry(providers) {
      const registry = new DefaultProviderRegistry();
      for (const [id, provider] of Object.entries(providers)) {
        registry.registerProvider({ id, provider });
      }
      return registry;
    }
    var DefaultProviderRegistry = class {
      constructor() {
        this.providers = {};
      }
      registerProvider({
        id,
        provider
      }) {
        this.providers[id] = provider;
      }
      getProvider(id) {
        const provider = this.providers[id];
        if (provider == null) {
          throw new NoSuchProviderError({
            modelId: id,
            modelType: "languageModel",
            providerId: id,
            availableProviders: Object.keys(this.providers)
          });
        }
        return provider;
      }
      splitId(id, modelType) {
        const index = id.indexOf(":");
        if (index === -1) {
          throw new import_provider26.NoSuchModelError({
            modelId: id,
            modelType,
            message: `Invalid ${modelType} id for registry: ${id} (must be in the format "providerId:modelId")`
          });
        }
        return [id.slice(0, index), id.slice(index + 1)];
      }
      languageModel(id) {
        var _a17, _b;
        const [providerId, modelId] = this.splitId(id, "languageModel");
        const model = (_b = (_a17 = this.getProvider(providerId)).languageModel) == null ? void 0 : _b.call(_a17, modelId);
        if (model == null) {
          throw new import_provider26.NoSuchModelError({ modelId: id, modelType: "languageModel" });
        }
        return model;
      }
      textEmbeddingModel(id) {
        var _a17;
        const [providerId, modelId] = this.splitId(id, "textEmbeddingModel");
        const provider = this.getProvider(providerId);
        const model = (_a17 = provider.textEmbeddingModel) == null ? void 0 : _a17.call(provider, modelId);
        if (model == null) {
          throw new import_provider26.NoSuchModelError({
            modelId: id,
            modelType: "textEmbeddingModel"
          });
        }
        return model;
      }
      imageModel(id) {
        var _a17;
        const [providerId, modelId] = this.splitId(id, "imageModel");
        const provider = this.getProvider(providerId);
        const model = (_a17 = provider.imageModel) == null ? void 0 : _a17.call(provider, modelId);
        if (model == null) {
          throw new import_provider26.NoSuchModelError({ modelId: id, modelType: "imageModel" });
        }
        return model;
      }
      /**
       * @deprecated Use `textEmbeddingModel` instead.
       */
      textEmbedding(id) {
        return this.textEmbeddingModel(id);
      }
    };
    var import_ui_utils10 = require_dist7();
    function tool(tool2) {
      return tool2;
    }
    var import_stream = require_stream();
    var import_zod9 = require_lib();
    var import_zod8 = require_lib();
    var LATEST_PROTOCOL_VERSION = "2024-11-05";
    var SUPPORTED_PROTOCOL_VERSIONS = [
      LATEST_PROTOCOL_VERSION,
      "2024-10-07"
    ];
    var ClientOrServerImplementationSchema = import_zod8.z.object({
      name: import_zod8.z.string(),
      version: import_zod8.z.string()
    }).passthrough();
    var BaseParamsSchema = import_zod8.z.object({
      _meta: import_zod8.z.optional(import_zod8.z.object({}).passthrough())
    }).passthrough();
    var ResultSchema = BaseParamsSchema;
    var RequestSchema = import_zod8.z.object({
      method: import_zod8.z.string(),
      params: import_zod8.z.optional(BaseParamsSchema)
    });
    var ServerCapabilitiesSchema = import_zod8.z.object({
      experimental: import_zod8.z.optional(import_zod8.z.object({}).passthrough()),
      logging: import_zod8.z.optional(import_zod8.z.object({}).passthrough()),
      prompts: import_zod8.z.optional(
        import_zod8.z.object({
          listChanged: import_zod8.z.optional(import_zod8.z.boolean())
        }).passthrough()
      ),
      resources: import_zod8.z.optional(
        import_zod8.z.object({
          subscribe: import_zod8.z.optional(import_zod8.z.boolean()),
          listChanged: import_zod8.z.optional(import_zod8.z.boolean())
        }).passthrough()
      ),
      tools: import_zod8.z.optional(
        import_zod8.z.object({
          listChanged: import_zod8.z.optional(import_zod8.z.boolean())
        }).passthrough()
      )
    }).passthrough();
    var InitializeResultSchema = ResultSchema.extend({
      protocolVersion: import_zod8.z.string(),
      capabilities: ServerCapabilitiesSchema,
      serverInfo: ClientOrServerImplementationSchema,
      instructions: import_zod8.z.optional(import_zod8.z.string())
    });
    var PaginatedResultSchema = ResultSchema.extend({
      nextCursor: import_zod8.z.optional(import_zod8.z.string())
    });
    var ToolSchema = import_zod8.z.object({
      name: import_zod8.z.string(),
      description: import_zod8.z.optional(import_zod8.z.string()),
      inputSchema: import_zod8.z.object({
        type: import_zod8.z.literal("object"),
        properties: import_zod8.z.optional(import_zod8.z.object({}).passthrough())
      }).passthrough()
    }).passthrough();
    var ListToolsResultSchema = PaginatedResultSchema.extend({
      tools: import_zod8.z.array(ToolSchema)
    });
    var TextContentSchema = import_zod8.z.object({
      type: import_zod8.z.literal("text"),
      text: import_zod8.z.string()
    }).passthrough();
    var ImageContentSchema = import_zod8.z.object({
      type: import_zod8.z.literal("image"),
      data: import_zod8.z.string().base64(),
      mimeType: import_zod8.z.string()
    }).passthrough();
    var ResourceContentsSchema = import_zod8.z.object({
      /**
       * The URI of this resource.
       */
      uri: import_zod8.z.string(),
      /**
       * The MIME type of this resource, if known.
       */
      mimeType: import_zod8.z.optional(import_zod8.z.string())
    }).passthrough();
    var TextResourceContentsSchema = ResourceContentsSchema.extend({
      text: import_zod8.z.string()
    });
    var BlobResourceContentsSchema = ResourceContentsSchema.extend({
      blob: import_zod8.z.string().base64()
    });
    var EmbeddedResourceSchema = import_zod8.z.object({
      type: import_zod8.z.literal("resource"),
      resource: import_zod8.z.union([TextResourceContentsSchema, BlobResourceContentsSchema])
    }).passthrough();
    var CallToolResultSchema = ResultSchema.extend({
      content: import_zod8.z.array(
        import_zod8.z.union([TextContentSchema, ImageContentSchema, EmbeddedResourceSchema])
      ),
      isError: import_zod8.z.boolean().default(false).optional()
    }).or(
      ResultSchema.extend({
        toolResult: import_zod8.z.unknown()
      })
    );
    var JSONRPC_VERSION = "2.0";
    var JSONRPCRequestSchema = import_zod9.z.object({
      jsonrpc: import_zod9.z.literal(JSONRPC_VERSION),
      id: import_zod9.z.union([import_zod9.z.string(), import_zod9.z.number().int()])
    }).merge(RequestSchema).strict();
    var JSONRPCResponseSchema = import_zod9.z.object({
      jsonrpc: import_zod9.z.literal(JSONRPC_VERSION),
      id: import_zod9.z.union([import_zod9.z.string(), import_zod9.z.number().int()]),
      result: ResultSchema
    }).strict();
    var JSONRPCErrorSchema = import_zod9.z.object({
      jsonrpc: import_zod9.z.literal(JSONRPC_VERSION),
      id: import_zod9.z.union([import_zod9.z.string(), import_zod9.z.number().int()]),
      error: import_zod9.z.object({
        code: import_zod9.z.number().int(),
        message: import_zod9.z.string(),
        data: import_zod9.z.optional(import_zod9.z.unknown())
      })
    }).strict();
    var JSONRPCNotificationSchema = import_zod9.z.object({
      jsonrpc: import_zod9.z.literal(JSONRPC_VERSION)
    }).merge(
      import_zod9.z.object({
        method: import_zod9.z.string(),
        params: import_zod9.z.optional(BaseParamsSchema)
      })
    ).strict();
    var JSONRPCMessageSchema = import_zod9.z.union([
      JSONRPCRequestSchema,
      JSONRPCNotificationSchema,
      JSONRPCResponseSchema,
      JSONRPCErrorSchema
    ]);
    var SseMCPTransport = class {
      constructor({ url }) {
        this.connected = false;
        this.url = new URL(url);
      }
      async start() {
        return new Promise((resolve3, reject) => {
          if (this.connected) {
            return resolve3();
          }
          this.abortController = new AbortController();
          const establishConnection = async () => {
            var _a17, _b, _c;
            try {
              const response = await fetch(this.url.href, {
                headers: {
                  Accept: "text/event-stream"
                },
                signal: (_a17 = this.abortController) == null ? void 0 : _a17.signal
              });
              if (!response.ok || !response.body) {
                const error = new MCPClientError({
                  message: `MCP SSE Transport Error: ${response.status} ${response.statusText}`
                });
                (_b = this.onerror) == null ? void 0 : _b.call(this, error);
                return reject(error);
              }
              const stream = response.body.pipeThrough(new TextDecoderStream()).pipeThrough(new import_stream.EventSourceParserStream());
              const reader = stream.getReader();
              const processEvents = async () => {
                var _a18, _b2, _c2;
                try {
                  while (true) {
                    const { done, value } = await reader.read();
                    if (done) {
                      if (this.connected) {
                        this.connected = false;
                        throw new MCPClientError({
                          message: "MCP SSE Transport Error: Connection closed unexpectedly"
                        });
                      }
                      return;
                    }
                    const { event, data } = value;
                    if (event === "endpoint") {
                      this.endpoint = new URL(data, this.url);
                      if (this.endpoint.origin !== this.url.origin) {
                        throw new MCPClientError({
                          message: `MCP SSE Transport Error: Endpoint origin does not match connection origin: ${this.endpoint.origin}`
                        });
                      }
                      this.connected = true;
                      resolve3();
                    } else if (event === "message") {
                      try {
                        const message = JSONRPCMessageSchema.parse(
                          JSON.parse(data)
                        );
                        (_a18 = this.onmessage) == null ? void 0 : _a18.call(this, message);
                      } catch (error) {
                        const e = new MCPClientError({
                          message: "MCP SSE Transport Error: Failed to parse message",
                          cause: error
                        });
                        (_b2 = this.onerror) == null ? void 0 : _b2.call(this, e);
                      }
                    }
                  }
                } catch (error) {
                  if (error instanceof Error && error.name === "AbortError") {
                    return;
                  }
                  (_c2 = this.onerror) == null ? void 0 : _c2.call(this, error);
                  reject(error);
                }
              };
              this.sseConnection = {
                close: () => reader.cancel()
              };
              processEvents();
            } catch (error) {
              if (error instanceof Error && error.name === "AbortError") {
                return;
              }
              (_c = this.onerror) == null ? void 0 : _c.call(this, error);
              reject(error);
            }
          };
          establishConnection();
        });
      }
      async close() {
        var _a17, _b, _c;
        this.connected = false;
        (_a17 = this.sseConnection) == null ? void 0 : _a17.close();
        (_b = this.abortController) == null ? void 0 : _b.abort();
        (_c = this.onclose) == null ? void 0 : _c.call(this);
      }
      async send(message) {
        var _a17, _b, _c;
        if (!this.endpoint || !this.connected) {
          throw new MCPClientError({
            message: "MCP SSE Transport Error: Not connected"
          });
        }
        try {
          const headers = new Headers();
          headers.set("Content-Type", "application/json");
          const init = {
            method: "POST",
            headers,
            body: JSON.stringify(message),
            signal: (_a17 = this.abortController) == null ? void 0 : _a17.signal
          };
          const response = await fetch(this.endpoint, init);
          if (!response.ok) {
            const text2 = await response.text().catch(() => null);
            const error = new MCPClientError({
              message: `MCP SSE Transport Error: POSTing to endpoint (HTTP ${response.status}): ${text2}`
            });
            (_b = this.onerror) == null ? void 0 : _b.call(this, error);
            return;
          }
        } catch (error) {
          (_c = this.onerror) == null ? void 0 : _c.call(this, error);
          return;
        }
      }
    };
    function createMcpTransport(config) {
      if (config.type !== "sse") {
        throw new MCPClientError({
          message: "Unsupported or invalid transport configuration. If you are using a custom transport, make sure it implements the MCPTransport interface."
        });
      }
      return new SseMCPTransport(config);
    }
    function isCustomMcpTransport(transport) {
      return "start" in transport && typeof transport.start === "function" && "send" in transport && typeof transport.send === "function" && "close" in transport && typeof transport.close === "function";
    }
    var CLIENT_VERSION = "1.0.0";
    async function createMCPClient(config) {
      const client = new MCPClient(config);
      await client.init();
      return client;
    }
    var MCPClient = class {
      constructor({
        transport: transportConfig,
        name: name17 = "ai-sdk-mcp-client",
        onUncaughtError
      }) {
        this.requestMessageId = 0;
        this.responseHandlers = /* @__PURE__ */ new Map();
        this.serverCapabilities = {};
        this.isClosed = true;
        this.onUncaughtError = onUncaughtError;
        if (isCustomMcpTransport(transportConfig)) {
          this.transport = transportConfig;
        } else {
          this.transport = createMcpTransport(transportConfig);
        }
        this.transport.onclose = () => this.onClose();
        this.transport.onerror = (error) => this.onError(error);
        this.transport.onmessage = (message) => {
          if ("method" in message) {
            this.onError(
              new MCPClientError({
                message: "Unsupported message type"
              })
            );
            return;
          }
          this.onResponse(message);
        };
        this.clientInfo = {
          name: name17,
          version: CLIENT_VERSION
        };
      }
      async init() {
        try {
          await this.transport.start();
          this.isClosed = false;
          const result = await this.request({
            request: {
              method: "initialize",
              params: {
                protocolVersion: LATEST_PROTOCOL_VERSION,
                capabilities: {},
                clientInfo: this.clientInfo
              }
            },
            resultSchema: InitializeResultSchema
          });
          if (result === void 0) {
            throw new MCPClientError({
              message: "Server sent invalid initialize result"
            });
          }
          if (!SUPPORTED_PROTOCOL_VERSIONS.includes(result.protocolVersion)) {
            throw new MCPClientError({
              message: `Server's protocol version is not supported: ${result.protocolVersion}`
            });
          }
          this.serverCapabilities = result.capabilities;
          await this.notification({
            method: "notifications/initialized"
          });
          return this;
        } catch (error) {
          await this.close();
          throw error;
        }
      }
      async close() {
        var _a17;
        if (this.isClosed)
          return;
        await ((_a17 = this.transport) == null ? void 0 : _a17.close());
        this.onClose();
      }
      async request({
        request,
        resultSchema,
        options
      }) {
        return new Promise((resolve3, reject) => {
          if (this.isClosed) {
            return reject(
              new MCPClientError({
                message: "Attempted to send a request from a closed client"
              })
            );
          }
          const signal = options == null ? void 0 : options.signal;
          signal == null ? void 0 : signal.throwIfAborted();
          const messageId = this.requestMessageId++;
          const jsonrpcRequest = {
            ...request,
            jsonrpc: "2.0",
            id: messageId
          };
          const cleanup = () => {
            this.responseHandlers.delete(messageId);
          };
          this.responseHandlers.set(messageId, (response) => {
            if (signal == null ? void 0 : signal.aborted) {
              return reject(
                new MCPClientError({
                  message: "Request was aborted",
                  cause: signal.reason
                })
              );
            }
            if (response instanceof Error) {
              return reject(response);
            }
            try {
              const result = resultSchema.parse(response.result);
              resolve3(result);
            } catch (error) {
              const parseError = new MCPClientError({
                message: "Failed to parse server initialization result",
                cause: error
              });
              reject(parseError);
            }
          });
          this.transport.send(jsonrpcRequest).catch((error) => {
            cleanup();
            reject(error);
          });
        });
      }
      async listTools({
        params,
        options
      } = {}) {
        if (!this.serverCapabilities.tools) {
          throw new MCPClientError({
            message: `Server does not support tools`
          });
        }
        try {
          return this.request({
            request: { method: "tools/list", params },
            resultSchema: ListToolsResultSchema,
            options
          });
        } catch (error) {
          throw error;
        }
      }
      async callTool({
        name: name17,
        args,
        options
      }) {
        if (!this.serverCapabilities.tools) {
          throw new MCPClientError({
            message: `Server does not support tools`
          });
        }
        try {
          return this.request({
            request: { method: "tools/call", params: { name: name17, arguments: args } },
            resultSchema: CallToolResultSchema,
            options: {
              signal: options == null ? void 0 : options.abortSignal
            }
          });
        } catch (error) {
          throw error;
        }
      }
      async notification(notification) {
        const jsonrpcNotification = {
          ...notification,
          jsonrpc: "2.0"
        };
        await this.transport.send(jsonrpcNotification);
      }
      /**
       * Returns a set of AI SDK tools from the MCP server
       * @returns A record of tool names to their implementations
       */
      async tools({
        schemas = "automatic"
      } = {}) {
        const tools = {};
        try {
          const listToolsResult = await this.listTools();
          for (const { name: name17, description, inputSchema } of listToolsResult.tools) {
            if (schemas !== "automatic" && !(name17 in schemas)) {
              continue;
            }
            const parameters = schemas === "automatic" ? (0, import_ui_utils10.jsonSchema)(inputSchema) : schemas[name17].parameters;
            const self = this;
            const toolWithExecute = tool({
              description,
              parameters,
              execute: async (args, options) => {
                var _a17;
                (_a17 = options == null ? void 0 : options.abortSignal) == null ? void 0 : _a17.throwIfAborted();
                return self.callTool({
                  name: name17,
                  args,
                  options
                });
              }
            });
            tools[name17] = toolWithExecute;
          }
          return tools;
        } catch (error) {
          throw error;
        }
      }
      onClose() {
        if (this.isClosed)
          return;
        this.isClosed = true;
        const error = new MCPClientError({
          message: "Connection closed"
        });
        for (const handler of this.responseHandlers.values()) {
          handler(error);
        }
        this.responseHandlers.clear();
      }
      onError(error) {
        if (this.onUncaughtError) {
          this.onUncaughtError(error);
        }
      }
      onResponse(response) {
        const messageId = Number(response.id);
        const handler = this.responseHandlers.get(messageId);
        if (handler === void 0) {
          throw new MCPClientError({
            message: `Protocol error: Received a response for an unknown message ID: ${JSON.stringify(
              response
            )}`
          });
        }
        this.responseHandlers.delete(messageId);
        handler(
          "result" in response ? response : new MCPClientError({
            message: response.error.message,
            cause: response.error
          })
        );
      }
    };
    function cosineSimilarity(vector1, vector2, options) {
      if (vector1.length !== vector2.length) {
        throw new InvalidArgumentError({
          parameter: "vector1,vector2",
          value: { vector1Length: vector1.length, vector2Length: vector2.length },
          message: `Vectors must have the same length`
        });
      }
      const n = vector1.length;
      if (n === 0) {
        if (options == null ? void 0 : options.throwErrorForEmptyVectors) {
          throw new InvalidArgumentError({
            parameter: "vector1",
            value: vector1,
            message: "Vectors cannot be empty"
          });
        }
        return 0;
      }
      let magnitudeSquared1 = 0;
      let magnitudeSquared2 = 0;
      let dotProduct = 0;
      for (let i = 0; i < n; i++) {
        const value1 = vector1[i];
        const value2 = vector2[i];
        magnitudeSquared1 += value1 * value1;
        magnitudeSquared2 += value2 * value2;
        dotProduct += value1 * value2;
      }
      return magnitudeSquared1 === 0 || magnitudeSquared2 === 0 ? 0 : dotProduct / (Math.sqrt(magnitudeSquared1) * Math.sqrt(magnitudeSquared2));
    }
    var import_provider_utils13 = require_dist3();
    function simulateReadableStream({
      chunks,
      initialDelayInMs = 0,
      chunkDelayInMs = 0,
      _internal
    }) {
      var _a17;
      const delay2 = (_a17 = _internal == null ? void 0 : _internal.delay) != null ? _a17 : import_provider_utils13.delay;
      let index = 0;
      return new ReadableStream({
        async pull(controller) {
          if (index < chunks.length) {
            await delay2(index === 0 ? initialDelayInMs : chunkDelayInMs);
            controller.enqueue(chunks[index++]);
          } else {
            controller.close();
          }
        }
      });
    }
    var import_ui_utils12 = require_dist7();
    function AssistantResponse({ threadId, messageId }, process2) {
      const stream = new ReadableStream({
        async start(controller) {
          var _a17;
          const textEncoder = new TextEncoder();
          const sendMessage = (message) => {
            controller.enqueue(
              textEncoder.encode(
                (0, import_ui_utils12.formatAssistantStreamPart)("assistant_message", message)
              )
            );
          };
          const sendDataMessage = (message) => {
            controller.enqueue(
              textEncoder.encode(
                (0, import_ui_utils12.formatAssistantStreamPart)("data_message", message)
              )
            );
          };
          const sendError = (errorMessage) => {
            controller.enqueue(
              textEncoder.encode((0, import_ui_utils12.formatAssistantStreamPart)("error", errorMessage))
            );
          };
          const forwardStream = async (stream2) => {
            var _a18, _b;
            let result = void 0;
            for await (const value of stream2) {
              switch (value.event) {
                case "thread.message.created": {
                  controller.enqueue(
                    textEncoder.encode(
                      (0, import_ui_utils12.formatAssistantStreamPart)("assistant_message", {
                        id: value.data.id,
                        role: "assistant",
                        content: [{ type: "text", text: { value: "" } }]
                      })
                    )
                  );
                  break;
                }
                case "thread.message.delta": {
                  const content = (_a18 = value.data.delta.content) == null ? void 0 : _a18[0];
                  if ((content == null ? void 0 : content.type) === "text" && ((_b = content.text) == null ? void 0 : _b.value) != null) {
                    controller.enqueue(
                      textEncoder.encode(
                        (0, import_ui_utils12.formatAssistantStreamPart)("text", content.text.value)
                      )
                    );
                  }
                  break;
                }
                case "thread.run.completed":
                case "thread.run.requires_action": {
                  result = value.data;
                  break;
                }
              }
            }
            return result;
          };
          controller.enqueue(
            textEncoder.encode(
              (0, import_ui_utils12.formatAssistantStreamPart)("assistant_control_data", {
                threadId,
                messageId
              })
            )
          );
          try {
            await process2({
              sendMessage,
              sendDataMessage,
              forwardStream
            });
          } catch (error) {
            sendError((_a17 = error.message) != null ? _a17 : `${error}`);
          } finally {
            controller.close();
          }
        },
        pull(controller) {
        },
        cancel() {
        }
      });
      return new Response(stream, {
        status: 200,
        headers: {
          "Content-Type": "text/plain; charset=utf-8"
        }
      });
    }
    var langchain_adapter_exports = {};
    __export2(langchain_adapter_exports, {
      mergeIntoDataStream: () => mergeIntoDataStream,
      toDataStream: () => toDataStream,
      toDataStreamResponse: () => toDataStreamResponse
    });
    var import_ui_utils13 = require_dist7();
    function createCallbacksTransformer(callbacks = {}) {
      const textEncoder = new TextEncoder();
      let aggregatedResponse = "";
      return new TransformStream({
        async start() {
          if (callbacks.onStart)
            await callbacks.onStart();
        },
        async transform(message, controller) {
          controller.enqueue(textEncoder.encode(message));
          aggregatedResponse += message;
          if (callbacks.onToken)
            await callbacks.onToken(message);
          if (callbacks.onText && typeof message === "string") {
            await callbacks.onText(message);
          }
        },
        async flush() {
          if (callbacks.onCompletion) {
            await callbacks.onCompletion(aggregatedResponse);
          }
          if (callbacks.onFinal) {
            await callbacks.onFinal(aggregatedResponse);
          }
        }
      });
    }
    function toDataStreamInternal(stream, callbacks) {
      return stream.pipeThrough(
        new TransformStream({
          transform: async (value, controller) => {
            var _a17;
            if (typeof value === "string") {
              controller.enqueue(value);
              return;
            }
            if ("event" in value) {
              if (value.event === "on_chat_model_stream") {
                forwardAIMessageChunk(
                  (_a17 = value.data) == null ? void 0 : _a17.chunk,
                  controller
                );
              }
              return;
            }
            forwardAIMessageChunk(value, controller);
          }
        })
      ).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(new TextDecoderStream()).pipeThrough(
        new TransformStream({
          transform: async (chunk, controller) => {
            controller.enqueue((0, import_ui_utils13.formatDataStreamPart)("text", chunk));
          }
        })
      );
    }
    function toDataStream(stream, callbacks) {
      return toDataStreamInternal(stream, callbacks).pipeThrough(
        new TextEncoderStream()
      );
    }
    function toDataStreamResponse(stream, options) {
      var _a17;
      const dataStream = toDataStreamInternal(
        stream,
        options == null ? void 0 : options.callbacks
      ).pipeThrough(new TextEncoderStream());
      const data = options == null ? void 0 : options.data;
      const init = options == null ? void 0 : options.init;
      const responseStream = data ? mergeStreams(data.stream, dataStream) : dataStream;
      return new Response(responseStream, {
        status: (_a17 = init == null ? void 0 : init.status) != null ? _a17 : 200,
        statusText: init == null ? void 0 : init.statusText,
        headers: prepareResponseHeaders(init == null ? void 0 : init.headers, {
          contentType: "text/plain; charset=utf-8",
          dataStreamVersion: "v1"
        })
      });
    }
    function mergeIntoDataStream(stream, options) {
      options.dataStream.merge(toDataStreamInternal(stream, options.callbacks));
    }
    function forwardAIMessageChunk(chunk, controller) {
      if (typeof chunk.content === "string") {
        controller.enqueue(chunk.content);
      } else {
        const content = chunk.content;
        for (const item of content) {
          if (item.type === "text") {
            controller.enqueue(item.text);
          }
        }
      }
    }
    var llamaindex_adapter_exports = {};
    __export2(llamaindex_adapter_exports, {
      mergeIntoDataStream: () => mergeIntoDataStream2,
      toDataStream: () => toDataStream2,
      toDataStreamResponse: () => toDataStreamResponse2
    });
    var import_provider_utils15 = require_dist3();
    var import_ui_utils14 = require_dist7();
    function toDataStreamInternal2(stream, callbacks) {
      const trimStart = trimStartOfStream();
      return (0, import_provider_utils15.convertAsyncIteratorToReadableStream)(stream[Symbol.asyncIterator]()).pipeThrough(
        new TransformStream({
          async transform(message, controller) {
            controller.enqueue(trimStart(message.delta));
          }
        })
      ).pipeThrough(createCallbacksTransformer(callbacks)).pipeThrough(new TextDecoderStream()).pipeThrough(
        new TransformStream({
          transform: async (chunk, controller) => {
            controller.enqueue((0, import_ui_utils14.formatDataStreamPart)("text", chunk));
          }
        })
      );
    }
    function toDataStream2(stream, callbacks) {
      return toDataStreamInternal2(stream, callbacks).pipeThrough(
        new TextEncoderStream()
      );
    }
    function toDataStreamResponse2(stream, options = {}) {
      var _a17;
      const { init, data, callbacks } = options;
      const dataStream = toDataStreamInternal2(stream, callbacks).pipeThrough(
        new TextEncoderStream()
      );
      const responseStream = data ? mergeStreams(data.stream, dataStream) : dataStream;
      return new Response(responseStream, {
        status: (_a17 = init == null ? void 0 : init.status) != null ? _a17 : 200,
        statusText: init == null ? void 0 : init.statusText,
        headers: prepareResponseHeaders(init == null ? void 0 : init.headers, {
          contentType: "text/plain; charset=utf-8",
          dataStreamVersion: "v1"
        })
      });
    }
    function mergeIntoDataStream2(stream, options) {
      options.dataStream.merge(toDataStreamInternal2(stream, options.callbacks));
    }
    function trimStartOfStream() {
      let isStreamStart = true;
      return (text2) => {
        if (isStreamStart) {
          text2 = text2.trimStart();
          if (text2)
            isStreamStart = false;
        }
        return text2;
      };
    }
    var import_ui_utils15 = require_dist7();
    var HANGING_STREAM_WARNING_TIME_MS = 15 * 1e3;
    var StreamData = class {
      constructor() {
        this.encoder = new TextEncoder();
        this.controller = null;
        this.isClosed = false;
        this.warningTimeout = null;
        const self = this;
        this.stream = new ReadableStream({
          start: async (controller) => {
            self.controller = controller;
            if (false) {
              self.warningTimeout = setTimeout(() => {
                console.warn(
                  "The data stream is hanging. Did you forget to close it with `data.close()`?"
                );
              }, HANGING_STREAM_WARNING_TIME_MS);
            }
          },
          pull: (controller) => {
          },
          cancel: (reason) => {
            this.isClosed = true;
          }
        });
      }
      async close() {
        if (this.isClosed) {
          throw new Error("Data Stream has already been closed.");
        }
        if (!this.controller) {
          throw new Error("Stream controller is not initialized.");
        }
        this.controller.close();
        this.isClosed = true;
        if (this.warningTimeout) {
          clearTimeout(this.warningTimeout);
        }
      }
      append(value) {
        if (this.isClosed) {
          throw new Error("Data Stream has already been closed.");
        }
        if (!this.controller) {
          throw new Error("Stream controller is not initialized.");
        }
        this.controller.enqueue(
          this.encoder.encode((0, import_ui_utils15.formatDataStreamPart)("data", [value]))
        );
      }
      appendMessageAnnotation(value) {
        if (this.isClosed) {
          throw new Error("Data Stream has already been closed.");
        }
        if (!this.controller) {
          throw new Error("Stream controller is not initialized.");
        }
        this.controller.enqueue(
          this.encoder.encode((0, import_ui_utils15.formatDataStreamPart)("message_annotations", [value]))
        );
      }
    };
  }
});

// node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/llm/llm.js
var require_llm = __commonJS({
  "node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/llm/llm.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LLM = void 0;
    var base_1 = require_base2();
    var anthropic_1 = require_dist4();
    var google_1 = require_dist5();
    var openai_1 = require_dist6();
    var ai_1 = require_dist8();
    var LLM = class extends base_1.Base {
      model;
      constructor({ provider, id }) {
        super("llm");
        switch (provider) {
          case "openai":
            this.model = (0, openai_1.openai)(id);
            break;
          case "anthropic":
            this.model = (0, anthropic_1.anthropic)(id);
            break;
          case "google":
            this.model = (0, google_1.google)(id);
            break;
        }
      }
      async generate(args, viaAgent = false) {
        try {
          const hasTools = "tools" in args && Object.keys(args.tools ?? {}).length > 0;
          const isTextResponse = viaAgent || hasTools;
          if (isTextResponse) {
            const { tools, ...textArgs } = args;
            const response = await (0, ai_1.generateText)({
              model: this.model,
              toolChoice: "auto",
              maxSteps: 3,
              maxRetries: 5,
              tools,
              ...textArgs
            });
            if (!response.text) {
              throw new Error("No response text generated by the model. Consider increasing `maxSteps` and/or `maxRetries`");
            }
            return {
              type: "assistant",
              value: response.text
            };
          } else {
            const objectArgs = args;
            const response = await (0, ai_1.generateObject)({
              model: this.model,
              maxRetries: 5,
              output: "object",
              ...objectArgs
            });
            if (!response.object) {
              throw new Error("No response object");
            }
            return {
              type: "assistant",
              value: response.object
            };
          }
        } catch (error) {
          throw new Error(`Failed to parse response: ${error}`);
        }
      }
    };
    exports2.LLM = LLM;
  }
});

// node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/llm/llm.types.js
var require_llm_types = __commonJS({
  "node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/llm/llm.types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/llm/index.js
var require_llm2 = __commonJS({
  "node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/llm/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_llm(), exports2);
    __exportStar(require_llm_types(), exports2);
  }
});

// node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/agent/agent.js
var require_agent = __commonJS({
  "node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/agent/agent.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Agent = void 0;
    var functions_1 = require_functions();
    var base_1 = require_base2();
    var llm_1 = require_llm2();
    var Agent2 = class extends base_1.Base {
      _config;
      _llm;
      constructor(config) {
        super("agent");
        this._config = config;
        this._llm = new llm_1.LLM(config.model);
      }
      get name() {
        return this._config.name;
      }
      get description() {
        return this._config.description;
      }
      get instructions() {
        return this._config.instructions;
      }
      async generate(args) {
        const _messages = [
          (0, functions_1.systemMessage)(this.description),
          ...this.instructions?.map(functions_1.systemMessage) ?? [],
          ...args.messages ?? []
        ];
        const response = await this._llm.generate({
          ...args,
          tools: this._config.tools,
          messages: _messages,
          temperature: this._config.temperature
        }, true);
        return response;
      }
    };
    exports2.Agent = Agent2;
  }
});

// node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/agent/agent.types.js
var require_agent_types = __commonJS({
  "node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/agent/agent.types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/agent/index.js
var require_agent2 = __commonJS({
  "node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/agent/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_agent(), exports2);
    __exportStar(require_agent_types(), exports2);
  }
});

// node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/tools/tool.js
var require_tool = __commonJS({
  "node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/tools/tool.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Tool = void 0;
    var ai_1 = require_dist8();
    var Tool = class {
      constructor(params) {
        return (0, ai_1.tool)({
          id: `${params.provider}.${params.name}`,
          description: params.description,
          parameters: params.parameters,
          execute: params.execute
        });
      }
    };
    exports2.Tool = Tool;
  }
});

// node_modules/.pnpm/@covalenthq+client-sdk@2.2.4/node_modules/@covalenthq/client-sdk/dist/cjs/index.js
var require_cjs2 = __commonJS({
  "node_modules/.pnpm/@covalenthq+client-sdk@2.2.4/node_modules/@covalenthq/client-sdk/dist/cjs/index.js"(exports2) {
    "use strict";
    var version = "2.2.4";
    var bigIntParser = (val) => {
      if (val === null || val === void 0) {
        return null;
      }
      return BigInt(val);
    };
    var baseUrl = "https://api.covalenthq.com/v1";
    var endpointGenerator = (extension = "", params = []) => {
      extension = extension.replace(baseUrl, "");
      if (extension.startsWith("/")) {
        extension = extension.slice(1);
      }
      if (!extension.endsWith("/")) {
        extension = `${extension}/`;
      }
      const urlParams = new URLSearchParams();
      params.forEach((param) => {
        if (param.value !== void 0 && param.value !== null) {
          urlParams.append(param.key, param.value.toString());
        }
      });
      return new URL(`${baseUrl}/${extension}?${urlParams}`);
    };
    var AllChainsService = class {
      constructor(execution) {
        this.execution = execution;
      }
      /**
       *
       * Commonly used to locate chains which an address is active on with a single API call.
       *
       * @param {string} walletAddress - The requested wallet address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       * @param {GetAddressActivityQueryParamOpts} queryParamOpts
       *   - `testnets`: Set to true to include testnets with activity in the response. By default, it's set to `false` and only returns mainnet activity.
       *
       */
      async getAddressActivity(walletAddress, queryParamOpts) {
        const endpoint = endpointGenerator(`address/${walletAddress}/activity`, [
          {
            key: "testnets",
            value: queryParamOpts?.testnets
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((activityItem) => ({
              ...activityItem,
              last_seen_at: activityItem.last_seen_at ? new Date(activityItem.last_seen_at) : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to get transactions cross chains and addresses.
       *
       * @param {Chain[]} chains - An array of the chain names or IDs to retrieve transactions from. Defaults to all foundational chains.
       * @param {string[]} addresses - An array of addresses for which transactions are fetched. Does not support name resolution.
       * @param {number} limit - Number of transactions to return per page, up to the default max of 100 items.
       * @param {string} before - Pagination cursor pointing to fetch transactions before a certain point.
       * @param {string} after - Pagination cursor pointing to fetch transactions after a certain point.
       * @param {boolean} withLogs - Whether to include raw logs in the response.
       * @param {boolean} withDecodedLogs - Whether to include decoded logs in the response.
       * @param {Quote | CryptocurrencyQuote} quoteCurrency - The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, `GBP`, `BTC` and `ETH`.
       *
       */
      async getMultiChainMultiAddressTransactions(queryParamOpts) {
        const endpoint = endpointGenerator(`allchains/transactions`, [
          {
            key: "chains",
            value: queryParamOpts?.chains
          },
          {
            key: "addresses",
            value: queryParamOpts?.addresses
          },
          {
            key: "limit",
            value: queryParamOpts?.limit
          },
          {
            key: "before",
            value: queryParamOpts?.before
          },
          {
            key: "after",
            value: queryParamOpts?.after
          },
          {
            key: "with-logs",
            value: queryParamOpts?.withLogs
          },
          {
            key: "with-decoded-logs",
            value: queryParamOpts?.withDecodedLogs
          },
          {
            key: "quote-currency",
            value: queryParamOpts?.quoteCurrency
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((txItem) => ({
              ...txItem,
              value: bigIntParser(txItem.value),
              fees_paid: bigIntParser(txItem.fees_paid),
              block_signed_at: txItem.block_signed_at ? new Date(txItem.block_signed_at) : null,
              log_events: txItem.log_events ? txItem.log_events.map((logItem) => ({
                ...logItem,
                block_signed_at: logItem.block_signed_at ? new Date(logItem.block_signed_at) : null
              })) : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       * @deprecated This method is deprecated and will be removed in the upcoming versions. Please use `AllChainsService.getMultiChainMultiAddressTransactions` instead.
       *
       * Commonly used to get transactions cross chains and addresses.
       *
       * @param {Chain[]} chains - An array of the chain names or IDs to retrieve transactions from. Defaults to all foundational chains.
       * @param {string[]} addresses - An array of addresses for which transactions are fetched. Does not support name resolution.
       * @param {number} limit - Number of transactions to return per page, up to the default max of 100 items.
       * @param {string} before - Pagination cursor pointing to fetch transactions before a certain point.
       * @param {string} after - Pagination cursor pointing to fetch transactions after a certain point.
       * @param {boolean} withLogs - Whether to include raw logs in the response.
       * @param {boolean} withDecodedLogs - Whether to include decoded logs in the response.
       * @param {Quote | CryptocurrencyQuote} quoteCurrency - The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, `GBP`, `BTC` and `ETH`.
       *
       */
      async getMultiChainAndMultiAddressTransactions(queryParamOpts) {
        return await this.getMultiChainMultiAddressTransactions(queryParamOpts);
      }
      /**
       *
       * @param {string} walletAddress - The requested wallet Address.
       * @param {GetMultiChainBalanceQueryParamOpts} queryParamOpts
       *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`,  `GBP`, `BTC`, and `ETH`.
       *   - `chains`: Array chain ids or chain names to query. Limited to 10 chains.
       *   - `limit`: The number of items to return. Default is 100.
       *   - `timestamp`: The timestamp to query balances at. If omitted, the latest balances are returned.
       *   - `cursorBefore`: The cursor of previous page.
       */
      async getMultiChainBalances(walletAddress, queryParamOpts) {
        const endpoint = endpointGenerator(`allchains/address/${walletAddress}/balances`, [
          {
            key: "chains",
            value: queryParamOpts?.chains
          },
          {
            key: "quote-currency",
            value: queryParamOpts?.quoteCurrency
          },
          {
            key: "limit",
            value: queryParamOpts?.limit
          },
          {
            key: "cutoff-timestamp",
            value: queryParamOpts?.cutoffTimestamp
          },
          {
            key: "before",
            value: queryParamOpts?.before
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((balanceItem) => ({
              ...balanceItem,
              balance: bigIntParser(balanceItem.balance),
              balance_24h: bigIntParser(balanceItem.balance_24h),
              last_transferred_at: balanceItem.last_transferred_at ? new Date(balanceItem.last_transferred_at) : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
    };
    async function* paginateEndpoint(endpoint, execution, parseData, implementation) {
      let _endpoint = new URL(endpoint);
      let hasMore = true;
      let page_number = +(_endpoint.searchParams.get("page-number") ?? 0);
      while (hasMore) {
        try {
          if (implementation === "pagination") {
            _endpoint.searchParams.set("page-number", page_number.toString());
            const parsedData = await execution.execute(_endpoint, parseData);
            if (parsedData.error) {
              throw parsedData;
            }
            if (!parsedData.data?.pagination?.has_more) {
              hasMore = false;
            } else {
              page_number++;
            }
            yield parsedData;
          } else if (implementation === "links") {
            const parsedData = await execution.execute(_endpoint, parseData);
            const prevLink = parsedData.data?.links?.prev || null;
            if (!prevLink) {
              hasMore = false;
            } else {
              _endpoint = new URL(`${prevLink}?${_endpoint.searchParams}`);
            }
            yield parsedData;
          }
        } catch (error) {
          hasMore = false;
          yield {
            data: null,
            error: true,
            error_code: error?.cause?.code || error?.error_code || 500,
            error_message: error?.cause?.message || error?.error_message || "Internal server error"
          };
        }
      }
    }
    var BalanceService = class {
      constructor(execution) {
        this.execution = execution;
      }
      /**
       *
       * Commonly used to fetch the native, fungible (ERC20), and non-fungible (ERC721 & ERC1155) tokens held by an address. Response includes spot prices and other metadata.
       *
       * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
       * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       * @param {GetTokenBalancesForWalletAddressQueryParamOpts} queryParamOpts
       *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
       *   - `nft`: If `true`, NFTs will be included in the response.
       *   - `noNftFetch`: If `true`, only NFTs that have been cached will be included in the response. Helpful for faster response times.
       *   - `noSpam`: If `true`, the suspected spam tokens are removed. Supports `eth-mainnet` and `matic-mainnet`.
       *   - `noNftAssetMetadata`: If `true`, the response shape is limited to a list of collections and token ids, omitting metadata and asset information. Helpful for faster response times and wallets holding a large number of NFTs.
       *
       */
      async getTokenBalancesForWalletAddress(chainName, walletAddress, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/address/${walletAddress}/balances_v2`, [
          {
            key: "quote-currency",
            value: queryParamOpts?.quoteCurrency
          },
          {
            key: "nft",
            value: queryParamOpts?.nft
          },
          {
            key: "no-nft-fetch",
            value: queryParamOpts?.noNftFetch
          },
          {
            key: "no-spam",
            value: queryParamOpts?.noSpam
          },
          {
            key: "no-nft-asset-metadata",
            value: queryParamOpts?.noNftAssetMetadata
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((balanceItem) => ({
              ...balanceItem,
              balance: bigIntParser(balanceItem.balance),
              balance_24h: bigIntParser(balanceItem.balance_24h),
              last_transferred_at: balanceItem.last_transferred_at ? new Date(balanceItem.last_transferred_at) : null,
              nft_data: balanceItem.nft_data ? balanceItem.nft_data.map((nftItem) => ({
                ...nftItem,
                token_id: bigIntParser(nftItem.token_id),
                token_balance: bigIntParser(nftItem.token_balance),
                token_price_wei: bigIntParser(nftItem.token_price_wei)
              })) : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to render a daily portfolio balance for an address broken down by the token. The timeframe is user-configurable, defaults to 30 days.
       *
       * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
       * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       * @param {GetHistoricalPortfolioForWalletAddressQueryParamOpts} queryParamOpts
       *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
       *   - `days`: The number of days to return data for. Defaults to 30 days.
       *
       */
      async getHistoricalPortfolioForWalletAddress(chainName, walletAddress, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/address/${walletAddress}/portfolio_v2`, [
          {
            key: "quote-currency",
            value: queryParamOpts?.quoteCurrency
          },
          {
            key: "days",
            value: queryParamOpts?.days
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items?.map((portfolioItem) => ({
              ...portfolioItem,
              holdings: portfolioItem.holdings?.map((holdingItem) => ({
                ...holdingItem,
                timestamp: holdingItem.timestamp ? new Date(holdingItem.timestamp) : null,
                close: {
                  ...holdingItem.close,
                  balance: bigIntParser(holdingItem.close?.balance)
                },
                high: {
                  ...holdingItem.high,
                  balance: bigIntParser(holdingItem.high?.balance)
                },
                low: {
                  ...holdingItem.low,
                  balance: bigIntParser(holdingItem.low?.balance)
                },
                open: {
                  ...holdingItem.open,
                  balance: bigIntParser(holdingItem.open?.balance)
                }
              })) || null
            })) || null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to render the transfer-in and transfer-out of a token along with historical prices from an address.
       *
       * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
       * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       * @param {GetErc20TransfersForWalletAddressQueryParamOpts} queryParamOpts
       *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
       *   - `contractAddress`: The requested contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       *   - `startingBlock`: The block height to start from, defaults to `0`.
       *   - `endingBlock`: The block height to end at, defaults to current block height.
       *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
       *   - `pageNumber`: 0-indexed page number to begin pagination.
       *
       */
      async *getErc20TransfersForWalletAddress(chainName, walletAddress, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/address/${walletAddress}/transfers_v2`, [
          {
            key: "quote-currency",
            value: queryParamOpts?.quoteCurrency
          },
          {
            key: "contract-address",
            value: queryParamOpts?.contractAddress
          },
          {
            key: "starting-block",
            value: queryParamOpts?.startingBlock
          },
          {
            key: "ending-block",
            value: queryParamOpts?.endingBlock
          },
          {
            key: "page-size",
            value: queryParamOpts?.pageSize
          },
          {
            key: "page-number",
            value: queryParamOpts?.pageNumber
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((ercItem) => ({
              ...ercItem,
              block_signed_at: ercItem.block_signed_at ? new Date(ercItem.block_signed_at) : null,
              value: bigIntParser(ercItem.value),
              fees_paid: bigIntParser(ercItem.fees_paid),
              transfers: ercItem.transfers ? ercItem.transfers.map((transferItem) => ({
                ...transferItem,
                balance: bigIntParser(transferItem.balance),
                block_signed_at: transferItem.block_signed_at ? new Date(transferItem.block_signed_at) : null,
                delta: bigIntParser(transferItem.delta)
              })) : null
            })) : null;
          }
          return data;
        };
        for await (const data of paginateEndpoint(endpoint, this.execution, parseData, "pagination")) {
          yield data;
        }
      }
      /**
       *
       * Commonly used to render the transfer-in and transfer-out of a token along with historical prices from an address.
       *
       * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
       * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       * @param {GetErc20TransfersForWalletAddressQueryParamOpts} queryParamOpts
       *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
       *   - `contractAddress`: The requested contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       *   - `startingBlock`: The block height to start from, defaults to `0`.
       *   - `endingBlock`: The block height to end at, defaults to current block height.
       *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
       *   - `pageNumber`: 0-indexed page number to begin pagination.
       *
       */
      async getErc20TransfersForWalletAddressByPage(chainName, walletAddress, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/address/${walletAddress}/transfers_v2`, [
          {
            key: "quote-currency",
            value: queryParamOpts?.quoteCurrency
          },
          {
            key: "contract-address",
            value: queryParamOpts?.contractAddress
          },
          {
            key: "starting-block",
            value: queryParamOpts?.startingBlock
          },
          {
            key: "ending-block",
            value: queryParamOpts?.endingBlock
          },
          {
            key: "page-size",
            value: queryParamOpts?.pageSize
          },
          {
            key: "page-number",
            value: queryParamOpts?.pageNumber
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((blockTxItem) => ({
              ...blockTxItem,
              block_signed_at: blockTxItem.block_signed_at ? new Date(blockTxItem.block_signed_at) : null,
              fees_paid: bigIntParser(blockTxItem.fees_paid),
              transfers: blockTxItem.transfers?.map((transferItem) => ({
                ...transferItem,
                balance: bigIntParser(transferItem.balance),
                block_signed_at: transferItem.block_signed_at ? new Date(transferItem.block_signed_at) : null,
                delta: bigIntParser(transferItem.delta)
              })) || null,
              value: bigIntParser(blockTxItem.value)
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to get a list of all the token holders for a specified ERC20 or ERC721 token. Returns historic token holders when block-height is set (defaults to `latest`). Useful for building pie charts of token holders.
       *
       * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
       * @param {string} tokenAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       * @param {GetTokenHoldersV2ForTokenAddressQueryParamOpts} queryParamOpts
       *   - `blockHeight`: Ending block to define a block range. Omitting this parameter defaults to the latest block height.
       *   - `pageSize`: Number of items per page. Note: Currently, only values of `100` and `1000` are supported. Omitting this parameter defaults to 100.
       *   - `pageNumber`: 0-indexed page number to begin pagination.
       *   - `date`: Ending date to define a block range (YYYY-MM-DD). Omitting this parameter defaults to the current date.
       *
       */
      async *getTokenHoldersV2ForTokenAddress(chainName, tokenAddress, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/tokens/${tokenAddress}/token_holders_v2`, [
          {
            key: "block-height",
            value: queryParamOpts?.blockHeight
          },
          {
            key: "page-size",
            value: queryParamOpts?.pageSize
          },
          {
            key: "page-number",
            value: queryParamOpts?.pageNumber
          },
          {
            key: "date",
            value: queryParamOpts?.date
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((tokenItem) => ({
              ...tokenItem,
              balance: bigIntParser(tokenItem.balance),
              total_supply: bigIntParser(tokenItem.total_supply)
            })) : null;
          }
          return data;
        };
        for await (const data of paginateEndpoint(endpoint, this.execution, parseData, "pagination")) {
          yield data;
        }
      }
      /**
       *
       * Commonly used to get a list of all the token holders for a specified ERC20 or ERC721 token. Returns historic token holders when block-height is set (defaults to `latest`). Useful for building pie charts of token holders.
       *
       * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
       * @param {string} tokenAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       * @param {GetTokenHoldersV2ForTokenAddressQueryParamOpts} queryParamOpts
       *   - `blockHeight`: Ending block to define a block range. Omitting this parameter defaults to the latest block height.
       *   - `pageSize`: Number of items per page. Note: Currently, only values of `100` and `1000` are supported. Omitting this parameter defaults to 100.
       *   - `pageNumber`: 0-indexed page number to begin pagination.
       *   - `date`: Ending date to define a block range (YYYY-MM-DD). Omitting this parameter defaults to the current date.
       *
       */
      async getTokenHoldersV2ForTokenAddressByPage(chainName, tokenAddress, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/tokens/${tokenAddress}/token_holders_v2`, [
          {
            key: "block-height",
            value: queryParamOpts?.blockHeight
          },
          {
            key: "page-size",
            value: queryParamOpts?.pageSize
          },
          {
            key: "page-number",
            value: queryParamOpts?.pageNumber
          },
          {
            key: "date",
            value: queryParamOpts?.date
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((balanceItem) => ({
              ...balanceItem,
              balance: bigIntParser(balanceItem.balance),
              total_supply: bigIntParser(balanceItem.total_supply)
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to fetch the historical native, fungible (ERC20), and non-fungible (ERC721 & ERC1155) tokens held by an address at a given block height or date. Response includes daily prices and other metadata.
       *
       * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
       * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       * @param {GetHistoricalTokenBalancesForWalletAddressQueryParamOpts} queryParamOpts
       *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
       *   - `nft`: If `true`, NFTs will be included in the response.
       *   - `noNftFetch`: If `true`, only NFTs that have been cached will be included in the response. Helpful for faster response times.
       *   - `noSpam`: If `true`, the suspected spam tokens are removed. Supports `eth-mainnet` and `matic-mainnet`.
       *   - `noNftAssetMetadata`: If `true`, the response shape is limited to a list of collections and token ids, omitting metadata and asset information. Helpful for faster response times and wallets holding a large number of NFTs.
       *   - `blockHeight`: Ending block to define a block range. Omitting this parameter defaults to the latest block height.
       *   - `date`: Ending date to define a block range (YYYY-MM-DD). Omitting this parameter defaults to the current date.
       *
       */
      async getHistoricalTokenBalancesForWalletAddress(chainName, walletAddress, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/address/${walletAddress}/historical_balances`, [
          {
            key: "quote-currency",
            value: queryParamOpts?.quoteCurrency
          },
          {
            key: "nft",
            value: queryParamOpts?.nft
          },
          {
            key: "no-nft-fetch",
            value: queryParamOpts?.noNftFetch
          },
          {
            key: "no-spam",
            value: queryParamOpts?.noSpam
          },
          {
            key: "no-nft-asset-metadata",
            value: queryParamOpts?.noNftAssetMetadata
          },
          {
            key: "block-height",
            value: queryParamOpts?.blockHeight
          },
          {
            key: "date",
            value: queryParamOpts?.date
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((balanceItem) => ({
              ...balanceItem,
              balance: bigIntParser(balanceItem.balance),
              last_transferred_at: balanceItem.last_transferred_at ? new Date(balanceItem.last_transferred_at) : null,
              nft_data: balanceItem.nft_data ? balanceItem.nft_data.map((nftItem) => ({
                ...nftItem,
                token_id: bigIntParser(nftItem.token_id),
                token_balance: bigIntParser(nftItem.token_balance),
                token_price_wei: bigIntParser(nftItem.token_price_wei)
              })) : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
       * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       * @param {GetNativeTokenBalanceQueryParamOpts} queryParamOpts
       *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
       *   - `blockHeight`: Ending block to define a block range. Omitting this parameter defaults to the latest block height.
       *
       */
      async getNativeTokenBalance(chainName, walletAddress, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/address/${walletAddress}/balances_native`, [
          {
            key: "quote-currency",
            value: queryParamOpts?.quoteCurrency
          },
          {
            key: "block-height",
            value: queryParamOpts?.blockHeight
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((balanceItem) => ({
              ...balanceItem,
              balance: bigIntParser(balanceItem.balance)
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
    };
    var BaseService = class {
      constructor(execution) {
        this.execution = execution;
      }
      /**
       *
       * Commonly used to fetch and render a single block for a block explorer.
       *
       * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
       * @param {string} blockHeight - The block height or `latest` for the latest block available.
       *
       */
      async getBlock(chainName, blockHeight) {
        const endpoint = endpointGenerator(`${chainName}/block_v2/${blockHeight}`, []);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((blockItem) => ({
              ...blockItem,
              signed_at: blockItem.signed_at ? new Date(blockItem.signed_at) : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to resolve ENS, RNS and Unstoppable Domains addresses.
       *
       * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
       * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       *
       */
      async getResolvedAddress(chainName, walletAddress) {
        const endpoint = endpointGenerator(`${chainName}/address/${walletAddress}/resolve_address`, []);
        const parseData = (data) => {
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to get all the block heights within a particular date range. Useful for rendering a display where you sort blocks by day.
       *
       * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
       * @param {string} startDate - The start date in YYYY-MM-DD format.
       * @param {string | "latest"} endDate - The end date in YYYY-MM-DD format. Also accepts "latest" for the latest block height
       * @param {GetBlockHeightsQueryParamOpts} queryParamOpts
       *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
       *   - `pageNumber`: 0-indexed page number to begin pagination.
       *
       */
      async *getBlockHeights(chainName, startDate, endDate, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/block_v2/${startDate}/${endDate}`, [
          {
            key: "page-size",
            value: queryParamOpts?.pageSize
          },
          {
            key: "page-number",
            value: queryParamOpts?.pageNumber
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((blockItem) => ({
              ...blockItem,
              signed_at: blockItem.signed_at ? new Date(blockItem.signed_at) : null
            })) : null;
          }
          return data;
        };
        for await (const data of paginateEndpoint(endpoint, this.execution, parseData, "pagination")) {
          yield data;
        }
      }
      /**
       *
       * Commonly used to get all the block heights within a particular date range. Useful for rendering a display where you sort blocks by day.
       *
       * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
       * @param {string} startDate - The start date in YYYY-MM-DD format.
       * @param {string | "latest"} endDate - The end date in YYYY-MM-DD format. Also accepts "latest" for the latest block height
       * @param {GetBlockHeightsQueryParamOpts} queryParamOpts
       *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
       *   - `pageNumber`: 0-indexed page number to begin pagination.
       *
       */
      async getBlockHeightsByPage(chainName, startDate, endDate, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/block_v2/${startDate}/${endDate}`, [
          {
            key: "page-size",
            value: queryParamOpts?.pageSize
          },
          {
            key: "page-number",
            value: queryParamOpts?.pageNumber
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((blockItem) => ({
              ...blockItem,
              signed_at: blockItem.signed_at ? new Date(blockItem.signed_at) : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to get all the event logs of the latest block, or for a range of blocks. Includes sender contract metadata as well as decoded logs.
       *
       * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
       * @param {GetLogsQueryParamOpts} queryParamOpts
       *   - `startingBlock`: The first block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.
       *   - `endingBlock`: The last block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.
       *   - `address`: The address of the log events sender contract.
       *   - `topics`: The topic hash(es) to retrieve logs with.
       *   - `blockHash`: The block hash to retrieve logs for.
       *   - `skipDecode`: Omit decoded log events.
       *
       */
      async getLogs(chainName, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/events`, [
          {
            key: "starting-block",
            value: queryParamOpts?.startingBlock
          },
          {
            key: "ending-block",
            value: queryParamOpts?.endingBlock
          },
          {
            key: "address",
            value: queryParamOpts?.address
          },
          {
            key: "topics",
            value: queryParamOpts?.topics
          },
          {
            key: "block-hash",
            value: queryParamOpts?.blockHash
          },
          {
            key: "skip-decode",
            value: queryParamOpts?.skipDecode
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((logItem) => ({
              ...logItem,
              block_signed_at: logItem.block_signed_at ? new Date(logItem.block_signed_at) : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to get all the event logs emitted from a particular contract address. Useful for building dashboards that examine on-chain interactions.
       *
       * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
       * @param {string} contractAddress - The requested contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       * @param {GetLogEventsByAddressQueryParamOpts} queryParamOpts
       *   - `startingBlock`: The first block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.
       *   - `endingBlock`: The last block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.
       *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
       *   - `pageNumber`: 0-indexed page number to begin pagination.
       *
       */
      async *getLogEventsByAddress(chainName, contractAddress, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/events/address/${contractAddress}`, [
          {
            key: "starting-block",
            value: queryParamOpts?.startingBlock
          },
          {
            key: "ending-block",
            value: queryParamOpts?.endingBlock
          },
          {
            key: "page-size",
            value: queryParamOpts?.pageSize
          },
          {
            key: "page-number",
            value: queryParamOpts?.pageNumber
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((logItem) => ({
              ...logItem,
              block_signed_at: logItem.block_signed_at ? new Date(logItem.block_signed_at) : null
            })) : null;
          }
          return data;
        };
        for await (const data of paginateEndpoint(endpoint, this.execution, parseData, "pagination")) {
          yield data;
        }
      }
      /**
       *
       * Commonly used to get all the event logs emitted from a particular contract address. Useful for building dashboards that examine on-chain interactions.
       *
       * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
       * @param {string} contractAddress - The requested contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       * @param {GetLogEventsByAddressQueryParamOpts} queryParamOpts
       *   - `startingBlock`: The first block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.
       *   - `endingBlock`: The last block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.
       *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
       *   - `pageNumber`: 0-indexed page number to begin pagination.
       *
       */
      async getLogEventsByAddressByPage(chainName, contractAddress, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/events/address/${contractAddress}`, [
          {
            key: "starting-block",
            value: queryParamOpts?.startingBlock
          },
          {
            key: "ending-block",
            value: queryParamOpts?.endingBlock
          },
          {
            key: "page-size",
            value: queryParamOpts?.pageSize
          },
          {
            key: "page-number",
            value: queryParamOpts?.pageNumber
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((logItem) => ({
              ...logItem,
              block_signed_at: logItem.block_signed_at ? new Date(logItem.block_signed_at) : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to get all event logs of the same topic hash across all contracts within a particular chain. Useful for cross-sectional analysis of event logs that are emitted on-chain.
       *
       * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
       * @param {string} topicHash - The endpoint will return event logs that contain this topic hash.
       * @param {GetLogEventsByTopicHashQueryParamOpts} queryParamOpts
       *   - `startingBlock`: The first block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.
       *   - `endingBlock`: The last block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.
       *   - `secondaryTopics`: Additional topic hash(es) to filter on - padded & unpadded address fields are supported. Separate multiple topics with a comma.
       *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
       *   - `pageNumber`: 0-indexed page number to begin pagination.
       *
       */
      async *getLogEventsByTopicHash(chainName, topicHash, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/events/topics/${topicHash}`, [
          {
            key: "starting-block",
            value: queryParamOpts?.startingBlock
          },
          {
            key: "ending-block",
            value: queryParamOpts?.endingBlock
          },
          {
            key: "secondary-topics",
            value: queryParamOpts?.secondaryTopics
          },
          {
            key: "page-size",
            value: queryParamOpts?.pageSize
          },
          {
            key: "page-number",
            value: queryParamOpts?.pageNumber
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((logItem) => ({
              ...logItem,
              block_signed_at: logItem.block_signed_at ? new Date(logItem.block_signed_at) : null
            })) : null;
          }
          return data;
        };
        for await (const data of paginateEndpoint(endpoint, this.execution, parseData, "pagination")) {
          yield data;
        }
      }
      /**
       *
       * Commonly used to get all event logs of the same topic hash across all contracts within a particular chain. Useful for cross-sectional analysis of event logs that are emitted on-chain.
       *
       * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
       * @param {string} topicHash - The endpoint will return event logs that contain this topic hash.
       * @param {GetLogEventsByTopicHashQueryParamOpts} queryParamOpts
       *   - `startingBlock`: The first block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.
       *   - `endingBlock`: The last block to retrieve log events with. Accepts decimals, hexadecimals, or the strings `earliest` and `latest`.
       *   - `secondaryTopics`: Additional topic hash(es) to filter on - padded & unpadded address fields are supported. Separate multiple topics with a comma.
       *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
       *   - `pageNumber`: 0-indexed page number to begin pagination.
       *
       */
      async getLogEventsByTopicHashByPage(chainName, topicHash, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/events/topics/${topicHash}`, [
          {
            key: "starting-block",
            value: queryParamOpts?.startingBlock
          },
          {
            key: "ending-block",
            value: queryParamOpts?.endingBlock
          },
          {
            key: "secondary-topics",
            value: queryParamOpts?.secondaryTopics
          },
          {
            key: "page-size",
            value: queryParamOpts?.pageSize
          },
          {
            key: "page-number",
            value: queryParamOpts?.pageNumber
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((logItem) => ({
              ...logItem,
              block_signed_at: logItem.block_signed_at ? new Date(logItem.block_signed_at) : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to build internal dashboards for all supported chains on Covalent.
       *
       *
       */
      async getAllChains() {
        const endpoint = endpointGenerator(`chains`);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((chainItem) => ({
              ...chainItem,
              chain_id: chainItem.chain_id ? +chainItem.chain_id : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to build internal status dashboards of all supported chains.
       *
       *
       */
      async getAllChainStatus() {
        const endpoint = endpointGenerator(`chains/status`);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((chainItem) => ({
              ...chainItem,
              chain_id: chainItem.chain_id ? +chainItem.chain_id : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       * @deprecated This method is deprecated and will be removed in the upcoming versions. Please use `AllChainsService.getAddressActivity` instead.
       *
       * Commonly used to locate chains which an address is active on with a single API call.
       *
       * @param {string} walletAddress - The requested wallet address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       * @param {GetAddressActivityQueryParamOpts} queryParamOpts
       *   - `testnets`: Set to true to include testnets with activity in the response. By default, it's set to `false` and only returns mainnet activity.
       *
       */
      async getAddressActivity(walletAddress, queryParamOpts) {
        const endpoint = endpointGenerator(`address/${walletAddress}/activity`, [
          {
            key: "testnets",
            value: queryParamOpts?.testnets
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((activityItem) => ({
              ...activityItem,
              last_seen_at: activityItem.last_seen_at ? new Date(activityItem.last_seen_at) : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
       * @param {string} eventType - The desired event type to retrieve gas prices for. Supports `erc20` transfer events, `uniswapv3` swap events and `nativetokens` transfers.
       * @param {GetGasPricesQueryParamOpts} queryParamOpts
       *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
       *
       */
      async getGasPrices(chainName, eventType, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/event/${eventType}/gas_prices`, [
          {
            key: "quote-currency",
            value: queryParamOpts?.quoteCurrency
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.base_fee = bigIntParser(data.data.base_fee);
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
    };
    exports2.ChainName = void 0;
    (function(ChainName) {
      ChainName["ETH_MAINNET"] = "eth-mainnet";
      ChainName["ETH_SEPOLIA"] = "eth-sepolia";
      ChainName["ETH_HOLESKY"] = "eth-holesky";
      ChainName["MATIC_MAINNET"] = "matic-mainnet";
      ChainName["AVALANCHE_MAINNET"] = "avalanche-mainnet";
      ChainName["AVALANCHE_TESTNET"] = "avalanche-testnet";
      ChainName["BSC_MAINNET"] = "bsc-mainnet";
      ChainName["BSC_TESTNET"] = "bsc-testnet";
      ChainName["MOONBEAM_MAINNET"] = "moonbeam-mainnet";
      ChainName["MOONBEAM_MOONBASE_ALPHA"] = "moonbeam-moonbase-alpha";
      ChainName["MOONBEAM_MOONRIVER"] = "moonbeam-moonriver";
      ChainName["RSK_MAINNET"] = "rsk-mainnet";
      ChainName["RSK_TESTNET"] = "rsk-testnet";
      ChainName["ARBITRUM_MAINNET"] = "arbitrum-mainnet";
      ChainName["ARBITRUM_NOVA_MAINNET"] = "arbitrum-nova-mainnet";
      ChainName["ARBITRUM_SEPOLIA"] = "arbitrum-sepolia";
      ChainName["FANTOM_MAINNET"] = "fantom-mainnet";
      ChainName["FANTOM_TESTNET"] = "fantom-testnet";
      ChainName["PALM_MAINNET"] = "palm-mainnet";
      ChainName["PALM_TESTNET"] = "palm-testnet";
      ChainName["SOLANA_MAINNET"] = "solana-mainnet";
      ChainName["BTC_MAINNET"] = "btc-mainnet";
      ChainName["AXIE_MAINNET"] = "axie-mainnet";
      ChainName["OPTIMISM_MAINNET"] = "optimism-mainnet";
      ChainName["OPTIMISM_SEPOLIA"] = "optimism-sepolia";
      ChainName["CRONOS_MAINNET"] = "cronos-mainnet";
      ChainName["CRONOS_TESTNET"] = "cronos-testnet";
      ChainName["CRONOS_ZKEVM_TESTNET"] = "cronos-zkevm-testnet";
      ChainName["CRONOS_ZKEVM_MAINNET"] = "cronos-zkevm-mainnet";
      ChainName["AURORA_MAINNET"] = "aurora-mainnet";
      ChainName["AURORA_TESTNET"] = "aurora-testnet";
      ChainName["EMERALD_PARATIME_MAINNET"] = "emerald-paratime-mainnet";
      ChainName["DEFI_KINGDOMS_MAINNET"] = "defi-kingdoms-mainnet";
      ChainName["DEFI_KINGDOMS_TESTNET"] = "defi-kingdoms-testnet";
      ChainName["BOBA_MAINNET"] = "boba-mainnet";
      ChainName["BOBA_BNB_MAINNET"] = "boba-bnb-mainnet";
      ChainName["BOBA_BNB_TESTNET"] = "boba-bnb-testnet";
      ChainName["SCROLL_SEPOLIA_TESTNET"] = "scroll-sepolia-testnet";
      ChainName["METIS_MAINNET"] = "metis-mainnet";
      ChainName["AVALANCHE_DEXALOT_MAINNET"] = "avalanche-dexalot-mainnet";
      ChainName["AVALANCHE_DEXALOT_TESTNET"] = "avalanche-dexalot-testnet";
      ChainName["AVALANCHE_SHRAPNEL_MAINNET"] = "avalanche-shrapnel-mainnet";
      ChainName["AVALANCHE_NUMBERS"] = "avalanche-numbers";
      ChainName["AVALANCHE_XANACHAIN"] = "avalanche-xanachain";
      ChainName["AVALANCHE_STEP_NETWORK"] = "avalanche-step-network";
      ChainName["AVALANCHE_SHRAPNEL_TESTNET"] = "avalanche-shrapnel-testnet";
      ChainName["AVALANCHE_BEAM_TESTNET"] = "avalanche-beam-testnet";
      ChainName["AVALANCHE_BLITZ_TESTNET"] = "avalanche-blitz-testnet";
      ChainName["AVALANCHE_UPTN"] = "avalanche-uptn";
      ChainName["AVALANCHE_BEAM_MAINNET"] = "avalanche-beam-mainnet";
      ChainName["AVALANCHE_MIRAI_TESTNET"] = "avalanche-mirai-testnet";
      ChainName["BERACHAIN_MAINNET"] = "berachain-mainnet";
      ChainName["UNICHAIN_MAINNET"] = "unichain-mainnet";
      ChainName["CANTO_MAINNET"] = "canto-mainnet";
      ChainName["FLARENETWORKS_FLARE_MAINNET"] = "flarenetworks-flare-mainnet";
      ChainName["FLARENETWORKS_FLARE_TESTNET"] = "flarenetworks-flare-testnet";
      ChainName["POLYGON_ZKEVM_MAINNET"] = "polygon-zkevm-mainnet";
      ChainName["LINEA_MAINNET"] = "linea-mainnet";
      ChainName["LINEA_GOERLI_TESTNET"] = "linea-goerli-testnet";
      ChainName["LINEA_SEPOLIA_TESTNET"] = "linea-sepolia-testnet";
      ChainName["POLYGON_ZKEVM_TESTNET"] = "polygon-zkevm-testnet";
      ChainName["POLYGON_AMOY_TESTNET"] = "polygon-amoy-testnet";
      ChainName["MANTLE_MAINNET"] = "mantle-mainnet";
      ChainName["MANTLE_SEPOLIA_TESTNET"] = "mantle-sepolia-testnet";
      ChainName["POLYGON_ZKEVM_CARDONA_TESTNET"] = "polygon-zkevm-cardona-testnet";
      ChainName["BASE_MAINNET"] = "base-mainnet";
      ChainName["BASE_SEPOLIA_TESTNET"] = "base-sepolia-testnet";
      ChainName["SX_MAINNET"] = "sx-mainnet";
      ChainName["OASIS_SAPPHIRE_MAINNET"] = "oasis-sapphire-mainnet";
      ChainName["SYNDR_TESTNET"] = "syndr-testnet";
      ChainName["OASIS_SAPPHIRE_TESTNET"] = "oasis-sapphire-testnet";
      ChainName["CELO_MAINNET"] = "celo-mainnet";
      ChainName["X1_MAINNET"] = "x1-mainnet";
      ChainName["HORIZEN_EON_MAINNET"] = "horizen-eon-mainnet";
      ChainName["HORIZEN_GOBI_TESTNET"] = "horizen-gobi-testnet";
      ChainName["FRAXTAL_MAINNET"] = "fraxtal-mainnet";
      ChainName["APECHAIN_TESTNET"] = "apechain-testnet";
      ChainName["BERACHAIN_TESTNET"] = "berachain-testnet";
      ChainName["REDSTONE_MAINNET"] = "redstone-mainnet";
      ChainName["SEI_MAINNET"] = "sei-mainnet";
      ChainName["APECHAIN_MAINNET"] = "apechain-mainnet";
      ChainName["UNICHAIN_SEPOLIA_TESTNET"] = "unichain-sepolia-testnet";
      ChainName["WORLD_MAINNET"] = "world-mainnet";
      ChainName["WORLD_SEPOLIA_TESTNET"] = "world-sepolia-testnet";
      ChainName["LENS_SEPOLIA_TESTNET"] = "lens-sepolia-testnet";
      ChainName["INK_SEPOLIA_TESTNET"] = "ink-sepolia-testnet";
      ChainName["INK_MAINNET"] = "ink-mainnet";
      ChainName["AVALANCHE_MELD_TESTNET"] = "avalanche-meld-testnet";
      ChainName["AVALANCHE_MELD_MAINNET"] = "avalanche-meld-mainnet";
      ChainName["GUNZILLA_TESTNET"] = "gunzilla-testnet";
      ChainName["ZORA_MAINNET"] = "zora-mainnet";
      ChainName["ZORA_SEPOLIA_TESTNET"] = "zora-sepolia-testnet";
      ChainName["ZKSYNC_MAINNET"] = "zksync-mainnet";
      ChainName["ZKSYNC_SEPOLIA_TESTNET"] = "zksync-sepolia-testnet";
      ChainName["BNB_OPBNB_TESTNET"] = "bnb-opbnb-testnet";
      ChainName["BNB_OPBNB_MAINNET"] = "bnb-opbnb-mainnet";
      ChainName["ZETACHAIN_TESTNET"] = "zetachain-testnet";
      ChainName["ZETACHAIN_MAINNET"] = "zetachain-mainnet";
      ChainName["KINTO_TESTNET"] = "kinto-testnet";
      ChainName["MANTA_SEPOLIA_TESTNET"] = "manta-sepolia-testnet";
      ChainName["ROLLUX_MAINNET"] = "rollux-mainnet";
      ChainName["GNOSIS_MAINNET"] = "gnosis-mainnet";
      ChainName["GNOSIS_TESTNET"] = "gnosis-testnet";
      ChainName["VICTION_MAINNET"] = "viction-mainnet";
      ChainName["VICTION_TESTNET"] = "viction-testnet";
      ChainName["TAIKO_HEKLA_TESTNET"] = "taiko-hekla-testnet";
      ChainName["TAIKO_MAINNET"] = "taiko-mainnet";
      ChainName["MERLIN_MAINNET"] = "merlin-mainnet";
      ChainName["MERLIN_TESTNET"] = "merlin-testnet";
      ChainName["MOVEMENT_MEVM_TESTNET"] = "movement-mevm-testnet";
      ChainName["BLAST_MAINNET"] = "blast-mainnet";
      ChainName["SCROLL_MAINNET"] = "scroll-mainnet";
    })(exports2.ChainName || (exports2.ChainName = {}));
    exports2.ChainID = void 0;
    (function(ChainID) {
      ChainID[ChainID["ETH_MAINNET"] = 1] = "ETH_MAINNET";
      ChainID[ChainID["ETH_SEPOLIA"] = 11155111] = "ETH_SEPOLIA";
      ChainID[ChainID["ETH_HOLESKY"] = 17e3] = "ETH_HOLESKY";
      ChainID[ChainID["MATIC_MAINNET"] = 137] = "MATIC_MAINNET";
      ChainID[ChainID["AVALANCHE_MAINNET"] = 43114] = "AVALANCHE_MAINNET";
      ChainID[ChainID["AVALANCHE_TESTNET"] = 43113] = "AVALANCHE_TESTNET";
      ChainID[ChainID["BSC_MAINNET"] = 56] = "BSC_MAINNET";
      ChainID[ChainID["BSC_TESTNET"] = 97] = "BSC_TESTNET";
      ChainID[ChainID["MOONBEAM_MAINNET"] = 1284] = "MOONBEAM_MAINNET";
      ChainID[ChainID["MOONBEAM_MOONBASE_ALPHA"] = 1287] = "MOONBEAM_MOONBASE_ALPHA";
      ChainID[ChainID["MOONBEAM_MOONRIVER"] = 1285] = "MOONBEAM_MOONRIVER";
      ChainID[ChainID["RSK_MAINNET"] = 30] = "RSK_MAINNET";
      ChainID[ChainID["RSK_TESTNET"] = 31] = "RSK_TESTNET";
      ChainID[ChainID["ARBITRUM_MAINNET"] = 42161] = "ARBITRUM_MAINNET";
      ChainID[ChainID["ARBITRUM_NOVA_MAINNET"] = 42170] = "ARBITRUM_NOVA_MAINNET";
      ChainID[ChainID["ARBITRUM_SEPOLIA"] = 421614] = "ARBITRUM_SEPOLIA";
      ChainID[ChainID["FANTOM_MAINNET"] = 250] = "FANTOM_MAINNET";
      ChainID[ChainID["FANTOM_TESTNET"] = 4002] = "FANTOM_TESTNET";
      ChainID[ChainID["PALM_MAINNET"] = 11297108109] = "PALM_MAINNET";
      ChainID[ChainID["PALM_TESTNET"] = 11297108099] = "PALM_TESTNET";
      ChainID[ChainID["BTC_MAINNET"] = 20090103] = "BTC_MAINNET";
      ChainID[ChainID["SOLANA_MAINNET"] = 1399811149] = "SOLANA_MAINNET";
      ChainID[ChainID["AXIE_MAINNET"] = 2020] = "AXIE_MAINNET";
      ChainID[ChainID["OPTIMISM_MAINNET"] = 10] = "OPTIMISM_MAINNET";
      ChainID[ChainID["OPTIMISM_SEPOLIA"] = 11155420] = "OPTIMISM_SEPOLIA";
      ChainID[ChainID["CRONOS_MAINNET"] = 25] = "CRONOS_MAINNET";
      ChainID[ChainID["CRONOS_TESTNET"] = 338] = "CRONOS_TESTNET";
      ChainID[ChainID["CRONOS_ZKEVM_TESTNET"] = 282] = "CRONOS_ZKEVM_TESTNET";
      ChainID[ChainID["CRONOS_ZKEVM_MAINNET"] = 388] = "CRONOS_ZKEVM_MAINNET";
      ChainID[ChainID["AURORA_MAINNET"] = 1313161554] = "AURORA_MAINNET";
      ChainID[ChainID["AURORA_TESTNET"] = 1313161555] = "AURORA_TESTNET";
      ChainID[ChainID["EMERALD_PARATIME_MAINNET"] = 42262] = "EMERALD_PARATIME_MAINNET";
      ChainID[ChainID["DEFI_KINGDOMS_MAINNET"] = 53935] = "DEFI_KINGDOMS_MAINNET";
      ChainID[ChainID["DEFI_KINGDOMS_TESTNET"] = 335] = "DEFI_KINGDOMS_TESTNET";
      ChainID[ChainID["BOBA_MAINNET"] = 288] = "BOBA_MAINNET";
      ChainID[ChainID["BOBA_BNB_MAINNET"] = 56288] = "BOBA_BNB_MAINNET";
      ChainID[ChainID["BOBA_BNB_TESTNET"] = 9728] = "BOBA_BNB_TESTNET";
      ChainID[ChainID["SCROLL_SEPOLIA_TESTNET"] = 534351] = "SCROLL_SEPOLIA_TESTNET";
      ChainID[ChainID["METIS_MAINNET"] = 1088] = "METIS_MAINNET";
      ChainID[ChainID["AVALANCHE_DEXALOT_MAINNET"] = 432204] = "AVALANCHE_DEXALOT_MAINNET";
      ChainID[ChainID["AVALANCHE_DEXALOT_TESTNET"] = 432201] = "AVALANCHE_DEXALOT_TESTNET";
      ChainID[ChainID["AVALANCHE_SHRAPNEL_MAINNET"] = 2044] = "AVALANCHE_SHRAPNEL_MAINNET";
      ChainID[ChainID["AVALANCHE_NUMBERS"] = 10507] = "AVALANCHE_NUMBERS";
      ChainID[ChainID["AVALANCHE_XANACHAIN"] = 8888] = "AVALANCHE_XANACHAIN";
      ChainID[ChainID["AVALANCHE_STEP_NETWORK"] = 1234] = "AVALANCHE_STEP_NETWORK";
      ChainID[ChainID["AVALANCHE_SHRAPNEL_TESTNET"] = 2038] = "AVALANCHE_SHRAPNEL_TESTNET";
      ChainID[ChainID["AVALANCHE_BEAM_TESTNET"] = 13337] = "AVALANCHE_BEAM_TESTNET";
      ChainID[ChainID["AVALANCHE_BLITZ_TESTNET"] = 1343] = "AVALANCHE_BLITZ_TESTNET";
      ChainID[ChainID["AVALANCHE_UPTN"] = 6119] = "AVALANCHE_UPTN";
      ChainID[ChainID["AVALANCHE_BEAM_MAINNET"] = 4337] = "AVALANCHE_BEAM_MAINNET";
      ChainID[ChainID["AVALANCHE_MIRAI_TESTNET"] = 2195] = "AVALANCHE_MIRAI_TESTNET";
      ChainID[ChainID["BERACHAIN_MAINNET"] = 80094] = "BERACHAIN_MAINNET";
      ChainID[ChainID["UNICHAIN_MAINNET"] = 130] = "UNICHAIN_MAINNET";
      ChainID[ChainID["CANTO_MAINNET"] = 7700] = "CANTO_MAINNET";
      ChainID[ChainID["FLARENETWORKS_FLARE_MAINNET"] = 14] = "FLARENETWORKS_FLARE_MAINNET";
      ChainID[ChainID["FLARENETWORKS_FLARE_TESTNET"] = 114] = "FLARENETWORKS_FLARE_TESTNET";
      ChainID[ChainID["POLYGON_ZKEVM_MAINNET"] = 1101] = "POLYGON_ZKEVM_MAINNET";
      ChainID[ChainID["LINEA_MAINNET"] = 59144] = "LINEA_MAINNET";
      ChainID[ChainID["LINEA_GOERLI_TESTNET"] = 59140] = "LINEA_GOERLI_TESTNET";
      ChainID[ChainID["LINEA_SEPOLIA_TESTNET"] = 59141] = "LINEA_SEPOLIA_TESTNET";
      ChainID[ChainID["POLYGON_ZKEVM_TESTNET"] = 1422] = "POLYGON_ZKEVM_TESTNET";
      ChainID[ChainID["POLYGON_AMOY_TESTNET"] = 80002] = "POLYGON_AMOY_TESTNET";
      ChainID[ChainID["MANTLE_MAINNET"] = 5e3] = "MANTLE_MAINNET";
      ChainID[ChainID["MANTLE_SEPOLIA_TESTNET"] = 5003] = "MANTLE_SEPOLIA_TESTNET";
      ChainID[ChainID["POLYGON_ZKEVM_CARDONA_TESTNET"] = 2442] = "POLYGON_ZKEVM_CARDONA_TESTNET";
      ChainID[ChainID["BASE_MAINNET"] = 8453] = "BASE_MAINNET";
      ChainID[ChainID["BASE_SEPOLIA_TESTNET"] = 84532] = "BASE_SEPOLIA_TESTNET";
      ChainID[ChainID["SX_MAINNET"] = 416] = "SX_MAINNET";
      ChainID[ChainID["OASIS_SAPPHIRE_MAINNET"] = 23294] = "OASIS_SAPPHIRE_MAINNET";
      ChainID[ChainID["SYNDR_TESTNET"] = 412346] = "SYNDR_TESTNET";
      ChainID[ChainID["OASIS_SAPPHIRE_TESTNET"] = 23295] = "OASIS_SAPPHIRE_TESTNET";
      ChainID[ChainID["CELO_MAINNET"] = 42220] = "CELO_MAINNET";
      ChainID[ChainID["X1_MAINNET"] = 196] = "X1_MAINNET";
      ChainID[ChainID["HORIZEN_EON_MAINNET"] = 7332] = "HORIZEN_EON_MAINNET";
      ChainID[ChainID["HORIZEN_GOBI_TESTNET"] = 1663] = "HORIZEN_GOBI_TESTNET";
      ChainID[ChainID["FRAXTAL_MAINNET"] = 252] = "FRAXTAL_MAINNET";
      ChainID[ChainID["APECHAIN_TESTNET"] = 1798] = "APECHAIN_TESTNET";
      ChainID[ChainID["BERACHAIN_TESTNET"] = 80084] = "BERACHAIN_TESTNET";
      ChainID[ChainID["REDSTONE_MAINNET"] = 690] = "REDSTONE_MAINNET";
      ChainID[ChainID["SEI_MAINNET"] = 1329] = "SEI_MAINNET";
      ChainID[ChainID["APECHAIN_MAINNET"] = 33139] = "APECHAIN_MAINNET";
      ChainID[ChainID["UNICHAIN_SEPOLIA_TESTNET"] = 1301] = "UNICHAIN_SEPOLIA_TESTNET";
      ChainID[ChainID["WORLD_MAINNET"] = 480] = "WORLD_MAINNET";
      ChainID[ChainID["WORLD_SEPOLIA_TESTNET"] = 4801] = "WORLD_SEPOLIA_TESTNET";
      ChainID[ChainID["LENS_SEPOLIA_TESTNET"] = 37111] = "LENS_SEPOLIA_TESTNET";
      ChainID[ChainID["INK_SEPOLIA_TESTNET"] = 763373] = "INK_SEPOLIA_TESTNET";
      ChainID[ChainID["INK_MAINNET"] = 57073] = "INK_MAINNET";
      ChainID[ChainID["AVALANCHE_MELD_TESTNET"] = 222000222] = "AVALANCHE_MELD_TESTNET";
      ChainID[ChainID["AVALANCHE_MELD_MAINNET"] = 333000333] = "AVALANCHE_MELD_MAINNET";
      ChainID[ChainID["GUNZILLA_TESTNET"] = 49321] = "GUNZILLA_TESTNET";
      ChainID[ChainID["ZORA_MAINNET"] = 7777777] = "ZORA_MAINNET";
      ChainID[ChainID["ZORA_SEPOLIA_TESTNET"] = 999999999] = "ZORA_SEPOLIA_TESTNET";
      ChainID[ChainID["ZKSYNC_MAINNET"] = 324] = "ZKSYNC_MAINNET";
      ChainID[ChainID["ZKSYNC_SEPOLIA_TESTNET"] = 300] = "ZKSYNC_SEPOLIA_TESTNET";
      ChainID[ChainID["BNB_OPBNB_TESTNET"] = 5611] = "BNB_OPBNB_TESTNET";
      ChainID[ChainID["BNB_OPBNB_MAINNET"] = 204] = "BNB_OPBNB_MAINNET";
      ChainID[ChainID["ZETACHAIN_TESTNET"] = 7001] = "ZETACHAIN_TESTNET";
      ChainID[ChainID["ZETACHAIN_MAINNET"] = 7e3] = "ZETACHAIN_MAINNET";
      ChainID[ChainID["KINTO_TESTNET"] = 42888] = "KINTO_TESTNET";
      ChainID[ChainID["MANTA_SEPOLIA_TESTNET"] = 3441006] = "MANTA_SEPOLIA_TESTNET";
      ChainID[ChainID["ROLLUX_MAINNET"] = 570] = "ROLLUX_MAINNET";
      ChainID[ChainID["GNOSIS_MAINNET"] = 100] = "GNOSIS_MAINNET";
      ChainID[ChainID["GNOSIS_TESTNET"] = 10200] = "GNOSIS_TESTNET";
      ChainID[ChainID["VICTION_MAINNET"] = 88] = "VICTION_MAINNET";
      ChainID[ChainID["VICTION_TESTNET"] = 89] = "VICTION_TESTNET";
      ChainID[ChainID["TAIKO_HEKLA_TESTNET"] = 167009] = "TAIKO_HEKLA_TESTNET";
      ChainID[ChainID["TAIKO_MAINNET"] = 167e3] = "TAIKO_MAINNET";
      ChainID[ChainID["MERLIN_MAINNET"] = 4200] = "MERLIN_MAINNET";
      ChainID[ChainID["MERLIN_TESTNET"] = 686868] = "MERLIN_TESTNET";
      ChainID[ChainID["MOVEMENT_MEVM_TESTNET"] = 336] = "MOVEMENT_MEVM_TESTNET";
      ChainID[ChainID["BLAST_MAINNET"] = 81457] = "BLAST_MAINNET";
      ChainID[ChainID["SCROLL_MAINNET"] = 534352] = "SCROLL_MAINNET";
    })(exports2.ChainID || (exports2.ChainID = {}));
    var BitcoinService = class {
      constructor(execution) {
        this.execution = execution;
      }
      /**
       *
       * @param {string} walletAddress - The requested Bitcoin HD address.
       * @param {GetBitcoinHdWalletBalancesQueryParamOpts} queryParamOpts
       *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
       *
       */
      async getBitcoinHdWalletBalances(walletAddress, queryParamOpts) {
        const endpoint = endpointGenerator(`${exports2.ChainName.BTC_MAINNET}/address/${walletAddress}/hd_wallets`, [
          {
            key: "quote-currency",
            value: queryParamOpts?.quoteCurrency
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((balanceItem) => ({
              ...balanceItem,
              balance: bigIntParser(balanceItem.balance)
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Used to fetch the full transaction history of a Bitcoin wallet.
       *
       * @param {GetTransactionsForBitcoinAddressParamOpts} queryParamOpts
       *   - `address`: The bitcoin address to query.
       *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
       *   - `pageNumber`: 0-indexed page number to begin pagination.
       */
      async getTransactionsForBtcAddress(queryParamOpts) {
        const endpoint = endpointGenerator(`cq/covalent/app/bitcoin/transactions/`, [
          {
            key: "address",
            value: queryParamOpts?.address
          },
          {
            key: "page-size",
            value: queryParamOpts?.pageSize
          },
          {
            key: "page-number",
            value: queryParamOpts?.pageNumber
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((txItem) => ({
              ...txItem,
              value: bigIntParser(txItem.value),
              fees_paid: bigIntParser(txItem.fees_paid),
              block_signed_at: txItem.block_signed_at ? new Date(txItem.block_signed_at) : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to fetch the tokens held by an address. Response includes spot prices and other metadata.
       *
       * @param {string} walletAddress - The requested Bitcoin Non HD address.
       * @param {GetBitcoinNonHdWalletBalancesQueryParamOpts} queryParamOpts
       *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
       *
       */
      async getBitcoinNonHdWalletBalances(walletAddress, queryParamOpts) {
        const endpoint = endpointGenerator(`${exports2.ChainName.BTC_MAINNET}/address/${walletAddress}/balances_v2`, [
          {
            key: "quote-currency",
            value: queryParamOpts?.quoteCurrency
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((balanceItem) => ({
              ...balanceItem,
              balance: bigIntParser(balanceItem.balance),
              balance_24h: bigIntParser(balanceItem.balance_24h),
              last_transferred_at: balanceItem.last_transferred_at ? new Date(balanceItem.last_transferred_at) : null,
              nft_data: balanceItem.nft_data ? balanceItem.nft_data.map((nftItem) => ({
                ...nftItem,
                token_id: bigIntParser(nftItem.token_id),
                token_balance: bigIntParser(nftItem.token_balance),
                token_price_wei: bigIntParser(nftItem.token_price_wei)
              })) : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
    };
    var NftService = class {
      constructor(execution) {
        this.execution = execution;
      }
      /**
       *
       * Commonly used to fetch the list of NFT collections with downloaded and cached off chain data like token metadata and asset files.
       *
       * @param {string} chainName - The chain name eg: `eth-mainnet`.
       * @param {GetChainCollectionsQueryParamOpts} queryParamOpts
       *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
       *   - `pageNumber`: 0-indexed page number to begin pagination.
       *   - `noSpam`: If `true`, the suspected spam tokens are removed. Supports `eth-mainnet` and `matic-mainnet`.
       *
       */
      async *getChainCollections(chainName, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/nft/collections`, [
          {
            key: "page-size",
            value: queryParamOpts?.pageSize
          },
          {
            key: "page-number",
            value: queryParamOpts?.pageNumber
          },
          {
            key: "no-spam",
            value: queryParamOpts?.noSpam
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((collectionItem) => ({
              ...collectionItem,
              last_scraped_at: collectionItem.last_scraped_at ? new Date(collectionItem.last_scraped_at) : null
            })) : null;
          }
          return data;
        };
        for await (const data of paginateEndpoint(endpoint, this.execution, parseData, "pagination")) {
          yield data;
        }
      }
      /**
       *
       * Commonly used to fetch the list of NFT collections with downloaded and cached off chain data like token metadata and asset files.
       *
       * @param {string} chainName - The chain name eg: `eth-mainnet`.
       * @param {GetChainCollectionsQueryParamOpts} queryParamOpts
       *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
       *   - `pageNumber`: 0-indexed page number to begin pagination.
       *   - `noSpam`: If `true`, the suspected spam tokens are removed. Supports `eth-mainnet` and `matic-mainnet`.
       *
       */
      async getChainCollectionsByPage(chainName, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/nft/collections`, [
          {
            key: "page-size",
            value: queryParamOpts?.pageSize
          },
          {
            key: "page-number",
            value: queryParamOpts?.pageNumber
          },
          {
            key: "no-spam",
            value: queryParamOpts?.noSpam
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((collectionItem) => ({
              ...collectionItem,
              last_scraped_at: collectionItem.last_scraped_at ? new Date(collectionItem.last_scraped_at) : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to render the NFTs (including ERC721 and ERC1155) held by an address.
       *
       * @param {string} chainName - The chain name eg: `eth-mainnet`.
       * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       * @param {GetNftsForAddressQueryParamOpts} queryParamOpts
       *   - `noSpam`: If `true`, the suspected spam tokens are removed. Supports `eth-mainnet` and `matic-mainnet`.
       *   - `noNftAssetMetadata`: If `true`, the response shape is limited to a list of collections and token ids, omitting metadata and asset information. Helpful for faster response times and wallets holding a large number of NFTs.
       *   - `withUncached`: By default, this endpoint only works on chains where we've cached the assets and the metadata. When set to `true`, the API will fetch metadata from upstream servers even if it's not cached - the downside being that the upstream server can block or rate limit the call and therefore resulting in time outs or slow response times on the Covalent side.
       *
       */
      async getNftsForAddress(chainName, walletAddress, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/address/${walletAddress}/balances_nft`, [
          {
            key: "no-spam",
            value: queryParamOpts?.noSpam
          },
          {
            key: "no-nft-asset-metadata",
            value: queryParamOpts?.noNftAssetMetadata
          },
          {
            key: "with-uncached",
            value: queryParamOpts?.withUncached
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((balanceItem) => ({
              ...balanceItem,
              balance: bigIntParser(balanceItem.balance),
              balance_24h: bigIntParser(balanceItem.balance_24h),
              nft_data: balanceItem.nft_data ? balanceItem.nft_data.map((nftItem) => ({
                ...nftItem,
                token_id: bigIntParser(nftItem.token_id)
              })) : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to get NFT token IDs with metadata from a collection. Useful for building NFT card displays.
       *
       * @param {string} chainName - The chain name eg: `eth-mainnet`.
       * @param {string} contractAddress - The requested contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       * @param {GetTokenIdsForContractWithMetadataQueryParamOpts} queryParamOpts
       *   - `noMetadata`: Omit metadata.
       *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
       *   - `pageNumber`: 0-indexed page number to begin pagination.
       *   - `traitsFilter`: Filters NFTs based on a specific trait. If this filter is used, the API will return all NFTs with the specified trait. Accepts comma-separated values, is case-sensitive, and requires proper URL encoding.
       *   - `valuesFilter`: Filters NFTs based on a specific trait value. If this filter is used, the API will return all NFTs with the specified trait value. If used with "traits-filter", only NFTs matching both filters will be returned. Accepts comma-separated values, is case-sensitive, and requires proper URL encoding.
       *   - `withUncached`: By default, this endpoint only works on chains where we've cached the assets and the metadata. When set to `true`, the API will fetch metadata from upstream servers even if it's not cached - the downside being that the upstream server can block or rate limit the call and therefore resulting in time outs or slow response times on the Covalent side.
       *
       */
      async *getTokenIdsForContractWithMetadata(chainName, contractAddress, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/nft/${contractAddress}/metadata`, [
          {
            key: "no-metadata",
            value: queryParamOpts?.noMetadata
          },
          {
            key: "page-size",
            value: queryParamOpts?.pageSize
          },
          {
            key: "page-number",
            value: queryParamOpts?.pageNumber
          },
          {
            key: "traits-filter",
            value: queryParamOpts?.traitsFilter
          },
          {
            key: "values-filter",
            value: queryParamOpts?.valuesFilter
          },
          {
            key: "with-uncached",
            value: queryParamOpts?.withUncached
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((tokenItem) => ({
              ...tokenItem,
              nft_data: {
                ...tokenItem.nft_data,
                token_id: bigIntParser(tokenItem.nft_data?.token_id)
              }
            })) : null;
          }
          return data;
        };
        for await (const data of paginateEndpoint(endpoint, this.execution, parseData, "pagination")) {
          yield data;
        }
      }
      /**
       *
       * Commonly used to get NFT token IDs with metadata from a collection. Useful for building NFT card displays.
       *
       * @param {string} chainName - The chain name eg: `eth-mainnet`.
       * @param {string} contractAddress - The requested contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       * @param {GetTokenIdsForContractWithMetadataQueryParamOpts} queryParamOpts
       *   - `noMetadata`: Omit metadata.
       *   - `pageSize`: Number of items per page. Omitting this parameter defaults to 100.
       *   - `pageNumber`: 0-indexed page number to begin pagination.
       *   - `traitsFilter`: Filters NFTs based on a specific trait. If this filter is used, the API will return all NFTs with the specified trait. Accepts comma-separated values, is case-sensitive, and requires proper URL encoding.
       *   - `valuesFilter`: Filters NFTs based on a specific trait value. If this filter is used, the API will return all NFTs with the specified trait value. If used with "traits-filter", only NFTs matching both filters will be returned. Accepts comma-separated values, is case-sensitive, and requires proper URL encoding.
       *   - `withUncached`: By default, this endpoint only works on chains where we've cached the assets and the metadata. When set to `true`, the API will fetch metadata from upstream servers even if it's not cached - the downside being that the upstream server can block or rate limit the call and therefore resulting in time outs or slow response times on the Covalent side.
       *
       */
      async getTokenIdsForContractWithMetadataByPage(chainName, contractAddress, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/nft/${contractAddress}/metadata`, [
          {
            key: "no-metadata",
            value: queryParamOpts?.noMetadata
          },
          {
            key: "page-size",
            value: queryParamOpts?.pageSize
          },
          {
            key: "page-number",
            value: queryParamOpts?.pageNumber
          },
          {
            key: "traits-filter",
            value: queryParamOpts?.traitsFilter
          },
          {
            key: "values-filter",
            value: queryParamOpts?.valuesFilter
          },
          {
            key: "with-uncached",
            value: queryParamOpts?.withUncached
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((tokenItem) => ({
              ...tokenItem,
              nft_data: {
                ...tokenItem.nft_data,
                token_id: bigIntParser(tokenItem.nft_data?.token_id)
              }
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to get a single NFT metadata by token ID from a collection. Useful for building NFT card displays.
       *
       * @param {string} chainName - The chain name eg: `eth-mainnet`.
       * @param {string} contractAddress - The requested contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       * @param {string} tokenId - The requested token ID.
       * @param {GetNftMetadataForGivenTokenIdForContractQueryParamOpts} queryParamOpts
       *   - `noMetadata`: Omit metadata.
       *   - `withUncached`: By default, this endpoint only works on chains where we've cached the assets and the metadata. When set to `true`, the API will fetch metadata from upstream servers even if it's not cached - the downside being that the upstream server can block or rate limit the call and therefore resulting in time outs or slow response times on the Covalent side.
       *
       */
      async getNftMetadataForGivenTokenIdForContract(chainName, contractAddress, tokenId, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/nft/${contractAddress}/metadata/${tokenId}`, [
          {
            key: "no-metadata",
            value: queryParamOpts?.noMetadata
          },
          {
            key: "with-uncached",
            value: queryParamOpts?.withUncached
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((tokenItem) => ({
              ...tokenItem,
              nft_data: {
                ...tokenItem.nft_data,
                token_id: bigIntParser(tokenItem.nft_data?.token_id)
              }
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to get all transactions of an NFT token. Useful for building a transaction history table or price chart.
       *
       * @param {string} chainName - The chain name eg: `eth-mainnet`.
       * @param {string} contractAddress - The requested contract address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       * @param {string} tokenId - The requested token ID.
       * @param {GetNftTransactionsForContractTokenIdQueryParamOpts} queryParamOpts
       *   - `noSpam`: If `true`, the suspected spam tokens are removed. Supports `eth-mainnet` and `matic-mainnet`.
       *
       */
      async getNftTransactionsForContractTokenId(chainName, contractAddress, tokenId, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/tokens/${contractAddress}/nft_transactions/${tokenId}`, [
          {
            key: "no-spam",
            value: queryParamOpts?.noSpam
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((nftItem) => ({
              ...nftItem,
              nft_transactions: nftItem.nft_transactions ? nftItem.nft_transactions.map((txItem) => ({
                ...txItem,
                block_signed_at: txItem.block_signed_at ? new Date(txItem.block_signed_at) : null,
                value: bigIntParser(txItem.value),
                fees_paid: bigIntParser(txItem.fees_paid),
                log_events: txItem.log_events ? txItem.log_events.map((logItem) => ({
                  ...logItem,
                  block_signed_at: logItem.block_signed_at ? new Date(logItem.block_signed_at) : null
                })) : null
              })) : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to fetch and render the traits of a collection as seen in rarity calculators.
       *
       * @param {string} chainName - The chain name eg: `eth-mainnet`.
       * @param {string} collectionContract - The requested collection address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       *
       */
      async getTraitsForCollection(chainName, collectionContract) {
        const endpoint = endpointGenerator(`${chainName}/nft/${collectionContract}/traits`, []);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to get the count of unique values for traits within an NFT collection.
       *
       * @param {string} chainName - The chain name eg: `eth-mainnet`.
       * @param {string} collectionContract - The requested collection address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       * @param {string} trait - The requested trait.
       *
       */
      async getAttributesForTraitInCollection(chainName, collectionContract, trait) {
        const endpoint = endpointGenerator(`${chainName}/nft/${collectionContract}/traits/${trait}/attributes`, []);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to calculate rarity scores for a collection based on its traits.
       *
       * @param {string} chainName - The chain name eg: `eth-mainnet`.
       * @param {string} collectionContract - The requested collection address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       *
       */
      async getCollectionTraitsSummary(chainName, collectionContract) {
        const endpoint = endpointGenerator(`${chainName}/nft/${collectionContract}/traits_summary`, []);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to render a price floor chart for an NFT collection.
       *
       * @param {string} chainName - The chain name eg: `eth-mainnet`.
       * @param {string} collectionAddress - The requested address.
       * @param {GetNftsForAddressQueryParamOpts} queryParamOpts
       *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
       *   - `days`: The number of days to return data for. Request up 365 days. Defaults to 30 days.
       *
       */
      async getHistoricalFloorPricesForCollection(chainName, collectionAddress, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/nft_market/${collectionAddress}/floor_price`, [
          {
            key: "days",
            value: queryParamOpts?.days
          },
          {
            key: "quote-currency",
            value: queryParamOpts?.quote_currency
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((floorPriceItem) => ({
              ...floorPriceItem,
              date: floorPriceItem.date ? new Date(floorPriceItem.date) : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to build a time-series chart of the transaction volume of an NFT collection.
       *
       * @param {string} chainName - The chain name eg: `eth-mainnet`.
       * @param {string} collectionAddress - The requested address.
       * @param {GetNftsForAddressQueryParamOpts} queryParamOpts
       *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
       *   - `days`: The number of days to return data for. Request up 365 days. Defaults to 30 days.
       *
       */
      async getHistoricalVolumeForCollection(chainName, collectionAddress, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/nft_market/${collectionAddress}/volume`, [
          {
            key: "days",
            value: queryParamOpts?.days
          },
          {
            key: "quote-currency",
            value: queryParamOpts?.quote_currency
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((floorPriceItem) => ({
              ...floorPriceItem,
              date: floorPriceItem.date ? new Date(floorPriceItem.date) : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to build a time-series chart of the sales count of an NFT collection.
       *
       * @param {string} chainName - The chain name eg: `eth-mainnet`.
       * @param {string} collectionAddress - The requested address.
       * @param {GetNftsForAddressQueryParamOpts} queryParamOpts
       *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
       *   - `days`: The number of days to return data for. Request up 365 days. Defaults to 30 days.
       *
       */
      async getHistoricalSalesCountForCollection(chainName, collectionAddress, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/nft_market/${collectionAddress}/sale_count`, [
          {
            key: "days",
            value: queryParamOpts?.days
          },
          {
            key: "quote-currency",
            value: queryParamOpts?.quote_currency
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((floorPriceItem) => ({
              ...floorPriceItem,
              date: floorPriceItem.date ? new Date(floorPriceItem.date) : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to verify ownership of NFTs (including ERC-721 and ERC-1155) within a collection.
       *
       * @param {string} chainName - The chain name eg: `eth-mainnet`.
       * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       * @param {string} collectionContract - The requested collection address.
       * @param {CheckOwnershipInNftQueryParamOpts} queryParamOpts
       *   - `traitsFilter`: Filters NFTs based on a specific trait. If this filter is used, the API will return all NFTs with the specified trait. Must be used with "values-filter", is case-sensitive, and requires proper URL encoding.
       *   - `valuesFilter`: Filters NFTs based on a specific trait value. If this filter is used, the API will return all NFTs with the specified trait value. Must be used with "traits-filter", is case-sensitive, and requires proper URL encoding.
       *
       */
      async checkOwnershipInNft(chainName, walletAddress, collectionContract, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/address/${walletAddress}/collection/${collectionContract}`, [
          {
            key: "traits-filter",
            value: queryParamOpts?.traitsFilter
          },
          {
            key: "values-filter",
            value: queryParamOpts?.valuesFilter
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((nftItem) => ({
              ...nftItem,
              balance: bigIntParser(nftItem.balance),
              balance_24h: bigIntParser(nftItem.balance_24h),
              token_id: bigIntParser(nftItem.token_id),
              nft_data: {
                ...nftItem.nft_data,
                token_id: bigIntParser(nftItem.nft_data?.token_id)
              }
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to verify ownership of a specific token (ERC-721 or ERC-1155) within a collection.
       *
       * @param {string} chainName - The chain name eg: `eth-mainnet`.
       * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       * @param {string} collectionContract - The requested collection address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       * @param {string} tokenId - The requested token ID.
       *
       */
      async checkOwnershipInNftForSpecificTokenId(chainName, walletAddress, collectionContract, tokenId) {
        const endpoint = endpointGenerator(`${chainName}/address/${walletAddress}/collection/${collectionContract}/token/${tokenId}`, []);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((balanceItem) => ({
              ...balanceItem,
              balance: bigIntParser(balanceItem.balance),
              balance_24h: bigIntParser(balanceItem.balance_24h),
              token_id: bigIntParser(balanceItem.token_id),
              last_transfered_at: balanceItem.last_transfered_at ? new Date(balanceItem.last_transfered_at) : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
    };
    var PricingService = class {
      constructor(execution) {
        this.execution = execution;
      }
      /**
       *
       * Commonly used to get historic prices of a token between date ranges. Supports native tokens.
       *
       * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
       * @param {string} quoteCurrency - The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
       * @param {string} contractAddress - Contract address for the token. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically. Supports multiple contract addresses separated by commas.
       * @param {GetTokenPricesQueryParamOpts} queryParamOpts
       *   - `from`: The start day of the historical price range (YYYY-MM-DD).
       *   - `to`: The end day of the historical price range (YYYY-MM-DD).
       *   - `pricesAtAsc`: Sort the prices in chronological ascending order. By default, it's set to `false` and returns prices in chronological descending order.
       *
       */
      async getTokenPrices(chainName, quoteCurrency, contractAddress, queryParamOpts) {
        const endpoint = endpointGenerator(`pricing/historical_by_addresses_v2/${chainName}/${quoteCurrency}/${contractAddress}`, [
          {
            key: "from",
            value: queryParamOpts?.from
          },
          {
            key: "to",
            value: queryParamOpts?.to
          },
          {
            key: "prices-at-asc",
            value: queryParamOpts?.pricesAtAsc
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.forEach((dataItem) => {
              dataItem.update_at = dataItem.update_at ? new Date(dataItem.update_at) : null;
              dataItem.items = dataItem.items ? dataItem.items.map((priceItem) => ({
                ...priceItem,
                date: priceItem.date ? new Date(priceItem.date) : null
              })) : null;
            });
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
    };
    var SecurityService = class {
      constructor(execution) {
        this.execution = execution;
      }
      /**
       *
       * Commonly used to get a list of approvals across all token contracts categorized by spenders for a wallet’s assets.
       *
       * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
       * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       *
       */
      async getApprovals(chainName, walletAddress) {
        const endpoint = endpointGenerator(`${chainName}/approvals/${walletAddress}`, []);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((approvalItem) => ({
              ...approvalItem,
              balance: bigIntParser(approvalItem.balance),
              spenders: approvalItem.spenders ? approvalItem.spenders.map((spenderItem) => ({
                ...spenderItem,
                block_signed_at: spenderItem.block_signed_at ? new Date(spenderItem.block_signed_at) : null
              })) : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
         *
         * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
         * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
         
         *
         */
      async getNftApprovals(chainName, walletAddress) {
        const endpoint = endpointGenerator(`${chainName}/nft/approvals/${walletAddress}`, []);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((approvalItem) => ({
              ...approvalItem,
              token_balances: approvalItem.token_balances ? approvalItem.token_balances.map((balanceItem) => ({
                ...balanceItem,
                token_balance: bigIntParser(balanceItem.token_balance),
                token_id: bigIntParser(balanceItem.token_id)
              })) : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
    };
    var TransactionService = class {
      constructor(execution) {
        this.execution = execution;
      }
      /**
       *
       * Commonly used to fetch and render a single transaction including its decoded log events.
       *
       * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
       * @param {string} txHash - The transaction hash.
       * @param {GetTransactionQueryParamOpts} queryParamOpts
       *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
       *   - `noLogs`: Omit log events.
       *   - `withInternal`: Include internal transfers/transactions.
       *   - `withState`: Include all transaction state changes with before and after values.
       *   - `withInputData`: Include the transaction's input data such as the Method ID.
       *
       */
      async getTransaction(chainName, txHash, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/transaction_v2/${txHash}`, [
          {
            key: "quote-currency",
            value: queryParamOpts?.quoteCurrency
          },
          {
            key: "no-logs",
            value: queryParamOpts?.noLogs
          },
          {
            key: "with-internal",
            value: queryParamOpts?.withInternal
          },
          {
            key: "with-state",
            value: queryParamOpts?.withState
          },
          {
            key: "with-input-data",
            value: queryParamOpts?.withInputData
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((txItem) => ({
              ...txItem,
              value: bigIntParser(txItem.value),
              fees_paid: bigIntParser(txItem.fees_paid),
              block_signed_at: txItem.block_signed_at ? new Date(txItem.block_signed_at) : null,
              log_events: txItem.log_events ? txItem.log_events.map((logItem) => ({
                ...logItem,
                block_signed_at: logItem.block_signed_at ? new Date(logItem.block_signed_at) : null
              })) : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to fetch and render the most recent transactions involving an address. Frequently seen in wallet applications.
       *
       * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
       * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       * @param {GetAllTransactionsForAddressQueryParamOpts} queryParamOpts
       *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
       *   - `noLogs`: Omit log events.
       *   - `blockSignedAtAsc`: Sort the transactions in ascending chronological order. By default, it's set to `false` and returns transactions in descending chronological order.
       *   - `withInternal`: Include internal transfers/transactions.
       *   - `withState`: Include all transaction state changes with before and after values.
       *   - `withInputData`: Include the transaction's input data such as the Method ID.
       *
       */
      async *getAllTransactionsForAddress(chainName, walletAddress, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/address/${walletAddress}/transactions_v3`, [
          {
            key: "quote-currency",
            value: queryParamOpts?.quoteCurrency
          },
          {
            key: "no-logs",
            value: queryParamOpts?.noLogs
          },
          {
            key: "block-signed-at-asc",
            value: queryParamOpts?.blockSignedAtAsc
          },
          {
            key: "with-internal",
            value: queryParamOpts?.withInternal
          },
          {
            key: "with-state",
            value: queryParamOpts?.withState
          },
          {
            key: "with-input-data",
            value: queryParamOpts?.withInputData
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((txItem) => ({
              ...txItem,
              value: bigIntParser(txItem.value),
              fees_paid: bigIntParser(txItem.fees_paid),
              block_signed_at: txItem.block_signed_at ? new Date(txItem.block_signed_at) : null,
              log_events: txItem.log_events ? txItem.log_events.map((logItem) => ({
                ...logItem,
                block_signed_at: logItem.block_signed_at ? new Date(logItem.block_signed_at) : null
              })) : null
            })) : null;
          }
          return data;
        };
        for await (const data of paginateEndpoint(endpoint, this.execution, parseData, "links")) {
          yield data;
        }
      }
      /**
       *
       * Commonly used to fetch and render the most recent transactions involving an address. Frequently seen in wallet applications.
       *
       * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
       * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       * @param {GetAllTransactionsForAddressQueryParamOpts} queryParamOpts
       *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
       *   - `noLogs`: Omit log events.
       *   - `blockSignedAtAsc`: Sort the transactions in ascending chronological order. By default, it's set to `false` and returns transactions in descending chronological order.
       *   - `withInternal`: Include internal transfers/transactions.
       *   - `withState`: Include all transaction state changes with before and after values.
       *   - `withInputData`: Include the transaction's input data such as the Method ID.
       *
       */
      async getAllTransactionsForAddressByPage(chainName, walletAddress, queryParamOpts) {
        const searchParams = [
          {
            key: "quote-currency",
            value: queryParamOpts?.quoteCurrency
          },
          {
            key: "no-logs",
            value: queryParamOpts?.noLogs
          },
          {
            key: "block-signed-at-asc",
            value: queryParamOpts?.blockSignedAtAsc
          },
          {
            key: "with-internal",
            value: queryParamOpts?.withInternal
          },
          {
            key: "with-state",
            value: queryParamOpts?.withState
          },
          {
            key: "with-input-data",
            value: queryParamOpts?.withInputData
          }
        ];
        const endpoint = endpointGenerator(`${chainName}/address/${walletAddress}/transactions_v3`, searchParams);
        const parseData = (data) => {
          if (data.data) {
            data.data.prev = data.data?.links?.prev ? async () => this.execution.execute(endpointGenerator(data.data?.links?.prev, searchParams), parseData) : null;
            data.data.next = data.data?.links?.next ? async () => this.execution.execute(endpointGenerator(data.data?.links?.next, searchParams), parseData) : null;
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((txItem) => ({
              ...txItem,
              value: bigIntParser(txItem.value),
              fees_paid: bigIntParser(txItem.fees_paid),
              block_signed_at: txItem.block_signed_at ? new Date(txItem.block_signed_at) : null,
              log_events: txItem.log_events ? txItem.log_events.map((logItem) => ({
                ...logItem,
                block_signed_at: logItem.block_signed_at ? new Date(logItem.block_signed_at) : null
              })) : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to fetch all transactions including their decoded log events in a block and further flag interesting wallets or transactions.
       *
       * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
       * @param {number} blockHeight - The requested block height.
       * @param {GetTransactionsForBlockQueryParamOpts} queryParamOpts
       *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
       *   - `noLogs`: Omit log events.
       *
       */
      async getTransactionsForBlock(chainName, blockHeight, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/block/${blockHeight}/transactions_v3`, [
          {
            key: "quote-currency",
            value: queryParamOpts?.quoteCurrency
          },
          {
            key: "no-logs",
            value: queryParamOpts?.noLogs
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((txItem) => ({
              ...txItem,
              value: bigIntParser(txItem.value),
              fees_paid: bigIntParser(txItem.fees_paid),
              block_signed_at: txItem.block_signed_at ? new Date(txItem.block_signed_at) : null,
              log_events: txItem.log_events ? txItem.log_events.map((logItem) => ({
                ...logItem,
                block_signed_at: logItem.block_signed_at ? new Date(logItem.block_signed_at) : null
              })) : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * Commonly used to fetch the earliest and latest transactions, and the transaction count for a wallet. Calculate the age of the wallet and the time it has been idle and quickly gain insights into their engagement with web3.
       *
       * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
       * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       * @param {GetTransactionSummaryQueryParamOpts} queryParamOpts
       *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
       *   - `withGas`: Include gas summary details. Additional charge of 1 credit when true. Response times may be impacted for wallets with millions of transactions.
       *
       */
      async getTransactionSummary(chainName, walletAddress, queryParamOpts) {
        const endpoint = endpointGenerator(`${chainName}/address/${walletAddress}/transactions_summary`, [
          {
            key: "quote-currency",
            value: queryParamOpts?.quoteCurrency
          },
          {
            key: "with-gas",
            value: queryParamOpts?.withGas
          }
        ]);
        const parseData = (data) => {
          if (data.data) {
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((txsItem) => ({
              ...txsItem,
              earliest_transaction: {
                ...txsItem.earliest_transaction,
                block_signed_at: txsItem?.earliest_transaction?.block_signed_at ? new Date(txsItem.earliest_transaction.block_signed_at) : null
              },
              latest_transaction: {
                ...txsItem.latest_transaction,
                block_signed_at: txsItem?.latest_transaction?.block_signed_at ? new Date(txsItem?.latest_transaction?.block_signed_at) : null
              }
              // ? API vs docs non-consistent
              // gas_summary: {
              //   ...txsItem.gas_summary,
              //   total_fees_paid: bigIntParser(
              //     txsItem.gas_summary.total_fees_paid
              //   ),
              // },
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
       * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       * @param {number} page - The requested page, 0-indexed.
       * @param {GetTransactionsForAddressV3QueryParamOpts} queryParamOpts
       *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
       *   - `noLogs`: Omit log events.
       *   - `blockSignedAtAsc`: Sort the transactions in ascending chronological order. By default, it's set to `false` and returns transactions in descending chronological order.
       *
       */
      async getTransactionsForAddressV3(chainName, walletAddress, page, queryParamOpts) {
        const searchParams = [
          {
            key: "quote-currency",
            value: queryParamOpts?.quoteCurrency
          },
          {
            key: "no-logs",
            value: queryParamOpts?.noLogs
          },
          {
            key: "block-signed-at-asc",
            value: queryParamOpts?.blockSignedAtAsc
          }
        ];
        const endpoint = endpointGenerator(`${chainName}/address/${walletAddress}/transactions_v3/page/${page}`, searchParams);
        const parseData = (data) => {
          if (data.data) {
            data.data.prev = data.data?.links?.prev ? async () => this.execution.execute(endpointGenerator(data.data?.links?.prev, searchParams), parseData) : null;
            data.data.next = data.data?.links?.next ? async () => this.execution.execute(endpointGenerator(data.data?.links?.next, searchParams), parseData) : null;
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((txItem) => ({
              ...txItem,
              value: bigIntParser(txItem.value),
              fees_paid: bigIntParser(txItem.fees_paid),
              block_signed_at: txItem.block_signed_at ? new Date(txItem.block_signed_at) : null,
              log_events: txItem.log_events ? txItem.log_events.map((logItem) => ({
                ...logItem,
                block_signed_at: logItem.block_signed_at ? new Date(logItem.block_signed_at) : null
              })) : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
      /**
       *
       * @param {Chain} chainName - The chain name eg: `eth-mainnet` or 1.
       * @param {string} walletAddress - The requested address. Passing in an `ENS`, `RNS`, `Lens Handle`, or an `Unstoppable Domain` resolves automatically.
       * @param {number} timeBucket - The 0-indexed 15-minute time bucket. E.g. 27 Feb 2023 05:23 GMT = 1677475383 (Unix time). 1677475383/900=1863861 timeBucket.
       * @param {GetTimeBucketTransactionsForAddressQueryParamOpts} queryParamOpts
       *   - `quoteCurrency`: The currency to convert. Supports `USD`, `CAD`, `EUR`, `SGD`, `INR`, `JPY`, `VND`, `CNY`, `KRW`, `RUB`, `TRY`, `NGN`, `ARS`, `AUD`, `CHF`, and `GBP`.
       *   - `noLogs`: Omit log events.
       *
       */
      async getTimeBucketTransactionsForAddress(chainName, walletAddress, timeBucket, queryParamOpts) {
        const searchParams = [
          {
            key: "quote-currency",
            value: queryParamOpts?.quoteCurrency
          },
          {
            key: "no-logs",
            value: queryParamOpts?.noLogs
          }
        ];
        const endpoint = endpointGenerator(`${chainName}/bulk/transactions/${walletAddress}/${timeBucket}`, searchParams);
        const parseData = (data) => {
          if (data.data) {
            data.data.prev = data.data?.links?.prev ? async () => this.execution.execute(endpointGenerator(data.data?.links?.prev, searchParams), parseData) : null;
            data.data.next = data.data?.links?.next ? async () => this.execution.execute(endpointGenerator(data.data?.links?.next, searchParams), parseData) : null;
            data.data.updated_at = data.data.updated_at ? new Date(data.data.updated_at) : null;
            data.data.items = data.data.items ? data.data.items.map((txItem) => ({
              ...txItem,
              value: bigIntParser(txItem.value),
              fees_paid: bigIntParser(txItem.fees_paid),
              block_signed_at: txItem.block_signed_at ? new Date(txItem.block_signed_at) : null,
              log_events: txItem.log_events ? txItem.log_events.map((logItem) => ({
                ...logItem,
                block_signed_at: logItem.block_signed_at ? new Date(logItem.block_signed_at) : null
              })) : null
            })) : null;
          }
          return data;
        };
        return await this.execution.execute(endpoint, parseData);
      }
    };
    async function debugOutput(settings, ...content) {
      if (settings.debug) {
        content.forEach((c) => {
          console.info("[DEBUG] |", c);
        });
      }
    }
    function getDefaultExportFromCjs(x) {
      return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, "default") ? x["default"] : x;
    }
    var Node = class {
      /// value;
      /// next;
      constructor(value) {
        this.value = value;
        this.next = void 0;
      }
    };
    var Queue$1 = class Queue {
      // TODO: Use private class fields when targeting Node.js 12.
      // #_head;
      // #_tail;
      // #_size;
      constructor() {
        this.clear();
      }
      enqueue(value) {
        const node = new Node(value);
        if (this._head) {
          this._tail.next = node;
          this._tail = node;
        } else {
          this._head = node;
          this._tail = node;
        }
        this._size++;
      }
      dequeue() {
        const current = this._head;
        if (!current) {
          return;
        }
        this._head = this._head.next;
        this._size--;
        return current.value;
      }
      clear() {
        this._head = void 0;
        this._tail = void 0;
        this._size = 0;
      }
      get size() {
        return this._size;
      }
      *[Symbol.iterator]() {
        let current = this._head;
        while (current) {
          yield current.value;
          current = current.next;
        }
      }
    };
    var yoctoQueue = Queue$1;
    var Queue = yoctoQueue;
    var pLimit = (concurrency) => {
      if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {
        throw new TypeError("Expected `concurrency` to be a number from 1 and up");
      }
      const queue = new Queue();
      let activeCount = 0;
      const next = () => {
        activeCount--;
        if (queue.size > 0) {
          queue.dequeue()();
        }
      };
      const run = async (fn, resolve3, ...args) => {
        activeCount++;
        const result = (async () => fn(...args))();
        resolve3(result);
        try {
          await result;
        } catch {
        }
        next();
      };
      const enqueue = (fn, resolve3, ...args) => {
        queue.enqueue(run.bind(null, fn, resolve3, ...args));
        (async () => {
          await Promise.resolve();
          if (activeCount < concurrency && queue.size > 0) {
            queue.dequeue()();
          }
        })();
      };
      const generator = (fn, ...args) => new Promise((resolve3) => {
        enqueue(fn, resolve3, ...args);
      });
      Object.defineProperties(generator, {
        activeCount: {
          get: () => activeCount
        },
        pendingCount: {
          get: () => queue.size
        },
        clearQueue: {
          value: () => {
            queue.clear();
          }
        }
      });
      return generator;
    };
    var pLimit_1 = pLimit;
    var pLimit$1 = /* @__PURE__ */ getDefaultExportFromCjs(pLimit_1);
    var Execution = class {
      constructor(settings, headers) {
        this.settings = settings;
        this.headers = headers;
        this.processes = pLimit$1(this.settings.threadCount ?? 2);
        this.maxRetries = settings.maxRetries ?? 2;
        this.retryDelay = settings.retryDelay ?? 1500;
        this.enableRetry = settings.enableRetry ?? true;
      }
      async execute(endpoint, parseData) {
        let retryCount = 0;
        let completed = false;
        while (!completed) {
          try {
            const startTime = /* @__PURE__ */ new Date();
            const response = await this.processes(() => fetch(endpoint, {
              headers: this.headers
            }));
            debugOutput(this.settings, `Request URL: ${response ? new URL(response.url) : endpoint} | Response code: ${response ? response.status : 429} | Response time: ${((/* @__PURE__ */ new Date()).getTime() - startTime.getTime()).toFixed(2)}ms`);
            if (response.status === null || response.status === 429) {
              throw new Error(`Received status code: ${response.status ?? 429}`);
            }
            const data = await response.json();
            if (data.error) {
              throw data;
            }
            const parsedData = parseData(data);
            completed = true;
            return {
              data: parsedData.data,
              error: false,
              error_code: null,
              error_message: null
            };
          } catch (error) {
            debugOutput(this.settings, `Request URL: ${endpoint} | Retry Enabled: ${this.enableRetry} | Retry Count: ${retryCount} | Max Retries: ${this.maxRetries} | Retry Delay: ${this.retryDelay}ms`, error);
            if (this.enableRetry && (error?.error_code === 429 || error?.cause?.code === 429)) {
              if (retryCount >= this.maxRetries) {
                completed = true;
                return {
                  data: null,
                  error: true,
                  error_code: 429,
                  error_message: `${this.maxRetries} retries exceeded`
                };
              } else {
                retryCount++;
                await new Promise((resolve3) => setTimeout(resolve3, this.retryDelay));
                completed = false;
              }
            } else {
              completed = true;
              return {
                data: null,
                error: true,
                error_code: error?.cause?.code || error?.error_code || 500,
                error_message: error?.cause?.message || error?.error_message || "Internal server error"
              };
            }
          }
        }
        return {
          data: null,
          error: true,
          error_code: 500,
          error_message: "Internal server error"
        };
      }
    };
    var _apiKeyV1Pattern = /^ckey_([a-f0-9]{27})$/;
    var _apiKeyV2Pattern = /^cqt_(wF|rQ)([bcdfghjkmpqrtvwxyBCDFGHJKMPQRTVWXY346789]{26})$/;
    var isValidApiKey = (apiKey) => {
      return _apiKeyV1Pattern.test(apiKey) || _apiKeyV2Pattern.test(apiKey);
    };
    var GoldRushClient = class {
      constructor(apiKey, settings = {}) {
        this.userAgent = `com.covalenthq.sdk.typescript/${version}`;
        const validKey = isValidApiKey(apiKey);
        if (!validKey) {
          throw {
            data: null,
            error: true,
            error_code: 401,
            error_message: "Invalid or missing API key (sign up at https://goldrush.dev/platform/apikey)"
          };
        }
        const execution = new Execution(settings, {
          Authorization: `Bearer ${apiKey}`,
          "X-Requested-With": settings.source ? `${settings.source} (${this.userAgent})` : this.userAgent
        });
        this.AllChainsService = new AllChainsService(execution);
        this.BalanceService = new BalanceService(execution);
        this.BaseService = new BaseService(execution);
        this.BitcoinService = new BitcoinService(execution);
        this.NftService = new NftService(execution);
        this.PricingService = new PricingService(execution);
        this.SecurityService = new SecurityService(execution);
        this.TransactionService = new TransactionService(execution);
      }
    };
    var DP = 20;
    var RM = 1;
    var MAX_DP = 1e6;
    var MAX_POWER = 1e6;
    var NE = -7;
    var PE = 21;
    var STRICT = false;
    var NAME = "[big.js] ";
    var INVALID2 = NAME + "Invalid ";
    var INVALID_DP = INVALID2 + "decimal places";
    var INVALID_RM = INVALID2 + "rounding mode";
    var DIV_BY_ZERO = NAME + "Division by zero";
    var P = {};
    var UNDEFINED = void 0;
    var NUMERIC = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;
    function _Big_() {
      function Big2(n) {
        var x = this;
        if (!(x instanceof Big2))
          return n === UNDEFINED ? _Big_() : new Big2(n);
        if (n instanceof Big2) {
          x.s = n.s;
          x.e = n.e;
          x.c = n.c.slice();
        } else {
          if (typeof n !== "string") {
            if (Big2.strict === true && typeof n !== "bigint") {
              throw TypeError(INVALID2 + "value");
            }
            n = n === 0 && 1 / n < 0 ? "-0" : String(n);
          }
          parse(x, n);
        }
        x.constructor = Big2;
      }
      Big2.prototype = P;
      Big2.DP = DP;
      Big2.RM = RM;
      Big2.NE = NE;
      Big2.PE = PE;
      Big2.strict = STRICT;
      Big2.roundDown = 0;
      Big2.roundHalfUp = 1;
      Big2.roundHalfEven = 2;
      Big2.roundUp = 3;
      return Big2;
    }
    function parse(x, n) {
      var e, i, nl;
      if (!NUMERIC.test(n)) {
        throw Error(INVALID2 + "number");
      }
      x.s = n.charAt(0) == "-" ? (n = n.slice(1), -1) : 1;
      if ((e = n.indexOf(".")) > -1)
        n = n.replace(".", "");
      if ((i = n.search(/e/i)) > 0) {
        if (e < 0)
          e = i;
        e += +n.slice(i + 1);
        n = n.substring(0, i);
      } else if (e < 0) {
        e = n.length;
      }
      nl = n.length;
      for (i = 0; i < nl && n.charAt(i) == "0"; )
        ++i;
      if (i == nl) {
        x.c = [x.e = 0];
      } else {
        for (; nl > 0 && n.charAt(--nl) == "0"; )
          ;
        x.e = e - i - 1;
        x.c = [];
        for (e = 0; i <= nl; )
          x.c[e++] = +n.charAt(i++);
      }
      return x;
    }
    function round(x, sd, rm, more) {
      var xc = x.c;
      if (rm === UNDEFINED)
        rm = x.constructor.RM;
      if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {
        throw Error(INVALID_RM);
      }
      if (sd < 1) {
        more = rm === 3 && (more || !!xc[0]) || sd === 0 && (rm === 1 && xc[0] >= 5 || rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED)));
        xc.length = 1;
        if (more) {
          x.e = x.e - sd + 1;
          xc[0] = 1;
        } else {
          xc[0] = x.e = 0;
        }
      } else if (sd < xc.length) {
        more = rm === 1 && xc[sd] >= 5 || rm === 2 && (xc[sd] > 5 || xc[sd] === 5 && (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) || rm === 3 && (more || !!xc[0]);
        xc.length = sd;
        if (more) {
          for (; ++xc[--sd] > 9; ) {
            xc[sd] = 0;
            if (sd === 0) {
              ++x.e;
              xc.unshift(1);
              break;
            }
          }
        }
        for (sd = xc.length; !xc[--sd]; )
          xc.pop();
      }
      return x;
    }
    function stringify(x, doExponential, isNonzero) {
      var e = x.e, s = x.c.join(""), n = s.length;
      if (doExponential) {
        s = s.charAt(0) + (n > 1 ? "." + s.slice(1) : "") + (e < 0 ? "e" : "e+") + e;
      } else if (e < 0) {
        for (; ++e; )
          s = "0" + s;
        s = "0." + s;
      } else if (e > 0) {
        if (++e > n) {
          for (e -= n; e--; )
            s += "0";
        } else if (e < n) {
          s = s.slice(0, e) + "." + s.slice(e);
        }
      } else if (n > 1) {
        s = s.charAt(0) + "." + s.slice(1);
      }
      return x.s < 0 && isNonzero ? "-" + s : s;
    }
    P.abs = function() {
      var x = new this.constructor(this);
      x.s = 1;
      return x;
    };
    P.cmp = function(y) {
      var isneg, x = this, xc = x.c, yc = (y = new x.constructor(y)).c, i = x.s, j = y.s, k = x.e, l = y.e;
      if (!xc[0] || !yc[0])
        return !xc[0] ? !yc[0] ? 0 : -j : i;
      if (i != j)
        return i;
      isneg = i < 0;
      if (k != l)
        return k > l ^ isneg ? 1 : -1;
      j = (k = xc.length) < (l = yc.length) ? k : l;
      for (i = -1; ++i < j; ) {
        if (xc[i] != yc[i])
          return xc[i] > yc[i] ^ isneg ? 1 : -1;
      }
      return k == l ? 0 : k > l ^ isneg ? 1 : -1;
    };
    P.div = function(y) {
      var x = this, Big2 = x.constructor, a = x.c, b = (y = new Big2(y)).c, k = x.s == y.s ? 1 : -1, dp = Big2.DP;
      if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
        throw Error(INVALID_DP);
      }
      if (!b[0]) {
        throw Error(DIV_BY_ZERO);
      }
      if (!a[0]) {
        y.s = k;
        y.c = [y.e = 0];
        return y;
      }
      var bl, bt, n, cmp, ri, bz = b.slice(), ai = bl = b.length, al = a.length, r = a.slice(0, bl), rl = r.length, q = y, qc = q.c = [], qi = 0, p = dp + (q.e = x.e - y.e) + 1;
      q.s = k;
      k = p < 0 ? 0 : p;
      bz.unshift(0);
      for (; rl++ < bl; )
        r.push(0);
      do {
        for (n = 0; n < 10; n++) {
          if (bl != (rl = r.length)) {
            cmp = bl > rl ? 1 : -1;
          } else {
            for (ri = -1, cmp = 0; ++ri < bl; ) {
              if (b[ri] != r[ri]) {
                cmp = b[ri] > r[ri] ? 1 : -1;
                break;
              }
            }
          }
          if (cmp < 0) {
            for (bt = rl == bl ? b : bz; rl; ) {
              if (r[--rl] < bt[rl]) {
                ri = rl;
                for (; ri && !r[--ri]; )
                  r[ri] = 9;
                --r[ri];
                r[rl] += 10;
              }
              r[rl] -= bt[rl];
            }
            for (; !r[0]; )
              r.shift();
          } else {
            break;
          }
        }
        qc[qi++] = cmp ? n : ++n;
        if (r[0] && cmp)
          r[rl] = a[ai] || 0;
        else
          r = [a[ai]];
      } while ((ai++ < al || r[0] !== UNDEFINED) && k--);
      if (!qc[0] && qi != 1) {
        qc.shift();
        q.e--;
        p--;
      }
      if (qi > p)
        round(q, p, Big2.RM, r[0] !== UNDEFINED);
      return q;
    };
    P.eq = function(y) {
      return this.cmp(y) === 0;
    };
    P.gt = function(y) {
      return this.cmp(y) > 0;
    };
    P.gte = function(y) {
      return this.cmp(y) > -1;
    };
    P.lt = function(y) {
      return this.cmp(y) < 0;
    };
    P.lte = function(y) {
      return this.cmp(y) < 1;
    };
    P.minus = P.sub = function(y) {
      var i, j, t, xlty, x = this, Big2 = x.constructor, a = x.s, b = (y = new Big2(y)).s;
      if (a != b) {
        y.s = -b;
        return x.plus(y);
      }
      var xc = x.c.slice(), xe = x.e, yc = y.c, ye = y.e;
      if (!xc[0] || !yc[0]) {
        if (yc[0]) {
          y.s = -b;
        } else if (xc[0]) {
          y = new Big2(x);
        } else {
          y.s = 1;
        }
        return y;
      }
      if (a = xe - ye) {
        if (xlty = a < 0) {
          a = -a;
          t = xc;
        } else {
          ye = xe;
          t = yc;
        }
        t.reverse();
        for (b = a; b--; )
          t.push(0);
        t.reverse();
      } else {
        j = ((xlty = xc.length < yc.length) ? xc : yc).length;
        for (a = b = 0; b < j; b++) {
          if (xc[b] != yc[b]) {
            xlty = xc[b] < yc[b];
            break;
          }
        }
      }
      if (xlty) {
        t = xc;
        xc = yc;
        yc = t;
        y.s = -y.s;
      }
      if ((b = (j = yc.length) - (i = xc.length)) > 0)
        for (; b--; )
          xc[i++] = 0;
      for (b = i; j > a; ) {
        if (xc[--j] < yc[j]) {
          for (i = j; i && !xc[--i]; )
            xc[i] = 9;
          --xc[i];
          xc[j] += 10;
        }
        xc[j] -= yc[j];
      }
      for (; xc[--b] === 0; )
        xc.pop();
      for (; xc[0] === 0; ) {
        xc.shift();
        --ye;
      }
      if (!xc[0]) {
        y.s = 1;
        xc = [ye = 0];
      }
      y.c = xc;
      y.e = ye;
      return y;
    };
    P.mod = function(y) {
      var ygtx, x = this, Big2 = x.constructor, a = x.s, b = (y = new Big2(y)).s;
      if (!y.c[0]) {
        throw Error(DIV_BY_ZERO);
      }
      x.s = y.s = 1;
      ygtx = y.cmp(x) == 1;
      x.s = a;
      y.s = b;
      if (ygtx)
        return new Big2(x);
      a = Big2.DP;
      b = Big2.RM;
      Big2.DP = Big2.RM = 0;
      x = x.div(y);
      Big2.DP = a;
      Big2.RM = b;
      return this.minus(x.times(y));
    };
    P.neg = function() {
      var x = new this.constructor(this);
      x.s = -x.s;
      return x;
    };
    P.plus = P.add = function(y) {
      var e, k, t, x = this, Big2 = x.constructor;
      y = new Big2(y);
      if (x.s != y.s) {
        y.s = -y.s;
        return x.minus(y);
      }
      var xe = x.e, xc = x.c, ye = y.e, yc = y.c;
      if (!xc[0] || !yc[0]) {
        if (!yc[0]) {
          if (xc[0]) {
            y = new Big2(x);
          } else {
            y.s = x.s;
          }
        }
        return y;
      }
      xc = xc.slice();
      if (e = xe - ye) {
        if (e > 0) {
          ye = xe;
          t = yc;
        } else {
          e = -e;
          t = xc;
        }
        t.reverse();
        for (; e--; )
          t.push(0);
        t.reverse();
      }
      if (xc.length - yc.length < 0) {
        t = yc;
        yc = xc;
        xc = t;
      }
      e = yc.length;
      for (k = 0; e; xc[e] %= 10)
        k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;
      if (k) {
        xc.unshift(k);
        ++ye;
      }
      for (e = xc.length; xc[--e] === 0; )
        xc.pop();
      y.c = xc;
      y.e = ye;
      return y;
    };
    P.pow = function(n) {
      var x = this, one = new x.constructor("1"), y = one, isneg = n < 0;
      if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {
        throw Error(INVALID2 + "exponent");
      }
      if (isneg)
        n = -n;
      for (; ; ) {
        if (n & 1)
          y = y.times(x);
        n >>= 1;
        if (!n)
          break;
        x = x.times(x);
      }
      return isneg ? one.div(y) : y;
    };
    P.prec = function(sd, rm) {
      if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
        throw Error(INVALID2 + "precision");
      }
      return round(new this.constructor(this), sd, rm);
    };
    P.round = function(dp, rm) {
      if (dp === UNDEFINED)
        dp = 0;
      else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {
        throw Error(INVALID_DP);
      }
      return round(new this.constructor(this), dp + this.e + 1, rm);
    };
    P.sqrt = function() {
      var r, c, t, x = this, Big2 = x.constructor, s = x.s, e = x.e, half = new Big2("0.5");
      if (!x.c[0])
        return new Big2(x);
      if (s < 0) {
        throw Error(NAME + "No square root");
      }
      s = Math.sqrt(x + "");
      if (s === 0 || s === 1 / 0) {
        c = x.c.join("");
        if (!(c.length + e & 1))
          c += "0";
        s = Math.sqrt(c);
        e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);
        r = new Big2((s == 1 / 0 ? "5e" : (s = s.toExponential()).slice(0, s.indexOf("e") + 1)) + e);
      } else {
        r = new Big2(s + "");
      }
      e = r.e + (Big2.DP += 4);
      do {
        t = r;
        r = half.times(t.plus(x.div(t)));
      } while (t.c.slice(0, e).join("") !== r.c.slice(0, e).join(""));
      return round(r, (Big2.DP -= 4) + r.e + 1, Big2.RM);
    };
    P.times = P.mul = function(y) {
      var c, x = this, Big2 = x.constructor, xc = x.c, yc = (y = new Big2(y)).c, a = xc.length, b = yc.length, i = x.e, j = y.e;
      y.s = x.s == y.s ? 1 : -1;
      if (!xc[0] || !yc[0]) {
        y.c = [y.e = 0];
        return y;
      }
      y.e = i + j;
      if (a < b) {
        c = xc;
        xc = yc;
        yc = c;
        j = a;
        a = b;
        b = j;
      }
      for (c = new Array(j = a + b); j--; )
        c[j] = 0;
      for (i = b; i--; ) {
        b = 0;
        for (j = a + i; j > i; ) {
          b = c[j] + yc[i] * xc[j - i - 1] + b;
          c[j--] = b % 10;
          b = b / 10 | 0;
        }
        c[j] = b;
      }
      if (b)
        ++y.e;
      else
        c.shift();
      for (i = c.length; !c[--i]; )
        c.pop();
      y.c = c;
      return y;
    };
    P.toExponential = function(dp, rm) {
      var x = this, n = x.c[0];
      if (dp !== UNDEFINED) {
        if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
          throw Error(INVALID_DP);
        }
        x = round(new x.constructor(x), ++dp, rm);
        for (; x.c.length < dp; )
          x.c.push(0);
      }
      return stringify(x, true, !!n);
    };
    P.toFixed = function(dp, rm) {
      var x = this, n = x.c[0];
      if (dp !== UNDEFINED) {
        if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
          throw Error(INVALID_DP);
        }
        x = round(new x.constructor(x), dp + x.e + 1, rm);
        for (dp = dp + x.e + 1; x.c.length < dp; )
          x.c.push(0);
      }
      return stringify(x, false, !!n);
    };
    P[Symbol.for("nodejs.util.inspect.custom")] = P.toJSON = P.toString = function() {
      var x = this, Big2 = x.constructor;
      return stringify(x, x.e <= Big2.NE || x.e >= Big2.PE, !!x.c[0]);
    };
    P.toNumber = function() {
      var n = Number(stringify(this, true, true));
      if (this.constructor.strict === true && !this.eq(n.toString())) {
        throw Error(NAME + "Imprecise conversion");
      }
      return n;
    };
    P.toPrecision = function(sd, rm) {
      var x = this, Big2 = x.constructor, n = x.c[0];
      if (sd !== UNDEFINED) {
        if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
          throw Error(INVALID2 + "precision");
        }
        x = round(new Big2(x), sd, rm);
        for (; x.c.length < sd; )
          x.c.push(0);
      }
      return stringify(x, sd <= x.e || x.e <= Big2.NE || x.e >= Big2.PE, !!n);
    };
    P.valueOf = function() {
      var x = this, Big2 = x.constructor;
      if (Big2.strict === true) {
        throw Error(NAME + "valueOf disallowed");
      }
      return stringify(x, x.e <= Big2.NE || x.e >= Big2.PE, true);
    };
    var Big = _Big_();
    var calculatePrettyBalance = (value, decimals = 18, roundOff = true, precision = 0) => {
      const bigDecimalValue = new Big(value.toString());
      const bigDecimalExpo = new Big(Math.pow(10, decimals).toString());
      const calculated = bigDecimalValue.div(bigDecimalExpo);
      if (decimals === 0 || !roundOff) {
        return calculated.toString();
      }
      const decimalFixed = precision || (calculated.lt(100) ? 6 : 2);
      return calculated.toFixed(decimalFixed);
    };
    var LESS_THAN_ZERO = "0.01";
    var ZERO = "0.00";
    var currencyMap = {
      USD: "$",
      CAD: "CA$",
      EUR: "\u20AC",
      SGD: "S$",
      INR: "\u20B9",
      JPY: "\xA5",
      VND: "\u20AB",
      CNY: "CN\xA5",
      KRW: "\u20A9",
      RUB: "\u20BD",
      TRY: "\u20BA",
      NGN: "\u20A6",
      ARS: "ARS",
      AUD: "A$",
      CHF: "CHF",
      GBP: "\xA3"
    };
    var prettifyCurrency = (value, decimals = 2, currency = "USD", ignoreSmallValue = false, ignoreMinus = true, ignoreZero = false) => {
      let numValue = Number(value);
      let minus = "";
      let currencySuffix = "";
      if (!ignoreMinus && numValue < 0) {
        numValue = Math.abs(numValue);
        minus = "-";
      }
      const currencySymbol = currencyMap[currency] ?? "$";
      if (numValue === 0 || isNaN(numValue)) {
        return ignoreZero ? `<${currencySymbol}${LESS_THAN_ZERO}` : `${currencySymbol}${ZERO}`;
      }
      if (numValue < 0.01 && ignoreSmallValue) {
        return `<${currencySymbol}${LESS_THAN_ZERO}`;
      }
      if (numValue > 999999999) {
        numValue /= 1e9;
        currencySuffix = "B";
      } else if (numValue > 999999) {
        numValue /= 1e6;
        currencySuffix = "M";
      }
      const factor = Math.pow(10, decimals);
      numValue = Math.floor(numValue * factor) / factor;
      const formatter = new Intl.NumberFormat("en-US", {
        style: "currency",
        currency,
        maximumFractionDigits: decimals,
        currencyDisplay: "symbol"
      });
      const formattedValue = formatter.format(numValue).replace(new RegExp(`${currency}\\s?`), currencySymbol);
      return minus + formattedValue + currencySuffix;
    };
    var months = [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December"
    ];
    var timestampParser = (timestamp, type) => {
      const _unix = new Date(timestamp);
      switch (type) {
        case "descriptive": {
          const _minutes = _unix.getMinutes();
          const _hours = _unix.getHours();
          const _seconds = _unix.getSeconds();
          const _parsedSeconds = `${_seconds <= 9 ? "0" : ""}${_seconds}`;
          const _parsedMinutes = `${_minutes <= 9 ? "0" : ""}${_minutes}`;
          const _parsedHours = `${_hours <= 9 ? "0" : ""}${_hours}`;
          return `${months[_unix.getMonth()]} ${_unix.getDate()} ${_unix.getFullYear()} at ${_parsedHours}:${_parsedMinutes}:${_parsedSeconds}`;
        }
        case "DD MMM YY": {
          const day = _unix.getDate().toString().padStart(2, "0");
          const month = months[_unix.getMonth()].substring(0, 3);
          const year = _unix.getFullYear();
          return `${day} ${month} ${year}`;
        }
        case "relative": {
          const currentTime = /* @__PURE__ */ new Date();
          const unixTime = new Date(_unix);
          const timeDifference = currentTime.getTime() - unixTime.getTime();
          const secondsDifference = Math.floor(timeDifference / 1e3);
          const minutesDifference = Math.floor(secondsDifference / 60);
          const hoursDifference = Math.floor(minutesDifference / 60);
          const daysDifference = Math.floor(hoursDifference / 24);
          const monthsDifference = Math.floor(daysDifference / 30);
          const yearsDifference = Math.floor(daysDifference / 365);
          if (yearsDifference > 0) {
            return `${yearsDifference} year${yearsDifference > 1 ? "s" : ""} ago`;
          } else if (monthsDifference > 0) {
            return `${monthsDifference} month${monthsDifference > 1 ? "s" : ""} ago`;
          } else if (daysDifference > 0) {
            return `${daysDifference} day${daysDifference > 1 ? "s" : ""} ago`;
          } else if (hoursDifference > 0) {
            return `${hoursDifference} hour${hoursDifference > 1 ? "s" : ""} ago`;
          } else if (minutesDifference > 0) {
            return `${minutesDifference} minute${minutesDifference > 1 ? "s" : ""} ago`;
          } else if (secondsDifference > 0) {
            return `${secondsDifference} second${secondsDifference > 1 ? "s" : ""} ago`;
          } else {
            return `just now`;
          }
        }
        case "YYYY-MM-DD": {
          const offsetMinutes = _unix.getTimezoneOffset();
          const offsetMilliseconds = offsetMinutes * 60 * 1e3;
          const utcTime = _unix.getTime() + offsetMilliseconds;
          const _utc_unix = new Date(utcTime);
          const year = _utc_unix.getFullYear();
          const month = String(_utc_unix.getMonth() + 1).padStart(2, "0");
          const day = String(_utc_unix.getDate()).padStart(2, "0");
          return `${year}-${month}-${day}`;
        }
        default: {
          return _unix.toISOString();
        }
      }
    };
    exports2.GoldRushClient = GoldRushClient;
    exports2.bigIntParser = bigIntParser;
    exports2.calculatePrettyBalance = calculatePrettyBalance;
    exports2.isValidApiKey = isValidApiKey;
    exports2.prettifyCurrency = prettifyCurrency;
    exports2.timestampParser = timestampParser;
  }
});

// node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/tools/goldrush/goldrush.js
var require_goldrush = __commonJS({
  "node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/tools/goldrush/goldrush.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BaseGoldRushTool = void 0;
    var tool_1 = require_tool();
    var client_sdk_1 = require_cjs2();
    var BaseGoldRushTool = class extends tool_1.Tool {
      client;
      constructor(params) {
        if (!process.env["GOLDRUSH_API_KEY"]) {
          throw new Error("GOLDRUSH_API_KEY is not set in the env");
        }
        super({
          provider: params.provider,
          name: params.name,
          description: params.description,
          parameters: params.parameters,
          execute: params.execute
        });
        this.client = new client_sdk_1.GoldRushClient(process.env["GOLDRUSH_API_KEY"]);
      }
      static bigIntSerializer(data) {
        return JSON.parse(JSON.stringify(data, (_key, value) => {
          if (typeof value === "bigint") {
            return value.toString();
          }
          return value;
        }));
      }
    };
    exports2.BaseGoldRushTool = BaseGoldRushTool;
  }
});

// node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/tools/goldrush/historical-token-price.js
var require_historical_token_price = __commonJS({
  "node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/tools/goldrush/historical-token-price.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HistoricalTokenPriceTool = void 0;
    var goldrush_1 = require_goldrush();
    var client_sdk_1 = require_cjs2();
    var zod_1 = require_lib();
    var HistoricalTokenPriceSchema = zod_1.z.object({
      chain: zod_1.z.enum(Object.values(client_sdk_1.ChainName)),
      contractAddress: zod_1.z.string(),
      timeframe: zod_1.z.enum(["1h", "24h", "7d", "30d"])
    });
    var HistoricalTokenPriceTool = class extends goldrush_1.BaseGoldRushTool {
      constructor(provider) {
        super({
          provider,
          name: "historical-token-price",
          description: "Fetch historical token prices for a specific token on a blockchain",
          parameters: HistoricalTokenPriceSchema,
          execute: async ({ chain, contractAddress, timeframe }) => {
            let from = null;
            const formatDate = (date) => {
              return date.toISOString().split("T")[0];
            };
            switch (timeframe) {
              case "1h":
                from = formatDate(new Date(Date.now() - 1e3 * 60 * 60));
                break;
              case "24h":
                from = formatDate(new Date(Date.now() - 1e3 * 60 * 60 * 24));
                break;
              case "7d":
                from = formatDate(new Date(Date.now() - 1e3 * 60 * 60 * 24 * 7));
                break;
              case "30d":
                from = formatDate(new Date(Date.now() - 1e3 * 60 * 60 * 24 * 30));
                break;
            }
            const prices = await this.client.PricingService.getTokenPrices(chain, "USD", contractAddress, {
              from,
              to: formatDate(new Date(Date.now()))
            });
            if (prices.error) {
              throw new Error(prices.error_message);
            }
            return goldrush_1.BaseGoldRushTool.bigIntSerializer(prices.data ?? []);
          }
        });
      }
    };
    exports2.HistoricalTokenPriceTool = HistoricalTokenPriceTool;
  }
});

// node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/tools/goldrush/nft-balances.js
var require_nft_balances = __commonJS({
  "node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/tools/goldrush/nft-balances.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NFTBalancesTool = void 0;
    var goldrush_1 = require_goldrush();
    var client_sdk_1 = require_cjs2();
    var zod_1 = require_lib();
    var NFTBalancesSchema = zod_1.z.object({
      chain: zod_1.z.enum(Object.values(client_sdk_1.ChainName)),
      address: zod_1.z.string()
    });
    var NFTBalancesTool = class extends goldrush_1.BaseGoldRushTool {
      constructor(provider) {
        super({
          provider,
          name: "nft-balances",
          description: "Fetch NFT balances for a wallet address on a specific blockchain",
          parameters: NFTBalancesSchema,
          execute: async ({ address, chain }) => {
            const nfts = await this.client.NftService.getNftsForAddress(chain, address);
            if (nfts.error) {
              throw new Error(nfts.error_message);
            }
            return goldrush_1.BaseGoldRushTool.bigIntSerializer(nfts.data.items ?? []);
          }
        });
      }
    };
    exports2.NFTBalancesTool = NFTBalancesTool;
  }
});

// node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/tools/goldrush/token-balances.js
var require_token_balances = __commonJS({
  "node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/tools/goldrush/token-balances.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TokenBalancesTool = void 0;
    var goldrush_1 = require_goldrush();
    var client_sdk_1 = require_cjs2();
    var zod_1 = require_lib();
    var TokenBalancesSchema = zod_1.z.object({
      chain: zod_1.z.enum(Object.values(client_sdk_1.ChainName)),
      address: zod_1.z.string()
    });
    var TokenBalancesTool = class extends goldrush_1.BaseGoldRushTool {
      constructor(provider) {
        super({
          provider,
          name: "token-balances",
          description: "Fetch token balances for a wallet address on a specific blockchain",
          parameters: TokenBalancesSchema,
          execute: async ({ address, chain }) => {
            const balances = await this.client.BalanceService.getTokenBalancesForWalletAddress(chain, address);
            if (balances.error) {
              throw new Error(balances.error_message);
            }
            return goldrush_1.BaseGoldRushTool.bigIntSerializer(balances.data.items ?? []);
          }
        });
      }
    };
    exports2.TokenBalancesTool = TokenBalancesTool;
  }
});

// node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/tools/goldrush/transactions.js
var require_transactions = __commonJS({
  "node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/tools/goldrush/transactions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TransactionsTool = void 0;
    var goldrush_1 = require_goldrush();
    var client_sdk_1 = require_cjs2();
    var zod_1 = require_lib();
    var TransactionsSchema = zod_1.z.object({
      chain: zod_1.z.enum(Object.values(client_sdk_1.ChainName)),
      address: zod_1.z.string()
    });
    var TransactionsTool = class extends goldrush_1.BaseGoldRushTool {
      constructor(provider) {
        super({
          provider,
          name: "transactions",
          description: "Fetch transactions for a wallet address on a specific blockchain",
          parameters: TransactionsSchema,
          execute: async ({ address, chain }) => {
            const txs = await this.client.TransactionService.getAllTransactionsForAddressByPage(chain, address, {
              noLogs: true,
              withSafe: false
            });
            if (txs.error) {
              throw new Error(txs.error_message);
            }
            return goldrush_1.BaseGoldRushTool.bigIntSerializer(txs.data.items ?? []);
          }
        });
      }
    };
    exports2.TransactionsTool = TransactionsTool;
  }
});

// node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/tools/goldrush/index.js
var require_goldrush2 = __commonJS({
  "node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/tools/goldrush/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_goldrush(), exports2);
    __exportStar(require_historical_token_price(), exports2);
    __exportStar(require_nft_balances(), exports2);
    __exportStar(require_token_balances(), exports2);
    __exportStar(require_transactions(), exports2);
  }
});

// node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/tools/tool.types.js
var require_tool_types = __commonJS({
  "node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/tools/tool.types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

// node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/tools/index.js
var require_tools2 = __commonJS({
  "node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/tools/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_goldrush2(), exports2);
    __exportStar(require_tool(), exports2);
    __exportStar(require_tool_types(), exports2);
  }
});

// node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/zee/zee.js
var require_zee = __commonJS({
  "node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/zee/zee.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ZeeWorkflow = void 0;
    var __1 = require_dist9();
    var agent_1 = require_agent2();
    var base_1 = require_base();
    var zod_1 = require_lib();
    var ZeeWorkflow = class extends base_1.Base {
      agents = {};
      defaultAgents = {};
      addedAgents = {};
      context = [];
      actionQueue = [];
      maxIterations = 50;
      temperature = 0.5;
      goal;
      constructor({ agents, model, goal, config }) {
        super("zee");
        console.log("\n\u256D\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500");
        console.log("\u2502 \u{1F680} Initializing ZeeWorkflow");
        console.log(`\u2502 \u{1F3AF} Goal: ${goal}`);
        console.log("\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500");
        if (config?.maxIterations) {
          this.maxIterations = config.maxIterations;
        }
        if (config?.temperature !== void 0) {
          if (config.temperature >= 0 && config.temperature <= 1) {
            this.temperature = config.temperature;
          } else {
            throw new Error("Invalid temperature. Must be between 0 and 1.");
          }
        }
        this.goal = goal;
        this.context.push((0, __1.userMessage)(goal));
        const plannerAgent = new agent_1.Agent({
          name: "planner",
          description: `You are a task planner that wants to complete the user's goal - "${goal}".`,
          instructions: [
            "Plan the user's goal into smaller sequential tasks.",
            "Do NOT create a task that is not directly related to the user's goal.",
            "Do NOT create a final compilation task.",
            `Return a JSON array of tasks, where each task has:
                    - instructions: array of instructions for completing the task
                    - attachments: array of attachments items, each being an array of objects with {type: 'image', image: url} or {type: 'file', data: url, mimeType: mimeType}
                    - dependencies: array of strings describing what this task needs from other tasks
                    Example response format:
                    ${JSON.stringify([
              {
                instructions: ["Analyze the logo design"],
                attachments: [
                  [
                    {
                      type: "image",
                      image: "https://example.com/logo.png"
                    }
                  ]
                ],
                dependencies: []
              },
              {
                instructions: [
                  "Write brand guidelines based on logo analysis"
                ],
                attachments: [],
                dependencies: [
                  "Needs logo analysis to write guidelines"
                ]
              }
            ], null, 2)}`,
            "Return ONLY the JSON array, no other text"
          ],
          model,
          temperature: this.temperature
        });
        const routerAgent = new agent_1.Agent({
          name: "router",
          description: "You coordinate information flow between agents and assign tasks to achieve the user's goal.",
          instructions: [],
          model,
          tools: {
            executeAgent: new __1.Tool({
              name: "execute agent",
              description: "Get information from a single agent",
              parameters: zod_1.z.object({
                agentName: zod_1.z.string(),
                tasks: zod_1.z.array(zod_1.z.union([
                  zod_1.z.string(),
                  zod_1.z.array(zod_1.z.union([
                    zod_1.z.object({
                      type: zod_1.z.literal("image"),
                      image: zod_1.z.string(),
                      mimeType: zod_1.z.string().optional()
                    }),
                    zod_1.z.object({
                      type: zod_1.z.literal("file"),
                      data: zod_1.z.string(),
                      mimeType: zod_1.z.string()
                    })
                  ]))
                ]))
              }),
              execute: async ({ agentName, tasks }) => {
                const agent = this.getAgent(agentName);
                if (!agent) {
                  throw new Error(`Agent '${agentName}' not found. Available agents: '${Object.keys(this.addedAgents).join("', '")}'.`);
                }
                const response = await agent.generate({
                  messages: tasks.map(__1.userMessage)
                });
                return response.value;
              },
              provider: model.provider
            })
          },
          temperature: this.temperature
        });
        const endgameAgent = new agent_1.Agent({
          name: "endgame",
          description: "You conclude the workflow based on all completed tasks.",
          instructions: [
            "Review all completed tasks and compile in a single response.",
            "Ensure the response addresses the original goal."
          ],
          model,
          temperature: this.temperature
        });
        [plannerAgent, routerAgent, endgameAgent].forEach((agent) => {
          if (!this.defaultAgents[agent.name]) {
            this.defaultAgents[agent.name] = agent;
          } else {
            throw new Error(`Agent '${agent.name}' already exists`);
          }
        });
        agents.forEach((agent) => {
          if (!this.addedAgents[agent.name]) {
            this.addedAgents[agent.name] = agent;
          } else {
            throw new Error(`Agent '${agent.name}' already exists`);
          }
        });
        [
          ...Object.values(this.defaultAgents),
          ...Object.values(this.addedAgents)
        ].forEach((agent) => {
          if (!this.agents[agent.name]) {
            this.agents[agent.name] = agent;
          } else {
            throw new Error(`Agent '${agent.name}' already exists`);
          }
        });
      }
      getAgent(agentName) {
        const maybeAgent = this.agents[agentName];
        if (maybeAgent) {
          return maybeAgent;
        }
        throw new Error(`Agent '${agentName}' not found. Available agents: ${Object.keys(this.agents).join(", ")}.`);
      }
      parseTasks(response) {
        console.log("\n\u{1F4DD} Parsed Tasks");
        try {
          const tasks = JSON.parse(response);
          if (!Array.isArray(tasks)) {
            throw new Error("'planner' response must be an array");
          }
          console.log(`
\u{1F50D} Found ${tasks.length} tasks to process
`);
          tasks.forEach((task, index) => {
            if (!task.agentName || !Array.isArray(task.instructions)) {
              throw new Error(`Invalid task format at index ${index}`);
            }
            console.log(`
\u256D\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500`);
            console.log(`\u2502 \u{1F4CB} TASK ${index + 1} of ${tasks.length}: Assigned to '${task.agentName}'`);
            console.log(`\u251C\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500`);
            console.log(`\u2502 \u{1F4DD} Instructions:`);
            task.instructions.forEach((instruction, i) => {
              console.log(`\u2502   ${i + 1}. ${instruction}`);
            });
            if (task.dependencies.length) {
              console.log(`\u2502 \u{1F504} Dependencies:`);
              task.dependencies.forEach((dep, i) => {
                console.log(`\u2502   ${i + 1}. Needs input from '${dep.agentName}': "${dep.task}"`);
              });
            }
            if (task.attachments.length) {
              console.log(`\u2502 \u{1F4CE} Attachments:`);
              task.attachments.forEach((items, i) => {
                items.forEach((item, j) => {
                  const typeStr = item.type;
                  const contentStr = item.image || item.data;
                  const contentPreview = String(contentStr).substring(0, 60);
                  console.log(`\u2502   ${i + 1}.${j + 1} ${typeStr}: ${contentPreview}${String(contentStr).length > 60 ? "..." : ""}`);
                });
              });
            }
            console.log(`\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500`);
            if (task.attachments && !Array.isArray(task.attachments)) {
              throw new Error(`Invalid attachments format at index ${index}`);
            }
          });
          return tasks;
        } catch (error) {
          console.error("\n\u274C Error parsing 'planner' response:", error);
          console.log("Raw response:", response);
          throw new Error(`Failed to parse 'planner' response: ${error instanceof Error ? error.message : String(error)}`);
        }
      }
      async processActionItem(action) {
        console.log("\n\u{1F4E8} Processing action:", {
          type: action.type,
          from: action.from,
          to: action.to
        });
        if (action.metadata?.isTaskComplete) {
          switch (action.type) {
            case "complete": {
              console.log(`
\u2705 Task completed by: '${action.from}'`);
              break;
            }
            case "response": {
              console.log(`
\u2611\uFE0F Followup task completed by: '${action.from}'`);
              break;
            }
          }
          this.context.push({
            role: action.from,
            content: action.content
          });
          console.log("\n\u{1F4DD} Added to context");
          return;
        }
        try {
          const targetAgent = this.getAgent(action.to);
          console.log("\n\u{1F4E6} Current context:", this.context.length);
          const relevantContext = (action.to === "router" ? action.type === "followup" ? this.context.map((ctx) => `${ctx.role}: ${ctx.content}`).join("\n") : this.context.filter((ctx) => ctx.role !== "user").map((ctx) => `${ctx.role}: ${ctx.content}`).join("\n") : this.context.filter((ctx) => (action.metadata?.dependencies || []).some((dep) => dep.agentName === ctx.role) || ctx.role === "user").map((ctx) => `${ctx.role}: ${ctx.content}`).join("\n")) || null;
          console.log(`
\u{1F50D} Filtered relevant context for '${action.to}'`);
          console.log("\n\u{1F4E4} Sending information:", {
            relevantContext,
            content: action.content
          });
          console.log(`
\u{1F4AD} '${action.to}' thinking...`);
          const messages = [];
          if (action.to !== "router") {
            messages.push((0, __1.systemMessage)(`You have to:
                            1. Complete your task by providing an answer ONLY for the 'Current task' from the context.
                            2. If the answer in not in the context, try to avoid asking for more information.
                            3. If you ABSOLUTELY need additional information to complete your task, request more information by asking a question

                            Instructions for responding:
                            - If you need more information, start with "${__1.ZEEActionResponseType.FOLLOWUP}" followed by your question
                            - If this is your answer, start with "${__1.ZEEActionResponseType.COMPLETE}" followed by your response.`));
          } else if (action.type === "followup") {
            messages.push((0, __1.systemMessage)(`You're handling a followup question from an agent who needs more information to complete their task.
                        
                        ${action.metadata?.originalFrom ? `Question from: '${action.metadata.originalFrom}'` : ""}
                        ${action.metadata?.originalTask ? `
Original task: ${action.metadata.originalTask}` : ""}
                        
                        You have access to the COMPLETE context of all previous communications between agents.
                        Use this full context to provide the most accurate and helpful answer.
                        
                        Your job is to provide a direct, helpful answer based on the complete context and your knowledge.
                        Be specific and thorough in your response, as the agent is relying on your expertise.
                        
                        Start your response with "${__1.ZEEActionResponseType.ANSWER}" followed by your answer.
                        Example: "${__1.ZEEActionResponseType.ANSWER} The script should use standard screenplay format."
                        `));
          }
          messages.push((0, __1.userMessage)(`${relevantContext ? `Relevant context -> ${relevantContext}` : ""}
                    
Current task -> ${action.content}`));
          if (action.metadata?.attachments?.length) {
            messages.push(...action.metadata.attachments.map(__1.userMessage));
          }
          const response = await targetAgent.generate({ messages });
          const responseContent = response.value;
          this.processAgentResponse(responseContent, action);
        } catch (error) {
          console.error(`
\u274C Error processing action:`, error);
          if (error instanceof Error && error.message.includes("not found")) {
            console.error(`
\u274C Agent '${action.to}' not found. Available agents: ${Object.keys(this.agents).join(", ")}`);
            if (action.type === "followup" && action.to !== "router") {
              console.log(`
\u26A0\uFE0F Redirecting followup to router instead of invalid agent '${action.to}'`);
              const redirectAction = {
                ...action,
                to: "router",
                content: `${action.content}

NOTE: This was originally directed to '${action.to}' but that agent doesn't exist. Please handle this followup request.`
              };
              this.actionQueue.unshift(redirectAction);
              return;
            }
          }
          this.context.push({
            role: "error",
            content: `Error in communication between ${action.from} -> ${action.to}: ${error instanceof Error ? error.message : String(error)}`
          });
        }
      }
      processAgentResponse(responseContent, action) {
        if (responseContent.startsWith(__1.ZEEActionResponseType.FOLLOWUP)) {
          const infoContent = responseContent.replace(__1.ZEEActionResponseType.FOLLOWUP, "").trim();
          console.log(`
\u256D\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500`);
          console.log(`\u2502 \u2753 '${action.to}' asked a followup:`);
          console.log(`\u2502 \u{1F50D} "${infoContent}"`);
          console.log(`\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500`);
          const dependencyInfo = action.metadata?.dependencies ? `

Context: Agent has dependencies on: ${action.metadata.dependencies.map((d) => d.agentName).join(", ")}` : "\n\nContext: Agent has no explicit dependencies";
          const enrichedContent = `${infoContent}${dependencyInfo}`;
          const infoResponse = {
            type: "followup",
            from: action.to,
            to: "router",
            content: enrichedContent,
            metadata: {
              originalTask: action.content,
              originalFrom: action.from
            }
          };
          this.actionQueue.unshift(infoResponse);
          console.log(`
\u{1F504} Followup chain: '${action.to}' \u2192 router \u2192 '${action.to}'`);
        } else if (action.to === "router" && action.type === "followup") {
          let answerContent = responseContent;
          if (!responseContent.startsWith(__1.ZEEActionResponseType.ANSWER)) {
            console.log(`
\u26A0\uFE0F 'Router' response missing ${__1.ZEEActionResponseType.ANSWER} prefix, treating as direct answer`);
          } else {
            answerContent = responseContent.replace(__1.ZEEActionResponseType.ANSWER, "").trim();
          }
          console.log(`
\u256D\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500`);
          console.log(`\u2502 \u{1F4DD} 'Router' answered:`);
          console.log(`\u2502 \u{1F4AC} "${answerContent.substring(0, 100)}${answerContent.length > 100 ? "..." : ""}"`);
          console.log(`\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500`);
          const answerResponse = {
            type: "response",
            from: "router",
            to: action.from,
            content: answerContent,
            metadata: {
              isTaskComplete: true
            }
          };
          if (action.metadata?.originalFrom && action.metadata?.originalTask) {
            const originalQuestion = action.content?.split("\n\nContext:")?.[0]?.trim() || "details about characters";
            const originalTask = {
              type: "request",
              from: "router",
              to: action.from,
              content: `${action.metadata.originalTask}

You previously asked: "${originalQuestion}"

Answer from router: ${answerContent}

Please complete your task with this information.`,
              metadata: {
                dependencies: action.metadata.dependencies,
                attachments: action.metadata.attachments
              }
            };
            this.actionQueue.unshift(originalTask);
          }
          this.actionQueue.unshift(answerResponse);
          console.log(`
\u{1F504} Answer being sent: 'router' \u2192 '${action.from}'`);
        } else if (responseContent.startsWith(__1.ZEEActionResponseType.COMPLETE)) {
          const completeContent = responseContent.replace(__1.ZEEActionResponseType.COMPLETE, "").trim();
          console.log(`
\u256D\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500`);
          console.log(`\u2502 \u2705 '${action.to}' completed task:`);
          console.log(`\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500`);
          const completeAction = {
            type: "complete",
            from: action.to,
            to: action.from,
            content: completeContent,
            metadata: {
              isTaskComplete: true
            }
          };
          this.actionQueue.unshift(completeAction);
        } else {
          console.log(`
\u256D\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500`);
          console.log(`\u2502 \u26A0\uFE0F Response from '${action.to}' doesn't use expected format:`);
          console.log(`\u2502 \u{1F50D} "${responseContent.substring(0, 100)}${responseContent.length > 100 ? "..." : ""}"`);
          console.log(`\u2502 \u{1F4CC} Treating as complete response`);
          console.log(`\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500`);
          const completeAction = {
            type: "complete",
            from: action.to,
            to: action.from,
            content: responseContent,
            metadata: {
              isTaskComplete: true
            }
          };
          this.actionQueue.unshift(completeAction);
        }
      }
      async run() {
        console.log("\n\u256D\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500");
        console.log("\u2502 \u{1F3AC} Starting workflow execution");
        console.log("\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500");
        console.log("\n\u{1F4CB} Getting tasks from 'planner'...");
        const plannerResponse = await this.getAgent("planner").generate({
          messages: [(0, __1.userMessage)(this.goal)]
        });
        const rawTasks = JSON.parse(plannerResponse.value);
        console.log("\n\u{1F4CB} Assigning agents to tasks via 'router'...");
        const routerResponse = await this.getAgent("router").generate({
          messages: [
            (0, __1.systemMessage)(`The available agents are: ${JSON.stringify(Object.values(this.addedAgents).map(({ name, description, instructions }) => ({
              name,
              description,
              instructions
            })))}
                    For each task:
                    1. Analyze the task requirements
                    2. Select the most suitable agent based on their name, description, and instructions
                    3. Convert the dependencies from string[] to {agentName: string, task: string}[]:
                       - For each dependency, determine which agent should handle it
                       - Create objects with "agentName" and "task" fields instead of string dependencies
                    4. Return a JSON array where each item includes the original task data plus:
                       - agentName: string (the name of the chosen agent)
                       - dependencies: the restructured dependencies array with objects
                    5. Reorder the tasks based on the dependencies for easier processing
                    
                    IMPORTANT: Return ONLY the JSON array, no other text`),
            (0, __1.userMessage)(JSON.stringify(rawTasks))
          ]
        });
        const tasks = this.parseTasks(routerResponse.value);
        tasks.forEach((task) => {
          this.actionQueue.push({
            type: "request",
            from: "router",
            to: task.agentName,
            content: task.instructions.join("\n"),
            metadata: {
              dependencies: task.dependencies,
              attachments: task.attachments
            }
          });
        });
        let iterationCount = 0;
        while (this.actionQueue.length > 0 && iterationCount < this.maxIterations) {
          if (iterationCount >= this.maxIterations) {
            console.warn("\n\u26A0\uFE0F Reached maximum iterations limit");
          }
          iterationCount++;
          const nextAction = this.actionQueue[0];
          console.log("\n\u256D\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500");
          console.log(`\u2502 \u{1F504} ITERATION ${iterationCount} of max ${this.maxIterations}`);
          console.log(`\u2502 \u{1F4CA} Queue size: ${this.actionQueue.length} actions`);
          console.log(`\u2502 \u{1F4D1} Next action: ${nextAction?.type} from '${nextAction?.from}' to '${nextAction?.to}'`);
          console.log("\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500");
          const action = this.actionQueue.shift();
          try {
            await this.processActionItem(action);
          } catch (error) {
            console.error(`
\u274C Error processing action from ${action.from}:`, error);
            this.context.push({
              role: "error",
              content: `Error in communication between ${action.from} -> ${action.to}: ${error instanceof Error ? error.message : String(error)}`
            });
          }
        }
        if (iterationCount >= this.maxIterations) {
          console.warn("\n\u26A0\uFE0F Reached maximum iterations limit");
        } else {
          console.log("\n\u256D\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500");
          console.log("\u2502 \u2728 All agents have completed their tasks");
          console.log("\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500");
        }
        console.log("\n\u{1F4CB} Getting final compilation from endgame agent...");
        const endgameResponse = await this.getAgent("endgame").generate({
          messages: [(0, __1.userMessage)(JSON.stringify(this.context))]
        });
        console.log("\n\u256D\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500");
        console.log(`\u2502 \u{1F7E2} Workflow completed in ${iterationCount} iterations!`);
        console.log("\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500");
        return {
          content: endgameResponse.value,
          context: this.context
        };
      }
    };
    exports2.ZeeWorkflow = ZeeWorkflow;
  }
});

// node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/zee/zee.types.js
var require_zee_types = __commonJS({
  "node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/zee/zee.types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ZEEActionResponseType = void 0;
    var ZEEActionResponseType;
    (function(ZEEActionResponseType2) {
      ZEEActionResponseType2["FOLLOWUP"] = "FOLLOWUP:";
      ZEEActionResponseType2["ANSWER"] = "ANSWER:";
      ZEEActionResponseType2["COMPLETE"] = "COMPLETE:";
    })(ZEEActionResponseType || (exports2.ZEEActionResponseType = ZEEActionResponseType = {}));
  }
});

// node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/zee/index.js
var require_zee2 = __commonJS({
  "node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/core/zee/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_zee(), exports2);
    __exportStar(require_zee_types(), exports2);
  }
});

// node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/index.js
var require_dist9 = __commonJS({
  "node_modules/.pnpm/@covalenthq+ai-agent-sdk@0.3.0_react@19.0.0/node_modules/@covalenthq/ai-agent-sdk/dist/index.js"(exports2) {
    "use strict";
    var __createBinding = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports2 && exports2.__exportStar || function(m, exports3) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports3, p))
          __createBinding(exports3, m, p);
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    __exportStar(require_agent2(), exports2);
    __exportStar(require_llm2(), exports2);
    __exportStar(require_tools2(), exports2);
    __exportStar(require_zee2(), exports2);
    __exportStar(require_functions(), exports2);
  }
});

// src/cli/index.ts
var cli_exports = {};
__export(cli_exports, {
  createProject: () => createProject,
  startChat: () => startChat
});
module.exports = __toCommonJS(cli_exports);

// src/cli/build.ts
var import_promises = __toESM(require("fs/promises"));
var import_path = __toESM(require("path"));
var import_fs = require("fs");
var import_inquirer = __toESM(require("inquirer"));
var import_child_process2 = require("child_process");

// src/cli/utils/index.ts
var import_child_process = require("child_process");
var import_ora = __toESM(require("ora"));
function getPackageManager() {
  try {
    (0, import_child_process.execSync)("pnpm --version", { stdio: "ignore" });
    return "pnpm";
  } catch (e) {
    try {
      (0, import_child_process.execSync)("yarn --version", { stdio: "ignore" });
      return "yarn";
    } catch (e2) {
      try {
        (0, import_child_process.execSync)("npm --version", { stdio: "ignore" });
        return "npm";
      } catch (e3) {
        return void 0;
      }
    }
  }
}
async function installDependencies(projectPath) {
  const packageManager = getPackageManager();
  if (!packageManager) {
    console.warn(
      "\u26A0\uFE0F No package manager (npm, yarn, pnpm) found. Please install dependencies manually."
    );
    return false;
  }
  return new Promise((resolve3) => {
    const spinner = (0, import_ora.default)(
      `Installing dependencies with ${packageManager}...`
    ).start();
    const installCommand = packageManager === "yarn" ? "add" : "install";
    const installProcess = (0, import_child_process.spawn)(packageManager, [installCommand], {
      cwd: projectPath,
      stdio: "pipe"
    });
    installProcess.on("close", (code) => {
      if (code === 0) {
        spinner.succeed(
          `Dependencies installed successfully with ${packageManager}`
        );
        resolve3(true);
      } else {
        spinner.fail(`Failed to install dependencies (exit code: ${code})`);
        console.log(
          `Please run '${packageManager} install' in the project directory manually.`
        );
        resolve3(false);
      }
    });
    installProcess.on("error", (err) => {
      spinner.fail(`Error installing dependencies: ${err.message}`);
      console.log(
        `Please run '${packageManager} install' in the project directory manually.`
      );
      resolve3(false);
    });
  });
}
async function buildProjectFiles(message, config) {
  const args = message.split(" ");
  const options = {
    projectName: config.projectName,
    skipDependencyPrompt: true
    // Skip dependency prompt in chat mode by default
  };
  if (args.length > 1) {
    if (args[1] === "--help" || args[1] === "-h") {
      console.log(`
  Build command options:
    build                       - Build with interactive prompts
    build --format=esm          - Specify output format (esm, cjs, browser)
    build --output=dist         - Specify output directory
    build --agent=AgentName     - Specify main agent to export as default
    build --deps                - Prompt to install dependencies
    build --no-deps             - Skip dependency installation prompt
        `);
      return;
    }
    args.slice(1).forEach((arg) => {
      if (arg.startsWith("--format=")) {
        options.format = arg.split("=")[1];
      } else if (arg.startsWith("--output=")) {
        options.outputDir = arg.split("=")[1];
      } else if (arg.startsWith("--agent=")) {
        options.mainAgent = arg.split("=")[1];
      } else if (arg === "--deps") {
        options.skipDependencyPrompt = false;
      } else if (arg === "--no-deps") {
        options.skipDependencyPrompt = true;
      }
    });
  }
  const buildResult = await buildProject(config.projectPath, options);
  if (buildResult.status === "error") {
    console.log(`\u{1F916} Assistant: Build failed: ${buildResult.message}`);
  } else {
    console.log(
      `\u{1F916} Assistant: Build completed successfully! Your compiled project is available in: ${buildResult.outputDir}`
    );
  }
}
function toCamelCase(str) {
  return str.replace(/\s+(.)/g, (_, char) => char.toUpperCase()).replace(/\s/g, "").replace(/^(.)/, (_, char) => char.toLowerCase()).replace(/[^a-zA-Z0-9_]/g, "");
}
var logger = {
  debug: (message, ...args) => {
    if (process.env.AGENT_KIT_DEBUG === "true") {
      console.log(`[DEBUG] ${message}`, ...args);
    }
  },
  info: (message, ...args) => console.log(message, ...args),
  warn: (message, ...args) => console.warn(`\u26A0\uFE0F ${message}`, ...args),
  error: (message, ...args) => console.error(`\u274C ${message}`, ...args)
};
async function withSpinner(message, task) {
  const spinner = (0, import_ora.default)(message).start();
  try {
    const result = await task();
    spinner.succeed();
    return result;
  } catch (error) {
    spinner.fail(`${message} failed: ${error.message}`);
    throw error;
  }
}
function executeCommand(command, args, options) {
  return new Promise((resolve3) => {
    const spinner = (0, import_ora.default)(options.message).start();
    const process2 = (0, import_child_process.spawn)(command, args, {
      cwd: options.cwd,
      stdio: "pipe"
    });
    process2.on("close", (code) => {
      if (code === 0) {
        spinner.succeed(`${options.message} completed successfully`);
        resolve3(true);
      } else {
        spinner.fail(`${options.message} failed (exit code: ${code})`);
        resolve3(false);
      }
    });
    process2.on("error", (err) => {
      spinner.fail(`${options.message} error: ${err.message}`);
      resolve3(false);
    });
  });
}

// src/cli/build.ts
async function runProjectBuild(projectPath) {
  const packageManager = getPackageManager();
  if (!packageManager) {
    logger.warn("No package manager found. Please build the project manually.");
    return false;
  }
  return executeCommand(packageManager, ["run", "build"], {
    cwd: projectPath,
    message: "Building project..."
  });
}
async function ensureCoreFiles(projectPath, outputDir) {
  return withSpinner("Ensuring core files exist...", async () => {
    try {
      const projectCorePath = import_path.default.join(projectPath, "src", "core");
      const outputCorePath = import_path.default.join(outputDir, "core");
      const cliCorePath = import_path.default.join(__dirname, "..", "core");
      if (!(0, import_fs.existsSync)(outputCorePath)) {
        (0, import_fs.mkdirSync)(outputCorePath, { recursive: true });
      }
      const projectAgentKitPath = import_path.default.join(projectCorePath, "agent-kit.ts");
      const outputAgentKitPath = import_path.default.join(outputCorePath, "agent-kit.js");
      const cliAgentKitPath = import_path.default.join(cliCorePath, "agent-kit.js");
      logger.debug("Checking core paths:", {
        projectCorePath,
        outputCorePath,
        cliCorePath
      });
      let sourceFile = cliAgentKitPath;
      let shouldCopy = true;
      if ((0, import_fs.existsSync)(outputAgentKitPath)) {
        const outputContent = await import_promises.default.readFile(outputAgentKitPath, "utf-8");
        if (outputContent.length > 1e3) {
          logger.debug(
            "Full agent-kit.js implementation already exists in output"
          );
          shouldCopy = false;
        }
      }
      if (shouldCopy && (0, import_fs.existsSync)(projectAgentKitPath)) {
        const projectContent = await import_promises.default.readFile(projectAgentKitPath, "utf-8");
        if (projectContent.length > 1e3) {
          sourceFile = projectAgentKitPath;
          logger.debug("Using project's agent-kit implementation");
        } else {
          logger.debug(
            "Project has incomplete agent-kit.ts, using CLI's implementation"
          );
        }
      }
      if (shouldCopy) {
        if ((0, import_fs.existsSync)(sourceFile)) {
          await import_promises.default.copyFile(sourceFile, outputAgentKitPath);
          logger.debug(
            `Copied agent-kit from ${sourceFile} to ${outputAgentKitPath}`
          );
        } else {
          logger.error(
            `Could not find agent-kit implementation at ${sourceFile}`
          );
          logger.debug(
            "Available files in CLI core directory:",
            await import_promises.default.readdir(cliCorePath)
          );
          return false;
        }
      }
      const toolRegistryFiles = ["tool-registry.js", "tool-registry.d.ts"];
      for (const file of toolRegistryFiles) {
        const sourcePath = import_path.default.join(cliCorePath, file);
        const destPath = import_path.default.join(outputCorePath, file);
        if ((0, import_fs.existsSync)(sourcePath)) {
          await import_promises.default.copyFile(sourcePath, destPath);
          logger.debug(`Copied ${file} to output`);
        }
      }
      return true;
    } catch (error) {
      logger.error(`Error ensuring core files: ${error.message}`);
      logger.debug("Detailed error:", error);
      return false;
    }
  });
}
async function fixImportPaths(outputDir) {
  return withSpinner("Fixing import paths...", async () => {
    try {
      const findJsFiles = async (dir, fileList = []) => {
        const files = await import_promises.default.readdir(dir, { withFileTypes: true });
        for (const file of files) {
          const filePath = import_path.default.join(dir, file.name);
          if (file.isDirectory()) {
            fileList = await findJsFiles(filePath, fileList);
          } else if (file.name.endsWith(".js")) {
            fileList.push(filePath);
          }
        }
        return fileList;
      };
      const jsFiles = await findJsFiles(outputDir);
      logger.debug(`Found ${jsFiles.length} JS files to fix`);
      for (const filePath of jsFiles) {
        let content = await import_promises.default.readFile(filePath, "utf-8");
        content = content.replace(
          /from\s+['"]([^'"]*\/[^'"]*?)['"];/g,
          (match, importPath) => {
            if (importPath.startsWith(".") && !importPath.endsWith(".js")) {
              return `from "${importPath}.js";`;
            }
            return match;
          }
        );
        await import_promises.default.writeFile(filePath, content);
      }
      logger.debug(`Fixed import paths in ${jsFiles.length} files`);
      return true;
    } catch (error) {
      logger.error(`Error fixing import paths: ${error.message}`);
      return false;
    }
  });
}
async function scanProject(projectPath) {
  return withSpinner("Scanning project files...", async () => {
    const toolsDir = import_path.default.join(projectPath, "src/tools");
    const agentsDir = import_path.default.join(projectPath, "src/agents");
    let toolFiles = [];
    let agentFiles = [];
    if ((0, import_fs.existsSync)(toolsDir)) {
      toolFiles = (await import_promises.default.readdir(toolsDir)).filter(
        (file) => (file.endsWith(".ts") || file.endsWith(".js")) && file !== "index.ts" && file !== "index.js"
      );
    }
    if ((0, import_fs.existsSync)(agentsDir)) {
      agentFiles = (await import_promises.default.readdir(agentsDir)).filter(
        (file) => (file.endsWith(".ts") || file.endsWith(".js")) && file !== "index.ts" && file !== "index.js"
      );
    }
    logger.debug(
      `Found ${toolFiles.length} tools and ${agentFiles.length} agents`
    );
    return { toolFiles, agentFiles };
  });
}
async function generateIndexFile(projectPath, options, toolFiles, agentFiles) {
  return withSpinner("Generating index file...", async () => {
    let indexContent = `// Auto-generated index file for ${options.projectName}
`;
    indexContent += `// Generated on ${(/* @__PURE__ */ new Date()).toISOString()}

`;
    indexContent += `import AgentKit from "./core/agent-kit.js";

`;
    toolFiles.forEach((toolFile) => {
      const toolName = import_path.default.basename(toolFile, import_path.default.extname(toolFile));
      indexContent += `import "./tools/${toolName}.js";
`;
    });
    indexContent += `
`;
    agentFiles.forEach((agentFile) => {
      const agentName = import_path.default.basename(agentFile, import_path.default.extname(agentFile));
      indexContent += `import "./agents/${agentName}.js";
`;
    });
    indexContent += `
// Compile the AgentKit configuration
`;
    indexContent += `const compiledKit = AgentKit.compile();

`;
    let mainAgentName = options.mainAgent;
    if (!mainAgentName && agentFiles.length > 0) {
      mainAgentName = import_path.default.basename(agentFiles[0], import_path.default.extname(agentFiles[0]));
    }
    indexContent += `// Export individual agents
`;
    agentFiles.forEach((agentFile) => {
      const agentName = import_path.default.basename(agentFile, import_path.default.extname(agentFile));
      const exportName = toCamelCase(agentName);
      indexContent += `export const ${exportName} = compiledKit.agents["${agentName}"];
`;
    });
    if (agentFiles.length > 0) {
      indexContent += `
// Create an agents object with all the agents
`;
      indexContent += `const output = {
`;
      agentFiles.forEach((agentFile) => {
        const agentName = import_path.default.basename(agentFile, import_path.default.extname(agentFile));
        const exportName = toCamelCase(agentName);
        indexContent += `  ${exportName},
`;
      });
      indexContent += `  getAllAgents: () => compiledKit.agents,
`;
      indexContent += `  getAllTools: () => compiledKit.tools,
`;
      indexContent += `};

`;
      indexContent += `// Export the agents object as default
`;
      indexContent += `export default output;
`;
    } else {
      indexContent += `
// Export compiled kit as default
`;
      indexContent += `export default compiledKit;
`;
    }
    indexContent += `
/*
Example usage:

// Using the default import (all agents)
import agents from "./index.js";
const response = await agents.${agentFiles.length > 0 ? toCamelCase(import_path.default.basename(agentFiles[0], import_path.default.extname(agentFiles[0]))) : "yourAgentName"}.generate({
  messages: [{ role: 'user', content: 'Your message here' }]
});

// Using named exports for specific agents
import { ${agentFiles.map((file) => toCamelCase(import_path.default.basename(file, import_path.default.extname(file)))).join(", ")} } from "./index.js";
const specificResponse = await ${agentFiles.length > 0 ? toCamelCase(import_path.default.basename(agentFiles[0], import_path.default.extname(agentFiles[0]))) : "yourAgentName"}.generate({
  messages: [{ role: 'user', content: 'A message for this specific agent' }]
});
*/
`;
    await import_promises.default.writeFile(import_path.default.join(projectPath, "src/index.ts"), indexContent);
  });
}
async function createDistPackageJson(outputDir, options) {
  return withSpinner("Creating package.json for distribution...", async () => {
    const packageJson = {
      name: options.projectName.toLowerCase().replace(/\s+/g, "-"),
      version: "1.0.0",
      description: `AgentKit project: ${options.projectName}`,
      type: options.format === "esm" ? "module" : "commonjs",
      main: options.format === "esm" ? "index.js" : "index.cjs",
      scripts: {
        test: 'echo "No tests specified"'
      },
      dependencies: {
        "@covalenthq/ai-agent-sdk": "latest",
        zod: "^3.22.4"
      }
    };
    await import_promises.default.writeFile(
      import_path.default.join(outputDir, "package.json"),
      JSON.stringify(packageJson, null, 2)
    );
  });
}
async function createBrowserBundle(outputDir, options) {
  return withSpinner("Creating browser bundle...", async () => {
    const htmlContent = `<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>${options.projectName}</title>
  <style>
    body { font-family: system-ui, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
    textarea { width: 100%; padding: 10px; font-family: inherit; }
    button { padding: 8px 16px; background: #0066cc; color: white; border: none; border-radius: 4px; cursor: pointer; }
    #response { white-space: pre-wrap; }
  </style>
</head>
<body>
  <h1>${options.projectName}</h1>
  <div>
    <textarea id="userInput" rows="4" placeholder="Enter your message here..."></textarea>
    <div style="margin-top: 10px;">
      <button id="sendBtn">Send</button>
    </div>
  </div>
  <div id="response" style="margin-top: 20px; border: 1px solid #ccc; padding: 10px; min-height: 200px;"></div>

  <script type="module">
    import agent from './index.js';
    
    const sendBtn = document.getElementById('sendBtn');
    const userInput = document.getElementById('userInput');
    const responseDiv = document.getElementById('response');
    
    sendBtn.addEventListener('click', async () => {
      const message = userInput.value;
      if (!message) return;
      
      responseDiv.innerHTML = 'Thinking...';
      
      try {
        const response = await agent.generate({
          messages: [{ role: 'user', content: message }]
        });
        
        responseDiv.innerHTML = response.content || response;
      } catch (error) {
        responseDiv.innerHTML = 'Error: ' + error.message;
      }
    });
  </script>
</body>
</html>`;
    await import_promises.default.writeFile(import_path.default.join(outputDir, "index.html"), htmlContent);
  });
}
async function createReadme(outputDir, options, toolFiles, agentFiles) {
  return withSpinner("Creating README...", async () => {
    const readmeContent = `# ${options.projectName}

This is an AgentKit project compiled for deployment.

## Usage

\`\`\`javascript
${options.format === "esm" ? `import agent from './${options.outputDir}/index.js';` : `const agent = require('./${options.outputDir}/index');`}

const response = await agent.generate({
  messages: [{ role: 'user', content: 'Your message here' }]
});

console.log(response);
\`\`\`

## Available Agents

${agentFiles.map((file) => {
      const agentName = import_path.default.basename(file, import_path.default.extname(file));
      return `- ${agentName}
`;
    }).join("")}

## Available Tools

${toolFiles.map((file) => {
      const toolName = import_path.default.basename(file, import_path.default.extname(file));
      return `- ${toolName}
`;
    }).join("")}
`;
    await import_promises.default.writeFile(import_path.default.join(outputDir, "README.md"), readmeContent);
  });
}
function generateUsageExamples(options, agentFiles) {
  let usageExamples = "";
  if (agentFiles.length > 0) {
    const firstAgentName = import_path.default.basename(
      agentFiles[0],
      import_path.default.extname(agentFiles[0])
    );
    const firstAgentExportName = toCamelCase(firstAgentName);
    const agentExports = agentFiles.map((file) => toCamelCase(import_path.default.basename(file, import_path.default.extname(file)))).join(", ");
    usageExamples += `
// Using the agents object (default export):
${options.format === "esm" ? `import agents from './${options.outputDir}/index.js';` : `const agents = require('./${options.outputDir}/index');`}

const response = await agents.${firstAgentExportName}.generate({
  messages: [{ role: 'user', content: 'Your message here' }]
});
console.log(response.content);

`;
    usageExamples += `
// Using named exports for specific agents:
${options.format === "esm" ? `import { ${agentExports} } from './${options.outputDir}/index.js';` : `const { ${agentExports} } = require('./${options.outputDir}/index');`}

const specificResponse = await ${firstAgentExportName}.generate({
  messages: [{ role: 'user', content: 'A message for a specific agent' }]
});
`;
  } else {
    usageExamples += `
// Import the compiled kit:
${options.format === "esm" ? `import compiledKit from './${options.outputDir}/index.js';` : `const compiledKit = require('./${options.outputDir}/index');`}

// No agents were found, so you'll need to create them after importing.
`;
  }
  return usageExamples;
}
async function collectBuildOptions(projectPath, options) {
  if (!options.outputDir || !options.format || !options.projectName) {
    const answers = await import_inquirer.default.prompt([
      {
        type: "input",
        name: "projectName",
        message: "Project name:",
        default: import_path.default.basename(projectPath),
        when: !options.projectName
      },
      {
        type: "input",
        name: "outputDir",
        message: "Output directory:",
        default: "dist",
        when: !options.outputDir
      },
      {
        type: "list",
        name: "format",
        message: "Output format:",
        choices: [
          { name: "ESM (modern JavaScript modules)", value: "esm" },
          { name: "CommonJS (Node.js require)", value: "cjs" },
          { name: "Browser (web bundle)", value: "browser" }
        ],
        default: "esm",
        when: !options.format
      },
      {
        type: "input",
        name: "mainAgent",
        message: "Main agent to export (leave empty to export all):",
        when: !options.mainAgent
      }
    ]);
    options = { ...options, ...answers };
  }
  if (!["esm", "cjs", "browser"].includes(options.format)) {
    throw new Error(`Invalid output format: ${options.format}`);
  }
  return options;
}
async function buildProject(projectPath, inputOptions = {}) {
  console.log(`
  \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557
  \u2551         AgentKit Build Tool         \u2551
  \u2551                                     \u2551
  \u2551  Compile and export your AI agents  \u2551
  \u255A\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255D
  `);
  try {
    projectPath = import_path.default.resolve(projectPath);
    logger.info("Project path:", projectPath);
    if (!(0, import_fs.existsSync)(projectPath)) {
      throw new Error(`Project directory '${projectPath}' does not exist`);
    }
    const packageJsonPath = import_path.default.join(projectPath, "package.json");
    if ((0, import_fs.existsSync)(packageJsonPath)) {
      logger.debug("Found package.json:", packageJsonPath);
      const { installDeps } = await import_inquirer.default.prompt([
        {
          type: "confirm",
          name: "installDeps",
          message: "Would you like to install/update dependencies before building?",
          default: false,
          when: !inputOptions.skipDependencyPrompt
        }
      ]);
      if (installDeps) {
        const installed = await installDependencies(projectPath);
        if (!installed) {
          logger.warn(
            "Could not install dependencies. Continuing with build..."
          );
        }
      }
    } else {
      logger.warn("No package.json found in project directory");
    }
    const options = await collectBuildOptions(projectPath, inputOptions);
    const outputDir = import_path.default.resolve(projectPath, options.outputDir);
    if (!(0, import_fs.existsSync)(outputDir)) {
      await import_promises.default.mkdir(outputDir, { recursive: true });
    }
    const { toolFiles, agentFiles } = await scanProject(projectPath);
    await generateIndexFile(projectPath, options, toolFiles, agentFiles);
    await createDistPackageJson(outputDir, options);
    let projectBuildSuccess = true;
    const projectPackageJsonPath = import_path.default.join(projectPath, "package.json");
    if ((0, import_fs.existsSync)(projectPackageJsonPath)) {
      try {
        const packageJsonContent = await import_promises.default.readFile(
          projectPackageJsonPath,
          "utf-8"
        );
        const packageData = JSON.parse(packageJsonContent);
        if (packageData.scripts && packageData.scripts.build) {
          projectBuildSuccess = await runProjectBuild(projectPath);
          if (!projectBuildSuccess) {
            logger.warn(
              "Project build script failed, attempting to continue with TypeScript compilation"
            );
          }
        }
      } catch (error) {
        logger.warn(
          "Could not read package.json, skipping project build script"
        );
      }
    }
    if (!projectBuildSuccess) {
      await withSpinner("Running TypeScript compiler...", async () => {
        try {
          (0, import_child_process2.execSync)(`npx tsc --outDir ${options.outputDir}`, {
            cwd: projectPath,
            stdio: "pipe"
          });
          return true;
        } catch (error) {
          logger.error(`TypeScript compilation failed: ${error.message}`);
          logger.debug(
            "TypeScript compiler output:",
            error.stdout?.toString() || "No output"
          );
          logger.info("Trying to continue by ensuring core files...");
          return false;
        }
      });
    }
    const coreFilesSuccess = await ensureCoreFiles(projectPath, outputDir);
    if (!coreFilesSuccess) {
      logger.warn("Warning: Failed to ensure core files");
    }
    const fixImportsSuccess = await fixImportPaths(outputDir);
    if (!fixImportsSuccess) {
      logger.warn("Warning: Failed to fix import paths");
    }
    if (options.format === "browser") {
      await createBrowserBundle(outputDir, options);
    }
    await createReadme(outputDir, options, toolFiles, agentFiles);
    const usageExamples = generateUsageExamples(options, agentFiles);
    console.log(`
\u2705 Build completed successfully!

Your compiled project is available in: ${outputDir}

## Usage Examples:
${usageExamples}
`);
    return {
      status: "success",
      outputDir,
      format: options.format,
      projectName: options.projectName,
      agents: agentFiles.map((file) => import_path.default.basename(file, import_path.default.extname(file))),
      tools: toolFiles.map((file) => import_path.default.basename(file, import_path.default.extname(file)))
    };
  } catch (error) {
    logger.error("Build failed:", error.message);
    return {
      status: "error",
      message: error.message
    };
  }
}

// src/cli/index.ts
var import_inquirer3 = __toESM(require("inquirer"));
var import_fs5 = require("fs");
var import_path7 = require("path");
var import_dotenv = __toESM(require("dotenv"));

// src/generators/index.ts
var import_fs2 = require("fs");
var import_path2 = require("path");
function ensureDir(dir) {
  if (!(0, import_fs2.existsSync)(dir)) {
    (0, import_fs2.mkdirSync)(dir, { recursive: true });
  }
}
function createFile(path5, content) {
  (0, import_fs2.writeFileSync)(path5, content);
}
function generatePackageJson(projectPath, options) {
  const packageJson = {
    name: options.name.toLowerCase().replace(/\s+/g, "-"),
    version: "0.1.0",
    description: options.description,
    main: "dist/index.js",
    type: "module",
    scripts: {
      build: "tsc",
      dev: "ts-node src/index.ts",
      start: "node dist/index.js",
      test: "vitest run",
      "test:watch": "vitest"
    },
    dependencies: {
      "@covalenthq/ai-agent-sdk": "^0.3.0",
      ai: "^2.2.30",
      dotenv: "^16.3.1",
      zod: "^3.22.4"
    },
    devDependencies: {
      "@types/node": "^20.10.0",
      typescript: "^5.3.3",
      "ts-node": "^10.9.2",
      vitest: "^1.2.1"
    },
    engines: {
      node: ">=18.0.0"
    },
    license: "MIT"
  };
  createFile(
    (0, import_path2.join)(projectPath, "package.json"),
    JSON.stringify(packageJson, null, 2)
  );
}
function generateTsConfig(projectPath) {
  const tsConfig = {
    compilerOptions: {
      target: "ES2020",
      module: "NodeNext",
      moduleResolution: "NodeNext",
      esModuleInterop: true,
      strict: true,
      skipLibCheck: true,
      outDir: "dist",
      declaration: true,
      sourceMap: true
    },
    include: ["src/**/*"],
    exclude: ["node_modules", "dist"]
  };
  createFile(
    (0, import_path2.join)(projectPath, "tsconfig.json"),
    JSON.stringify(tsConfig, null, 2)
  );
}
function generateEnvFile(projectPath, options) {
  let envContent = `# Environment Variables
NODE_ENV=development
`;
  createFile((0, import_path2.join)(projectPath, ".env.example"), envContent);
}
function generateGitignore(projectPath) {
  const gitignore = `# Dependencies
node_modules
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Build output
dist
build

# Environment variables
.env
.env.local
.env.*.local

# Editor directories and files
.idea
.vscode
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw*

# OS files
.DS_Store
Thumbs.db
`;
  createFile((0, import_path2.join)(projectPath, ".gitignore"), gitignore);
}
function generateIndexFile2(projectPath, options) {
  const indexContent = `// src/index.ts
import dotenv from 'dotenv';
import { AgentKit } from './core/agent-kit.js';

// Load environment variables
dotenv.config();

async function main() {
  console.log('\u{1F680} Starting ${options.name}...');

  // Initialize AgentKit
  const agentKit = new AgentKit();
  
  // TODO: Define your tools, and agents here
  // Example tool
  agentKit.tool('Calculator', {
    description: 'Performs mathematical calculations',
    parameters: {
      expression: { type: 'string', description: 'The mathematical expression to evaluate' }
    },
    execute: async ({ expression }) => {
      try {
        // Simple evaluation (for demonstration purposes only)
        // In a real application, use a safer evaluation method
        const result = eval(expression);
        return \`Result: \${result}\`;
      } catch (error) {
        return \`Error: \${error}\`;
      }
    }
  });
  
  // Example agent
  agentKit.agent('MathAssistant', {
    description: 'Helps solve mathematical problems',
    model: 'gpt-4o',
    instructions: [
      'Analyze mathematical problems',
      'Use the Calculator tool to compute results'
    ],
    tools: ['Calculator']
  });
  
  
  // Compile the configuration
  const compiled = agentKit.compile();
  
  console.log('AgentKit configuration compiled successfully');
  console.log(\`Available agents: \${Object.keys(compiled.agents).join(', ')}\`);
  
  // Example usage
  // const result = (await compiled.agents["MathAssistant"]).generate([{type: 'user', content: 'Calculate the area of a circle with radius 5cm'}]);
  // console.log('Result:', result);
}

// Run the main function
main().catch(error => {
  console.error('\u274C Error:', error);
  process.exit(1);
});
`;
  ensureDir((0, import_path2.join)(projectPath, "src"));
  createFile((0, import_path2.join)(projectPath, "src", "index.ts"), indexContent);
}
function generateAgentKitCore(projectPath) {
  const coreDir = (0, import_path2.join)(projectPath, "src", "core");
  ensureDir(coreDir);
  const agentKitContent = `// src/core/agent-kit.ts
import { z, ZodObject, ZodTypeAny } from "zod";
import {
  Agent,
  Tool as SDKTool,
  type ModelProvider,
} from "@covalenthq/ai-agent-sdk";

type ModelType = "gpt-4o" | "gpt-4-turbo" | "claude-3-opus" | "claude-3-sonnet";

type ParamType = "string" | "number" | "boolean" | "array" | "object";

interface ParameterDefinition {
  type: ParamType;
  description?: string;
  items?: {
    type: string;
  };
}

interface ToolConfig {
  description: string;
  parameters: Record<string, ParameterDefinition>;
  execute: (params: Record<string, any>) => Promise<unknown>;
  provider?: string;
}

interface AgentConfig {
  description: string;
  model: ModelType;
  instructions?: string[];
  tools?: string[];
  temperature?: number;
}

interface ToolDefinition extends ToolConfig {
  name: string;
  zodSchema: ZodObject<any>;
  dependencies?: string[]; // Optional tool dependencies
}

interface AgentDefinition extends AgentConfig {
  name: string;
}

// Memory structure for tracking agent and tool usage
interface MemoryState {
  toolUsage: Record<
    string,
    {
      agents: string[];
      usageCount: number;
      lastUsed: Date;
    }
  >;
  agentUsage: Record<
    string,
    {
      usageCount: number;
      lastUsed: Date;
    }
  >;
  errors: string[];
  warnings: string[];
  conversation?: any[];
}

// Default usage structure for when an item isn't found in memory
interface DefaultToolUsage {
  agents: string[];
  usageCount: number;
  lastUsed: null;
}

interface DefaultAgentUsage {
  usageCount: number;
  lastUsed: null;
}

interface CompiledResult {
  tools: Record<string, SDKTool<any>>;
  agents: Record<string, Agent>;
  memory: MemoryState;
}

export class AgentKit {
  private tools: Record<string, ToolDefinition> = {};
  private agents: Record<string, AgentDefinition> = {};
  private errors: string[] = [];
  private warnings: string[] = [];
  private memory: MemoryState = {
    toolUsage: {},
    agentUsage: {},
    errors: [],
    warnings: [],
  };
  private modelMap: Record<ModelType, ModelProvider> = {
    "gpt-4o": { provider: "openai", id: "gpt-4o" },
    "gpt-4-turbo": { provider: "openai", id: "gpt-4-turbo" },
    "claude-3-opus": { provider: "anthropic", id: "claude-3-opus-20240229" },
    "claude-3-sonnet": {
      provider: "anthropic",
      id: "claude-3-sonnet-20240229",
    },
  };

  constructor() {
    // Initialize empty memory state
    this.resetMemory();
  }

  // Memory management
  private resetMemory(): void {
    this.memory = {
      toolUsage: {},
      agentUsage: {},
      errors: [],
      warnings: [],
    };
  }

  private trackToolUsage(toolName: string, agentName?: string): void {
    if (!this.memory.toolUsage[toolName]) {
      this.memory.toolUsage[toolName] = {
        agents: [],
        usageCount: 0,
        lastUsed: new Date(),
      };
    }

    this.memory.toolUsage[toolName].usageCount++;
    this.memory.toolUsage[toolName].lastUsed = new Date();

    if (
      agentName &&
      !this.memory.toolUsage[toolName].agents.includes(agentName)
    ) {
      this.memory.toolUsage[toolName].agents.push(agentName);
    }
  }

  private trackAgentUsage(agentName: string): void {
    if (!this.memory.agentUsage[agentName]) {
      this.memory.agentUsage[agentName] = {
        usageCount: 0,
        lastUsed: new Date(),
      };
    }

    this.memory.agentUsage[agentName].usageCount++;
    this.memory.agentUsage[agentName].lastUsed = new Date();
  }

  // Tool definition and validation
  public tool(name: string, config: ToolConfig): AgentKit {
    try {
      // Check if tool already exists
      if (this.tools[name]) {
        throw new Error(\`Tool '\${name}' already exists\`);
      }

      // Validate parameters against Zod schema
      const paramSchema: Record<string, ZodTypeAny> = {};
      for (const [key, param] of Object.entries(config.parameters)) {
        switch (param.type) {
          case "string":
            paramSchema[key] = z.string().describe(param.description || "");
            break;
          case "number":
            paramSchema[key] = z.number().describe(param.description || "");
            break;
          case "boolean":
            paramSchema[key] = z.boolean().describe(param.description || "");
            break;
          case "array":
            paramSchema[key] = z
              .array(z.any())
              .describe(param.description || "");
            break;
          case "object":
            paramSchema[key] = z
              .record(z.any())
              .describe(param.description || "");
            break;
          default:
            throw new Error(\`Unsupported parameter type: \${param.type}\`);
        }
      }

      // Validate execute function
      if (typeof config.execute !== "function") {
        throw new Error("Tool execute must be a function");
      }

      // Create mock parameters for validation
      const mockParams: Record<string, any> = {};
      for (const [key, param] of Object.entries(config.parameters)) {
        switch (param.type) {
          case "string":
            mockParams[key] = "test";
            break;
          case "number":
            mockParams[key] = 0;
            break;
          case "boolean":
            mockParams[key] = false;
            break;
          case "array":
            mockParams[key] = [];
            break;
          case "object":
            mockParams[key] = {};
            break;
        }
      }

      // Store the tool definition
      this.tools[name] = {
        ...config,
        name,
        zodSchema: z.object(paramSchema).passthrough(),
      };

      // Track the tool creation in memory
      this.trackToolUsage(name);

      return this;
    } catch (error) {
      const errorMessage = \`Error in tool '\${name}': \${
        (error as Error).message
      }\`;
      this.errors.push(errorMessage);
      this.memory.errors.push(errorMessage);
      return this;
    }
  }

  // Agent definition and validation
  public agent(name: string, config: AgentConfig): AgentKit {
    try {
      // Check if agent already exists
      if (this.agents[name]) {
        throw new Error(\`Agent '\${name}' already exists\`);
      }

      // Validate model
      if (!config.model || !this.modelMap[config.model]) {
        throw new Error(\`Invalid model: \${config.model}\`);
      }

      // Validate tools if present and track usage
      if (config.tools && config.tools.length > 0) {
        for (const toolName of config.tools) {
          if (!this.tools[toolName]) {
            throw new Error(
              \`Tool '\${toolName}' not defined. Define it before adding to agent.\`
            );
          }
          // Track tool usage by this agent
          this.trackToolUsage(toolName, name);
        }
      }

      // Store the agent definition
      this.agents[name] = {
        ...config,
        name,
      };

      // Track the agent creation in memory
      this.trackAgentUsage(name);

      return this;
    } catch (error) {
      const errorMessage = \`Error in agent '\${name}': \${
        (error as Error).message
      }\`;
      this.errors.push(errorMessage);
      this.memory.errors.push(errorMessage);
      return this;
    }
  }

  // Validation functions
  public validateToolDependencies(): boolean {
    let isValid = true;

    // Check for circular dependencies between tools
    const visited: Record<string, boolean> = {};
    const recursionStack: Record<string, boolean> = {};

    const checkCircular = (toolName: string, path: string[] = []): boolean => {
      if (!visited[toolName]) {
        visited[toolName] = true;
        recursionStack[toolName] = true;

        const tool = this.tools[toolName];
        if (tool.dependencies) {
          for (const dep of tool.dependencies) {
            if (!visited[dep] && checkCircular(dep, [...path, toolName])) {
              return true;
            } else if (recursionStack[dep]) {
              const cycle = [...path, toolName, dep].join(" -> ");
              const warningMsg = \`Circular dependency detected: \${cycle}\`;
              this.warnings.push(warningMsg);
              this.memory.warnings.push(warningMsg);
              isValid = false;
              return true;
            }
          }
        }

        recursionStack[toolName] = false;
      }
      return false;
    };

    Object.keys(this.tools).forEach((toolName) => {
      if (!visited[toolName]) {
        checkCircular(toolName);
      }
    });

    return isValid;
  }

  public validateHierarchy(): boolean {
    let isValid = true;

    // Check that all tools used by agents exist
    Object.entries(this.agents).forEach(([agentName, agent]) => {
      if (agent.tools) {
        for (const toolName of agent.tools) {
          if (!this.tools[toolName]) {
            const errorMsg = \`Agent '\${agentName}' references non-existent tool '\${toolName}'\`;
            this.errors.push(errorMsg);
            this.memory.errors.push(errorMsg);
            isValid = false;
          }
        }
      }
    });

    return isValid;
  }

  // Utility functions
  public getMemory(): MemoryState {
    return { ...this.memory };
  }

  public getErrors(): string[] {
    return [...this.errors];
  }

  public getWarnings(): string[] {
    return [...this.warnings];
  }

  public getToolsInfo(): Record<
    string,
    {
      definition: ToolDefinition;
      usage: MemoryState["toolUsage"][string] | DefaultToolUsage;
    }
  > {
    const result: Record<
      string,
      {
        definition: ToolDefinition;
        usage: MemoryState["toolUsage"][string] | DefaultToolUsage;
      }
    > = {};

    Object.keys(this.tools).forEach((toolName) => {
      result[toolName] = {
        definition: this.tools[toolName],
        usage: this.memory.toolUsage[toolName] || {
          agents: [],
          usageCount: 0,
          lastUsed: null,
        },
      };
    });

    return result;
  }

  public getAgentsInfo(): Record<
    string,
    {
      definition: AgentDefinition;
      usage: MemoryState["agentUsage"][string] | DefaultAgentUsage;
    }
  > {
    const result: Record<
      string,
      {
        definition: AgentDefinition;
        usage: MemoryState["agentUsage"][string] | DefaultAgentUsage;
      }
    > = {};

    Object.keys(this.agents).forEach((agentName) => {
      result[agentName] = {
        definition: this.agents[agentName],
        usage: this.memory.agentUsage[agentName] || {
          usageCount: 0,
          lastUsed: null,
        },
      };
    });

    return result;
  }

  // Save a message to the conversation history
  public addToConversation(message: { role: string; content: string }): void {
    if (!this.memory.conversation) {
      this.memory.conversation = [];
    }
    this.memory.conversation.push(message);
  }

  // Compilation
  public compile(): CompiledResult {
    // Validate hierarchy and dependencies
    this.validateHierarchy();
    this.validateToolDependencies();

    // Check for any validation errors
    if (this.errors.length > 0) {
      console.error("Compilation failed with errors:");
      this.errors.forEach((err) => console.error(\`- \${err}\`));
      throw new Error("Compilation failed due to validation errors");
    }

    // Show warnings but continue
    if (this.warnings.length > 0) {
      console.warn("Compilation proceeded with warnings:");
      this.warnings.forEach((warn) => console.warn(\`- \${warn}\`));
    }

    // Store a reference to this for use in closures
    const self = this;

    try {
      // Compile tools
      const compiledTools: Record<string, SDKTool<any>> = {};
      Object.entries(this.tools).forEach(([name, config]) => {
        const zodSchema: Record<string, ZodTypeAny> = {};

        // Convert parameter definitions to zod
        for (const [key, param] of Object.entries(config.parameters)) {
          let schema: ZodTypeAny;
          switch (param.type) {
            case "string":
              schema = z.string();
              break;
            case "number":
              schema = z.number();
              break;
            case "boolean":
              schema = z.boolean();
              break;
            case "array":
              let itemSchema: ZodTypeAny = z.any();
              if (param.items && param.items.type === "string") {
                itemSchema = z.string();
              }
              schema = z.array(itemSchema);
              break;
            case "object":
              schema = z.record(z.any());
              break;
            default:
              throw new Error(\`Unsupported parameter type: \${param.type}\`);
          }

          if (param.description) {
            schema = schema.describe(param.description);
          }
          zodSchema[key] = schema.optional();
        }

        compiledTools[name] = new SDKTool({
          name: name,
          description: config.description,
          parameters: z.object(zodSchema),
          execute: config.execute,
          provider: (config.provider || "openai") as "openai" | "anthropic",
        });
      });

      // Compile agents
      const compiledAgents: Record<string, Agent> = {};
      Object.entries(this.agents).forEach(([name, config]) => {
        // Collect tools for this agent
        const agentTools: Record<string, SDKTool<any>> = {};
        if (config.tools) {
          for (const toolName of config.tools) {
            agentTools[toolName] = compiledTools[toolName];
          }
        }

        compiledAgents[name] = new Agent({
          name: name,
          description: config.description,
          instructions: config.instructions || [],
          model: this.modelMap[config.model],
          tools: Object.keys(agentTools).length > 0 ? agentTools : undefined,
          temperature: config.temperature || 0.5,
        });
      });

      // Build and return the result object
      const result: CompiledResult = {
        tools: compiledTools,
        agents: compiledAgents,
        memory: { ...this.memory },
      };

      return result;
    } catch (error) {
      console.error("Compilation error:", error);
      this.memory.errors.push(\`Failed to compile: \${(error as Error).message}\`);
      throw new Error(\`Failed to compile: \${(error as Error).message}\`);
    }
  }
}

// Singleton instance as the default export
export default new AgentKit();
`;
  createFile((0, import_path2.join)(coreDir, "agent-kit.ts"), agentKitContent);
  const coreIndexContent = `// src/core/index.ts
export * from './agent-kit.js';
`;
  createFile((0, import_path2.join)(coreDir, "index.ts"), coreIndexContent);
}
async function generateFiles(projectPath, options) {
  ensureDir(projectPath);
  ensureDir((0, import_path2.join)(projectPath, "src"));
  ensureDir((0, import_path2.join)(projectPath, "src", "agents"));
  ensureDir((0, import_path2.join)(projectPath, "src", "tools"));
  generatePackageJson(projectPath, options);
  generateTsConfig(projectPath);
  generateEnvFile(projectPath, options);
  generateGitignore(projectPath);
  generateIndexFile2(projectPath, options);
  generateAgentKitCore(projectPath);
  createFile(
    (0, import_path2.join)(projectPath, "src", "agents", "index.ts"),
    "// Export your agent definitions here\n"
  );
  createFile(
    (0, import_path2.join)(projectPath, "src", "tools", "index.ts"),
    "// Export your tool implementations here\n"
  );
  console.log(`Project files generated at: ${projectPath}`);
}

// src/cli/index.ts
var import_ora3 = __toESM(require("ora"));

// node_modules/.pnpm/zod@3.24.2/node_modules/zod/lib/index.mjs
var util;
(function(util2) {
  util2.assertEqual = (val) => val;
  function assertIs(_arg) {
  }
  util2.assertIs = assertIs;
  function assertNever(_x) {
    throw new Error();
  }
  util2.assertNever = assertNever;
  util2.arrayToEnum = (items) => {
    const obj = {};
    for (const item of items) {
      obj[item] = item;
    }
    return obj;
  };
  util2.getValidEnumValues = (obj) => {
    const validKeys = util2.objectKeys(obj).filter((k) => typeof obj[obj[k]] !== "number");
    const filtered = {};
    for (const k of validKeys) {
      filtered[k] = obj[k];
    }
    return util2.objectValues(filtered);
  };
  util2.objectValues = (obj) => {
    return util2.objectKeys(obj).map(function(e) {
      return obj[e];
    });
  };
  util2.objectKeys = typeof Object.keys === "function" ? (obj) => Object.keys(obj) : (object) => {
    const keys = [];
    for (const key in object) {
      if (Object.prototype.hasOwnProperty.call(object, key)) {
        keys.push(key);
      }
    }
    return keys;
  };
  util2.find = (arr, checker) => {
    for (const item of arr) {
      if (checker(item))
        return item;
    }
    return void 0;
  };
  util2.isInteger = typeof Number.isInteger === "function" ? (val) => Number.isInteger(val) : (val) => typeof val === "number" && isFinite(val) && Math.floor(val) === val;
  function joinValues(array, separator = " | ") {
    return array.map((val) => typeof val === "string" ? `'${val}'` : val).join(separator);
  }
  util2.joinValues = joinValues;
  util2.jsonStringifyReplacer = (_, value) => {
    if (typeof value === "bigint") {
      return value.toString();
    }
    return value;
  };
})(util || (util = {}));
var objectUtil;
(function(objectUtil2) {
  objectUtil2.mergeShapes = (first, second) => {
    return {
      ...first,
      ...second
      // second overwrites first
    };
  };
})(objectUtil || (objectUtil = {}));
var ZodParsedType = util.arrayToEnum([
  "string",
  "nan",
  "number",
  "integer",
  "float",
  "boolean",
  "date",
  "bigint",
  "symbol",
  "function",
  "undefined",
  "null",
  "array",
  "object",
  "unknown",
  "promise",
  "void",
  "never",
  "map",
  "set"
]);
var getParsedType = (data) => {
  const t = typeof data;
  switch (t) {
    case "undefined":
      return ZodParsedType.undefined;
    case "string":
      return ZodParsedType.string;
    case "number":
      return isNaN(data) ? ZodParsedType.nan : ZodParsedType.number;
    case "boolean":
      return ZodParsedType.boolean;
    case "function":
      return ZodParsedType.function;
    case "bigint":
      return ZodParsedType.bigint;
    case "symbol":
      return ZodParsedType.symbol;
    case "object":
      if (Array.isArray(data)) {
        return ZodParsedType.array;
      }
      if (data === null) {
        return ZodParsedType.null;
      }
      if (data.then && typeof data.then === "function" && data.catch && typeof data.catch === "function") {
        return ZodParsedType.promise;
      }
      if (typeof Map !== "undefined" && data instanceof Map) {
        return ZodParsedType.map;
      }
      if (typeof Set !== "undefined" && data instanceof Set) {
        return ZodParsedType.set;
      }
      if (typeof Date !== "undefined" && data instanceof Date) {
        return ZodParsedType.date;
      }
      return ZodParsedType.object;
    default:
      return ZodParsedType.unknown;
  }
};
var ZodIssueCode = util.arrayToEnum([
  "invalid_type",
  "invalid_literal",
  "custom",
  "invalid_union",
  "invalid_union_discriminator",
  "invalid_enum_value",
  "unrecognized_keys",
  "invalid_arguments",
  "invalid_return_type",
  "invalid_date",
  "invalid_string",
  "too_small",
  "too_big",
  "invalid_intersection_types",
  "not_multiple_of",
  "not_finite"
]);
var quotelessJson = (obj) => {
  const json = JSON.stringify(obj, null, 2);
  return json.replace(/"([^"]+)":/g, "$1:");
};
var ZodError = class _ZodError extends Error {
  get errors() {
    return this.issues;
  }
  constructor(issues) {
    super();
    this.issues = [];
    this.addIssue = (sub) => {
      this.issues = [...this.issues, sub];
    };
    this.addIssues = (subs = []) => {
      this.issues = [...this.issues, ...subs];
    };
    const actualProto = new.target.prototype;
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(this, actualProto);
    } else {
      this.__proto__ = actualProto;
    }
    this.name = "ZodError";
    this.issues = issues;
  }
  format(_mapper) {
    const mapper = _mapper || function(issue) {
      return issue.message;
    };
    const fieldErrors = { _errors: [] };
    const processError = (error) => {
      for (const issue of error.issues) {
        if (issue.code === "invalid_union") {
          issue.unionErrors.map(processError);
        } else if (issue.code === "invalid_return_type") {
          processError(issue.returnTypeError);
        } else if (issue.code === "invalid_arguments") {
          processError(issue.argumentsError);
        } else if (issue.path.length === 0) {
          fieldErrors._errors.push(mapper(issue));
        } else {
          let curr = fieldErrors;
          let i = 0;
          while (i < issue.path.length) {
            const el = issue.path[i];
            const terminal = i === issue.path.length - 1;
            if (!terminal) {
              curr[el] = curr[el] || { _errors: [] };
            } else {
              curr[el] = curr[el] || { _errors: [] };
              curr[el]._errors.push(mapper(issue));
            }
            curr = curr[el];
            i++;
          }
        }
      }
    };
    processError(this);
    return fieldErrors;
  }
  static assert(value) {
    if (!(value instanceof _ZodError)) {
      throw new Error(`Not a ZodError: ${value}`);
    }
  }
  toString() {
    return this.message;
  }
  get message() {
    return JSON.stringify(this.issues, util.jsonStringifyReplacer, 2);
  }
  get isEmpty() {
    return this.issues.length === 0;
  }
  flatten(mapper = (issue) => issue.message) {
    const fieldErrors = {};
    const formErrors = [];
    for (const sub of this.issues) {
      if (sub.path.length > 0) {
        fieldErrors[sub.path[0]] = fieldErrors[sub.path[0]] || [];
        fieldErrors[sub.path[0]].push(mapper(sub));
      } else {
        formErrors.push(mapper(sub));
      }
    }
    return { formErrors, fieldErrors };
  }
  get formErrors() {
    return this.flatten();
  }
};
ZodError.create = (issues) => {
  const error = new ZodError(issues);
  return error;
};
var errorMap = (issue, _ctx) => {
  let message;
  switch (issue.code) {
    case ZodIssueCode.invalid_type:
      if (issue.received === ZodParsedType.undefined) {
        message = "Required";
      } else {
        message = `Expected ${issue.expected}, received ${issue.received}`;
      }
      break;
    case ZodIssueCode.invalid_literal:
      message = `Invalid literal value, expected ${JSON.stringify(issue.expected, util.jsonStringifyReplacer)}`;
      break;
    case ZodIssueCode.unrecognized_keys:
      message = `Unrecognized key(s) in object: ${util.joinValues(issue.keys, ", ")}`;
      break;
    case ZodIssueCode.invalid_union:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_union_discriminator:
      message = `Invalid discriminator value. Expected ${util.joinValues(issue.options)}`;
      break;
    case ZodIssueCode.invalid_enum_value:
      message = `Invalid enum value. Expected ${util.joinValues(issue.options)}, received '${issue.received}'`;
      break;
    case ZodIssueCode.invalid_arguments:
      message = `Invalid function arguments`;
      break;
    case ZodIssueCode.invalid_return_type:
      message = `Invalid function return type`;
      break;
    case ZodIssueCode.invalid_date:
      message = `Invalid date`;
      break;
    case ZodIssueCode.invalid_string:
      if (typeof issue.validation === "object") {
        if ("includes" in issue.validation) {
          message = `Invalid input: must include "${issue.validation.includes}"`;
          if (typeof issue.validation.position === "number") {
            message = `${message} at one or more positions greater than or equal to ${issue.validation.position}`;
          }
        } else if ("startsWith" in issue.validation) {
          message = `Invalid input: must start with "${issue.validation.startsWith}"`;
        } else if ("endsWith" in issue.validation) {
          message = `Invalid input: must end with "${issue.validation.endsWith}"`;
        } else {
          util.assertNever(issue.validation);
        }
      } else if (issue.validation !== "regex") {
        message = `Invalid ${issue.validation}`;
      } else {
        message = "Invalid";
      }
      break;
    case ZodIssueCode.too_small:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `more than`} ${issue.minimum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? "exactly" : issue.inclusive ? `at least` : `over`} ${issue.minimum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${issue.minimum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly equal to ` : issue.inclusive ? `greater than or equal to ` : `greater than `}${new Date(Number(issue.minimum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.too_big:
      if (issue.type === "array")
        message = `Array must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `less than`} ${issue.maximum} element(s)`;
      else if (issue.type === "string")
        message = `String must contain ${issue.exact ? `exactly` : issue.inclusive ? `at most` : `under`} ${issue.maximum} character(s)`;
      else if (issue.type === "number")
        message = `Number must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "bigint")
        message = `BigInt must be ${issue.exact ? `exactly` : issue.inclusive ? `less than or equal to` : `less than`} ${issue.maximum}`;
      else if (issue.type === "date")
        message = `Date must be ${issue.exact ? `exactly` : issue.inclusive ? `smaller than or equal to` : `smaller than`} ${new Date(Number(issue.maximum))}`;
      else
        message = "Invalid input";
      break;
    case ZodIssueCode.custom:
      message = `Invalid input`;
      break;
    case ZodIssueCode.invalid_intersection_types:
      message = `Intersection results could not be merged`;
      break;
    case ZodIssueCode.not_multiple_of:
      message = `Number must be a multiple of ${issue.multipleOf}`;
      break;
    case ZodIssueCode.not_finite:
      message = "Number must be finite";
      break;
    default:
      message = _ctx.defaultError;
      util.assertNever(issue);
  }
  return { message };
};
var overrideErrorMap = errorMap;
function setErrorMap(map) {
  overrideErrorMap = map;
}
function getErrorMap() {
  return overrideErrorMap;
}
var makeIssue = (params) => {
  const { data, path: path5, errorMaps, issueData } = params;
  const fullPath = [...path5, ...issueData.path || []];
  const fullIssue = {
    ...issueData,
    path: fullPath
  };
  if (issueData.message !== void 0) {
    return {
      ...issueData,
      path: fullPath,
      message: issueData.message
    };
  }
  let errorMessage = "";
  const maps = errorMaps.filter((m) => !!m).slice().reverse();
  for (const map of maps) {
    errorMessage = map(fullIssue, { data, defaultError: errorMessage }).message;
  }
  return {
    ...issueData,
    path: fullPath,
    message: errorMessage
  };
};
var EMPTY_PATH = [];
function addIssueToContext(ctx, issueData) {
  const overrideMap = getErrorMap();
  const issue = makeIssue({
    issueData,
    data: ctx.data,
    path: ctx.path,
    errorMaps: [
      ctx.common.contextualErrorMap,
      // contextual error map is first priority
      ctx.schemaErrorMap,
      // then schema-bound map if available
      overrideMap,
      // then global override map
      overrideMap === errorMap ? void 0 : errorMap
      // then global default map
    ].filter((x) => !!x)
  });
  ctx.common.issues.push(issue);
}
var ParseStatus = class _ParseStatus {
  constructor() {
    this.value = "valid";
  }
  dirty() {
    if (this.value === "valid")
      this.value = "dirty";
  }
  abort() {
    if (this.value !== "aborted")
      this.value = "aborted";
  }
  static mergeArray(status, results) {
    const arrayValue = [];
    for (const s of results) {
      if (s.status === "aborted")
        return INVALID;
      if (s.status === "dirty")
        status.dirty();
      arrayValue.push(s.value);
    }
    return { status: status.value, value: arrayValue };
  }
  static async mergeObjectAsync(status, pairs) {
    const syncPairs = [];
    for (const pair of pairs) {
      const key = await pair.key;
      const value = await pair.value;
      syncPairs.push({
        key,
        value
      });
    }
    return _ParseStatus.mergeObjectSync(status, syncPairs);
  }
  static mergeObjectSync(status, pairs) {
    const finalObject = {};
    for (const pair of pairs) {
      const { key, value } = pair;
      if (key.status === "aborted")
        return INVALID;
      if (value.status === "aborted")
        return INVALID;
      if (key.status === "dirty")
        status.dirty();
      if (value.status === "dirty")
        status.dirty();
      if (key.value !== "__proto__" && (typeof value.value !== "undefined" || pair.alwaysSet)) {
        finalObject[key.value] = value.value;
      }
    }
    return { status: status.value, value: finalObject };
  }
};
var INVALID = Object.freeze({
  status: "aborted"
});
var DIRTY = (value) => ({ status: "dirty", value });
var OK = (value) => ({ status: "valid", value });
var isAborted = (x) => x.status === "aborted";
var isDirty = (x) => x.status === "dirty";
var isValid = (x) => x.status === "valid";
var isAsync = (x) => typeof Promise !== "undefined" && x instanceof Promise;
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
var errorUtil;
(function(errorUtil2) {
  errorUtil2.errToObj = (message) => typeof message === "string" ? { message } : message || {};
  errorUtil2.toString = (message) => typeof message === "string" ? message : message === null || message === void 0 ? void 0 : message.message;
})(errorUtil || (errorUtil = {}));
var _ZodEnum_cache;
var _ZodNativeEnum_cache;
var ParseInputLazyPath = class {
  constructor(parent, value, path5, key) {
    this._cachedPath = [];
    this.parent = parent;
    this.data = value;
    this._path = path5;
    this._key = key;
  }
  get path() {
    if (!this._cachedPath.length) {
      if (this._key instanceof Array) {
        this._cachedPath.push(...this._path, ...this._key);
      } else {
        this._cachedPath.push(...this._path, this._key);
      }
    }
    return this._cachedPath;
  }
};
var handleResult = (ctx, result) => {
  if (isValid(result)) {
    return { success: true, data: result.value };
  } else {
    if (!ctx.common.issues.length) {
      throw new Error("Validation failed but no issues detected.");
    }
    return {
      success: false,
      get error() {
        if (this._error)
          return this._error;
        const error = new ZodError(ctx.common.issues);
        this._error = error;
        return this._error;
      }
    };
  }
};
function processCreateParams(params) {
  if (!params)
    return {};
  const { errorMap: errorMap2, invalid_type_error, required_error, description } = params;
  if (errorMap2 && (invalid_type_error || required_error)) {
    throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);
  }
  if (errorMap2)
    return { errorMap: errorMap2, description };
  const customMap = (iss, ctx) => {
    var _a, _b;
    const { message } = params;
    if (iss.code === "invalid_enum_value") {
      return { message: message !== null && message !== void 0 ? message : ctx.defaultError };
    }
    if (typeof ctx.data === "undefined") {
      return { message: (_a = message !== null && message !== void 0 ? message : required_error) !== null && _a !== void 0 ? _a : ctx.defaultError };
    }
    if (iss.code !== "invalid_type")
      return { message: ctx.defaultError };
    return { message: (_b = message !== null && message !== void 0 ? message : invalid_type_error) !== null && _b !== void 0 ? _b : ctx.defaultError };
  };
  return { errorMap: customMap, description };
}
var ZodType = class {
  get description() {
    return this._def.description;
  }
  _getType(input) {
    return getParsedType(input.data);
  }
  _getOrReturnCtx(input, ctx) {
    return ctx || {
      common: input.parent.common,
      data: input.data,
      parsedType: getParsedType(input.data),
      schemaErrorMap: this._def.errorMap,
      path: input.path,
      parent: input.parent
    };
  }
  _processInputParams(input) {
    return {
      status: new ParseStatus(),
      ctx: {
        common: input.parent.common,
        data: input.data,
        parsedType: getParsedType(input.data),
        schemaErrorMap: this._def.errorMap,
        path: input.path,
        parent: input.parent
      }
    };
  }
  _parseSync(input) {
    const result = this._parse(input);
    if (isAsync(result)) {
      throw new Error("Synchronous parse encountered promise.");
    }
    return result;
  }
  _parseAsync(input) {
    const result = this._parse(input);
    return Promise.resolve(result);
  }
  parse(data, params) {
    const result = this.safeParse(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  safeParse(data, params) {
    var _a;
    const ctx = {
      common: {
        issues: [],
        async: (_a = params === null || params === void 0 ? void 0 : params.async) !== null && _a !== void 0 ? _a : false,
        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap
      },
      path: (params === null || params === void 0 ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const result = this._parseSync({ data, path: ctx.path, parent: ctx });
    return handleResult(ctx, result);
  }
  "~validate"(data) {
    var _a, _b;
    const ctx = {
      common: {
        issues: [],
        async: !!this["~standard"].async
      },
      path: [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    if (!this["~standard"].async) {
      try {
        const result = this._parseSync({ data, path: [], parent: ctx });
        return isValid(result) ? {
          value: result.value
        } : {
          issues: ctx.common.issues
        };
      } catch (err) {
        if ((_b = (_a = err === null || err === void 0 ? void 0 : err.message) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes("encountered")) {
          this["~standard"].async = true;
        }
        ctx.common = {
          issues: [],
          async: true
        };
      }
    }
    return this._parseAsync({ data, path: [], parent: ctx }).then((result) => isValid(result) ? {
      value: result.value
    } : {
      issues: ctx.common.issues
    });
  }
  async parseAsync(data, params) {
    const result = await this.safeParseAsync(data, params);
    if (result.success)
      return result.data;
    throw result.error;
  }
  async safeParseAsync(data, params) {
    const ctx = {
      common: {
        issues: [],
        contextualErrorMap: params === null || params === void 0 ? void 0 : params.errorMap,
        async: true
      },
      path: (params === null || params === void 0 ? void 0 : params.path) || [],
      schemaErrorMap: this._def.errorMap,
      parent: null,
      data,
      parsedType: getParsedType(data)
    };
    const maybeAsyncResult = this._parse({ data, path: ctx.path, parent: ctx });
    const result = await (isAsync(maybeAsyncResult) ? maybeAsyncResult : Promise.resolve(maybeAsyncResult));
    return handleResult(ctx, result);
  }
  refine(check, message) {
    const getIssueProperties = (val) => {
      if (typeof message === "string" || typeof message === "undefined") {
        return { message };
      } else if (typeof message === "function") {
        return message(val);
      } else {
        return message;
      }
    };
    return this._refinement((val, ctx) => {
      const result = check(val);
      const setError = () => ctx.addIssue({
        code: ZodIssueCode.custom,
        ...getIssueProperties(val)
      });
      if (typeof Promise !== "undefined" && result instanceof Promise) {
        return result.then((data) => {
          if (!data) {
            setError();
            return false;
          } else {
            return true;
          }
        });
      }
      if (!result) {
        setError();
        return false;
      } else {
        return true;
      }
    });
  }
  refinement(check, refinementData) {
    return this._refinement((val, ctx) => {
      if (!check(val)) {
        ctx.addIssue(typeof refinementData === "function" ? refinementData(val, ctx) : refinementData);
        return false;
      } else {
        return true;
      }
    });
  }
  _refinement(refinement) {
    return new ZodEffects({
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "refinement", refinement }
    });
  }
  superRefine(refinement) {
    return this._refinement(refinement);
  }
  constructor(def) {
    this.spa = this.safeParseAsync;
    this._def = def;
    this.parse = this.parse.bind(this);
    this.safeParse = this.safeParse.bind(this);
    this.parseAsync = this.parseAsync.bind(this);
    this.safeParseAsync = this.safeParseAsync.bind(this);
    this.spa = this.spa.bind(this);
    this.refine = this.refine.bind(this);
    this.refinement = this.refinement.bind(this);
    this.superRefine = this.superRefine.bind(this);
    this.optional = this.optional.bind(this);
    this.nullable = this.nullable.bind(this);
    this.nullish = this.nullish.bind(this);
    this.array = this.array.bind(this);
    this.promise = this.promise.bind(this);
    this.or = this.or.bind(this);
    this.and = this.and.bind(this);
    this.transform = this.transform.bind(this);
    this.brand = this.brand.bind(this);
    this.default = this.default.bind(this);
    this.catch = this.catch.bind(this);
    this.describe = this.describe.bind(this);
    this.pipe = this.pipe.bind(this);
    this.readonly = this.readonly.bind(this);
    this.isNullable = this.isNullable.bind(this);
    this.isOptional = this.isOptional.bind(this);
    this["~standard"] = {
      version: 1,
      vendor: "zod",
      validate: (data) => this["~validate"](data)
    };
  }
  optional() {
    return ZodOptional.create(this, this._def);
  }
  nullable() {
    return ZodNullable.create(this, this._def);
  }
  nullish() {
    return this.nullable().optional();
  }
  array() {
    return ZodArray.create(this);
  }
  promise() {
    return ZodPromise.create(this, this._def);
  }
  or(option) {
    return ZodUnion.create([this, option], this._def);
  }
  and(incoming) {
    return ZodIntersection.create(this, incoming, this._def);
  }
  transform(transform) {
    return new ZodEffects({
      ...processCreateParams(this._def),
      schema: this,
      typeName: ZodFirstPartyTypeKind.ZodEffects,
      effect: { type: "transform", transform }
    });
  }
  default(def) {
    const defaultValueFunc = typeof def === "function" ? def : () => def;
    return new ZodDefault({
      ...processCreateParams(this._def),
      innerType: this,
      defaultValue: defaultValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodDefault
    });
  }
  brand() {
    return new ZodBranded({
      typeName: ZodFirstPartyTypeKind.ZodBranded,
      type: this,
      ...processCreateParams(this._def)
    });
  }
  catch(def) {
    const catchValueFunc = typeof def === "function" ? def : () => def;
    return new ZodCatch({
      ...processCreateParams(this._def),
      innerType: this,
      catchValue: catchValueFunc,
      typeName: ZodFirstPartyTypeKind.ZodCatch
    });
  }
  describe(description) {
    const This = this.constructor;
    return new This({
      ...this._def,
      description
    });
  }
  pipe(target) {
    return ZodPipeline.create(this, target);
  }
  readonly() {
    return ZodReadonly.create(this);
  }
  isOptional() {
    return this.safeParse(void 0).success;
  }
  isNullable() {
    return this.safeParse(null).success;
  }
};
var cuidRegex = /^c[^\s-]{8,}$/i;
var cuid2Regex = /^[0-9a-z]+$/;
var ulidRegex = /^[0-9A-HJKMNP-TV-Z]{26}$/i;
var uuidRegex = /^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i;
var nanoidRegex = /^[a-z0-9_-]{21}$/i;
var jwtRegex = /^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/;
var durationRegex = /^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/;
var emailRegex = /^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i;
var _emojiRegex = `^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$`;
var emojiRegex;
var ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/;
var ipv4CidrRegex = /^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/;
var ipv6Regex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/;
var ipv6CidrRegex = /^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/;
var base64Regex = /^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;
var base64urlRegex = /^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/;
var dateRegexSource = `((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))`;
var dateRegex = new RegExp(`^${dateRegexSource}$`);
function timeRegexSource(args) {
  let regex = `([01]\\d|2[0-3]):[0-5]\\d:[0-5]\\d`;
  if (args.precision) {
    regex = `${regex}\\.\\d{${args.precision}}`;
  } else if (args.precision == null) {
    regex = `${regex}(\\.\\d+)?`;
  }
  return regex;
}
function timeRegex(args) {
  return new RegExp(`^${timeRegexSource(args)}$`);
}
function datetimeRegex(args) {
  let regex = `${dateRegexSource}T${timeRegexSource(args)}`;
  const opts = [];
  opts.push(args.local ? `Z?` : `Z`);
  if (args.offset)
    opts.push(`([+-]\\d{2}:?\\d{2})`);
  regex = `${regex}(${opts.join("|")})`;
  return new RegExp(`^${regex}$`);
}
function isValidIP(ip, version) {
  if ((version === "v4" || !version) && ipv4Regex.test(ip)) {
    return true;
  }
  if ((version === "v6" || !version) && ipv6Regex.test(ip)) {
    return true;
  }
  return false;
}
function isValidJWT(jwt, alg) {
  if (!jwtRegex.test(jwt))
    return false;
  try {
    const [header] = jwt.split(".");
    const base64 = header.replace(/-/g, "+").replace(/_/g, "/").padEnd(header.length + (4 - header.length % 4) % 4, "=");
    const decoded = JSON.parse(atob(base64));
    if (typeof decoded !== "object" || decoded === null)
      return false;
    if (!decoded.typ || !decoded.alg)
      return false;
    if (alg && decoded.alg !== alg)
      return false;
    return true;
  } catch (_a) {
    return false;
  }
}
function isValidCidr(ip, version) {
  if ((version === "v4" || !version) && ipv4CidrRegex.test(ip)) {
    return true;
  }
  if ((version === "v6" || !version) && ipv6CidrRegex.test(ip)) {
    return true;
  }
  return false;
}
var ZodString = class _ZodString extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = String(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.string) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.string,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.length < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.length > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "string",
            inclusive: true,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "length") {
        const tooBig = input.data.length > check.value;
        const tooSmall = input.data.length < check.value;
        if (tooBig || tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          if (tooBig) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_big,
              maximum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          } else if (tooSmall) {
            addIssueToContext(ctx, {
              code: ZodIssueCode.too_small,
              minimum: check.value,
              type: "string",
              inclusive: true,
              exact: true,
              message: check.message
            });
          }
          status.dirty();
        }
      } else if (check.kind === "email") {
        if (!emailRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "email",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "emoji") {
        if (!emojiRegex) {
          emojiRegex = new RegExp(_emojiRegex, "u");
        }
        if (!emojiRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "emoji",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "uuid") {
        if (!uuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "uuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "nanoid") {
        if (!nanoidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "nanoid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid") {
        if (!cuidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cuid2") {
        if (!cuid2Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cuid2",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ulid") {
        if (!ulidRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ulid",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "url") {
        try {
          new URL(input.data);
        } catch (_a) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "url",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "regex") {
        check.regex.lastIndex = 0;
        const testResult = check.regex.test(input.data);
        if (!testResult) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "regex",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "trim") {
        input.data = input.data.trim();
      } else if (check.kind === "includes") {
        if (!input.data.includes(check.value, check.position)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { includes: check.value, position: check.position },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "toLowerCase") {
        input.data = input.data.toLowerCase();
      } else if (check.kind === "toUpperCase") {
        input.data = input.data.toUpperCase();
      } else if (check.kind === "startsWith") {
        if (!input.data.startsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { startsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "endsWith") {
        if (!input.data.endsWith(check.value)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: { endsWith: check.value },
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "datetime") {
        const regex = datetimeRegex(check);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "datetime",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "date") {
        const regex = dateRegex;
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "date",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "time") {
        const regex = timeRegex(check);
        if (!regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_string,
            validation: "time",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "duration") {
        if (!durationRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "duration",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "ip") {
        if (!isValidIP(input.data, check.version)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "ip",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "jwt") {
        if (!isValidJWT(input.data, check.alg)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "jwt",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "cidr") {
        if (!isValidCidr(input.data, check.version)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "cidr",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "base64") {
        if (!base64Regex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "base64",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "base64url") {
        if (!base64urlRegex.test(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            validation: "base64url",
            code: ZodIssueCode.invalid_string,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  _regex(regex, validation, message) {
    return this.refinement((data) => regex.test(data), {
      validation,
      code: ZodIssueCode.invalid_string,
      ...errorUtil.errToObj(message)
    });
  }
  _addCheck(check) {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  email(message) {
    return this._addCheck({ kind: "email", ...errorUtil.errToObj(message) });
  }
  url(message) {
    return this._addCheck({ kind: "url", ...errorUtil.errToObj(message) });
  }
  emoji(message) {
    return this._addCheck({ kind: "emoji", ...errorUtil.errToObj(message) });
  }
  uuid(message) {
    return this._addCheck({ kind: "uuid", ...errorUtil.errToObj(message) });
  }
  nanoid(message) {
    return this._addCheck({ kind: "nanoid", ...errorUtil.errToObj(message) });
  }
  cuid(message) {
    return this._addCheck({ kind: "cuid", ...errorUtil.errToObj(message) });
  }
  cuid2(message) {
    return this._addCheck({ kind: "cuid2", ...errorUtil.errToObj(message) });
  }
  ulid(message) {
    return this._addCheck({ kind: "ulid", ...errorUtil.errToObj(message) });
  }
  base64(message) {
    return this._addCheck({ kind: "base64", ...errorUtil.errToObj(message) });
  }
  base64url(message) {
    return this._addCheck({
      kind: "base64url",
      ...errorUtil.errToObj(message)
    });
  }
  jwt(options) {
    return this._addCheck({ kind: "jwt", ...errorUtil.errToObj(options) });
  }
  ip(options) {
    return this._addCheck({ kind: "ip", ...errorUtil.errToObj(options) });
  }
  cidr(options) {
    return this._addCheck({ kind: "cidr", ...errorUtil.errToObj(options) });
  }
  datetime(options) {
    var _a, _b;
    if (typeof options === "string") {
      return this._addCheck({
        kind: "datetime",
        precision: null,
        offset: false,
        local: false,
        message: options
      });
    }
    return this._addCheck({
      kind: "datetime",
      precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
      offset: (_a = options === null || options === void 0 ? void 0 : options.offset) !== null && _a !== void 0 ? _a : false,
      local: (_b = options === null || options === void 0 ? void 0 : options.local) !== null && _b !== void 0 ? _b : false,
      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
    });
  }
  date(message) {
    return this._addCheck({ kind: "date", message });
  }
  time(options) {
    if (typeof options === "string") {
      return this._addCheck({
        kind: "time",
        precision: null,
        message: options
      });
    }
    return this._addCheck({
      kind: "time",
      precision: typeof (options === null || options === void 0 ? void 0 : options.precision) === "undefined" ? null : options === null || options === void 0 ? void 0 : options.precision,
      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
    });
  }
  duration(message) {
    return this._addCheck({ kind: "duration", ...errorUtil.errToObj(message) });
  }
  regex(regex, message) {
    return this._addCheck({
      kind: "regex",
      regex,
      ...errorUtil.errToObj(message)
    });
  }
  includes(value, options) {
    return this._addCheck({
      kind: "includes",
      value,
      position: options === null || options === void 0 ? void 0 : options.position,
      ...errorUtil.errToObj(options === null || options === void 0 ? void 0 : options.message)
    });
  }
  startsWith(value, message) {
    return this._addCheck({
      kind: "startsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  endsWith(value, message) {
    return this._addCheck({
      kind: "endsWith",
      value,
      ...errorUtil.errToObj(message)
    });
  }
  min(minLength, message) {
    return this._addCheck({
      kind: "min",
      value: minLength,
      ...errorUtil.errToObj(message)
    });
  }
  max(maxLength, message) {
    return this._addCheck({
      kind: "max",
      value: maxLength,
      ...errorUtil.errToObj(message)
    });
  }
  length(len, message) {
    return this._addCheck({
      kind: "length",
      value: len,
      ...errorUtil.errToObj(message)
    });
  }
  /**
   * Equivalent to `.min(1)`
   */
  nonempty(message) {
    return this.min(1, errorUtil.errToObj(message));
  }
  trim() {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "trim" }]
    });
  }
  toLowerCase() {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toLowerCase" }]
    });
  }
  toUpperCase() {
    return new _ZodString({
      ...this._def,
      checks: [...this._def.checks, { kind: "toUpperCase" }]
    });
  }
  get isDatetime() {
    return !!this._def.checks.find((ch) => ch.kind === "datetime");
  }
  get isDate() {
    return !!this._def.checks.find((ch) => ch.kind === "date");
  }
  get isTime() {
    return !!this._def.checks.find((ch) => ch.kind === "time");
  }
  get isDuration() {
    return !!this._def.checks.find((ch) => ch.kind === "duration");
  }
  get isEmail() {
    return !!this._def.checks.find((ch) => ch.kind === "email");
  }
  get isURL() {
    return !!this._def.checks.find((ch) => ch.kind === "url");
  }
  get isEmoji() {
    return !!this._def.checks.find((ch) => ch.kind === "emoji");
  }
  get isUUID() {
    return !!this._def.checks.find((ch) => ch.kind === "uuid");
  }
  get isNANOID() {
    return !!this._def.checks.find((ch) => ch.kind === "nanoid");
  }
  get isCUID() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid");
  }
  get isCUID2() {
    return !!this._def.checks.find((ch) => ch.kind === "cuid2");
  }
  get isULID() {
    return !!this._def.checks.find((ch) => ch.kind === "ulid");
  }
  get isIP() {
    return !!this._def.checks.find((ch) => ch.kind === "ip");
  }
  get isCIDR() {
    return !!this._def.checks.find((ch) => ch.kind === "cidr");
  }
  get isBase64() {
    return !!this._def.checks.find((ch) => ch.kind === "base64");
  }
  get isBase64url() {
    return !!this._def.checks.find((ch) => ch.kind === "base64url");
  }
  get minLength() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxLength() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
};
ZodString.create = (params) => {
  var _a;
  return new ZodString({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodString,
    coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
    ...processCreateParams(params)
  });
};
function floatSafeRemainder(val, step) {
  const valDecCount = (val.toString().split(".")[1] || "").length;
  const stepDecCount = (step.toString().split(".")[1] || "").length;
  const decCount = valDecCount > stepDecCount ? valDecCount : stepDecCount;
  const valInt = parseInt(val.toFixed(decCount).replace(".", ""));
  const stepInt = parseInt(step.toFixed(decCount).replace(".", ""));
  return valInt % stepInt / Math.pow(10, decCount);
}
var ZodNumber = class _ZodNumber extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
    this.step = this.multipleOf;
  }
  _parse(input) {
    if (this._def.coerce) {
      input.data = Number(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.number) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.number,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check of this._def.checks) {
      if (check.kind === "int") {
        if (!util.isInteger(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.invalid_type,
            expected: "integer",
            received: "float",
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            minimum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            maximum: check.value,
            type: "number",
            inclusive: check.inclusive,
            exact: false,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (floatSafeRemainder(input.data, check.value) !== 0) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "finite") {
        if (!Number.isFinite(input.data)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_finite,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new _ZodNumber({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new _ZodNumber({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  int(message) {
    return this._addCheck({
      kind: "int",
      message: errorUtil.toString(message)
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: 0,
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  finite(message) {
    return this._addCheck({
      kind: "finite",
      message: errorUtil.toString(message)
    });
  }
  safe(message) {
    return this._addCheck({
      kind: "min",
      inclusive: true,
      value: Number.MIN_SAFE_INTEGER,
      message: errorUtil.toString(message)
    })._addCheck({
      kind: "max",
      inclusive: true,
      value: Number.MAX_SAFE_INTEGER,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
  get isInt() {
    return !!this._def.checks.find((ch) => ch.kind === "int" || ch.kind === "multipleOf" && util.isInteger(ch.value));
  }
  get isFinite() {
    let max = null, min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "finite" || ch.kind === "int" || ch.kind === "multipleOf") {
        return true;
      } else if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      } else if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return Number.isFinite(min) && Number.isFinite(max);
  }
};
ZodNumber.create = (params) => {
  return new ZodNumber({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodNumber,
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    ...processCreateParams(params)
  });
};
var ZodBigInt = class _ZodBigInt extends ZodType {
  constructor() {
    super(...arguments);
    this.min = this.gte;
    this.max = this.lte;
  }
  _parse(input) {
    if (this._def.coerce) {
      try {
        input.data = BigInt(input.data);
      } catch (_a) {
        return this._getInvalidInput(input);
      }
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.bigint) {
      return this._getInvalidInput(input);
    }
    let ctx = void 0;
    const status = new ParseStatus();
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        const tooSmall = check.inclusive ? input.data < check.value : input.data <= check.value;
        if (tooSmall) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            type: "bigint",
            minimum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        const tooBig = check.inclusive ? input.data > check.value : input.data >= check.value;
        if (tooBig) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            type: "bigint",
            maximum: check.value,
            inclusive: check.inclusive,
            message: check.message
          });
          status.dirty();
        }
      } else if (check.kind === "multipleOf") {
        if (input.data % check.value !== BigInt(0)) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.not_multiple_of,
            multipleOf: check.value,
            message: check.message
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return { status: status.value, value: input.data };
  }
  _getInvalidInput(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.bigint,
      received: ctx.parsedType
    });
    return INVALID;
  }
  gte(value, message) {
    return this.setLimit("min", value, true, errorUtil.toString(message));
  }
  gt(value, message) {
    return this.setLimit("min", value, false, errorUtil.toString(message));
  }
  lte(value, message) {
    return this.setLimit("max", value, true, errorUtil.toString(message));
  }
  lt(value, message) {
    return this.setLimit("max", value, false, errorUtil.toString(message));
  }
  setLimit(kind, value, inclusive, message) {
    return new _ZodBigInt({
      ...this._def,
      checks: [
        ...this._def.checks,
        {
          kind,
          value,
          inclusive,
          message: errorUtil.toString(message)
        }
      ]
    });
  }
  _addCheck(check) {
    return new _ZodBigInt({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  positive(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  negative(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: false,
      message: errorUtil.toString(message)
    });
  }
  nonpositive(message) {
    return this._addCheck({
      kind: "max",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  nonnegative(message) {
    return this._addCheck({
      kind: "min",
      value: BigInt(0),
      inclusive: true,
      message: errorUtil.toString(message)
    });
  }
  multipleOf(value, message) {
    return this._addCheck({
      kind: "multipleOf",
      value,
      message: errorUtil.toString(message)
    });
  }
  get minValue() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min;
  }
  get maxValue() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max;
  }
};
ZodBigInt.create = (params) => {
  var _a;
  return new ZodBigInt({
    checks: [],
    typeName: ZodFirstPartyTypeKind.ZodBigInt,
    coerce: (_a = params === null || params === void 0 ? void 0 : params.coerce) !== null && _a !== void 0 ? _a : false,
    ...processCreateParams(params)
  });
};
var ZodBoolean = class extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = Boolean(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.boolean) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.boolean,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodBoolean.create = (params) => {
  return new ZodBoolean({
    typeName: ZodFirstPartyTypeKind.ZodBoolean,
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    ...processCreateParams(params)
  });
};
var ZodDate = class _ZodDate extends ZodType {
  _parse(input) {
    if (this._def.coerce) {
      input.data = new Date(input.data);
    }
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.date) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.date,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    if (isNaN(input.data.getTime())) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_date
      });
      return INVALID;
    }
    const status = new ParseStatus();
    let ctx = void 0;
    for (const check of this._def.checks) {
      if (check.kind === "min") {
        if (input.data.getTime() < check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_small,
            message: check.message,
            inclusive: true,
            exact: false,
            minimum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else if (check.kind === "max") {
        if (input.data.getTime() > check.value) {
          ctx = this._getOrReturnCtx(input, ctx);
          addIssueToContext(ctx, {
            code: ZodIssueCode.too_big,
            message: check.message,
            inclusive: true,
            exact: false,
            maximum: check.value,
            type: "date"
          });
          status.dirty();
        }
      } else {
        util.assertNever(check);
      }
    }
    return {
      status: status.value,
      value: new Date(input.data.getTime())
    };
  }
  _addCheck(check) {
    return new _ZodDate({
      ...this._def,
      checks: [...this._def.checks, check]
    });
  }
  min(minDate, message) {
    return this._addCheck({
      kind: "min",
      value: minDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  max(maxDate, message) {
    return this._addCheck({
      kind: "max",
      value: maxDate.getTime(),
      message: errorUtil.toString(message)
    });
  }
  get minDate() {
    let min = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "min") {
        if (min === null || ch.value > min)
          min = ch.value;
      }
    }
    return min != null ? new Date(min) : null;
  }
  get maxDate() {
    let max = null;
    for (const ch of this._def.checks) {
      if (ch.kind === "max") {
        if (max === null || ch.value < max)
          max = ch.value;
      }
    }
    return max != null ? new Date(max) : null;
  }
};
ZodDate.create = (params) => {
  return new ZodDate({
    checks: [],
    coerce: (params === null || params === void 0 ? void 0 : params.coerce) || false,
    typeName: ZodFirstPartyTypeKind.ZodDate,
    ...processCreateParams(params)
  });
};
var ZodSymbol = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.symbol) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.symbol,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodSymbol.create = (params) => {
  return new ZodSymbol({
    typeName: ZodFirstPartyTypeKind.ZodSymbol,
    ...processCreateParams(params)
  });
};
var ZodUndefined = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.undefined,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodUndefined.create = (params) => {
  return new ZodUndefined({
    typeName: ZodFirstPartyTypeKind.ZodUndefined,
    ...processCreateParams(params)
  });
};
var ZodNull = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.null) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.null,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodNull.create = (params) => {
  return new ZodNull({
    typeName: ZodFirstPartyTypeKind.ZodNull,
    ...processCreateParams(params)
  });
};
var ZodAny = class extends ZodType {
  constructor() {
    super(...arguments);
    this._any = true;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodAny.create = (params) => {
  return new ZodAny({
    typeName: ZodFirstPartyTypeKind.ZodAny,
    ...processCreateParams(params)
  });
};
var ZodUnknown = class extends ZodType {
  constructor() {
    super(...arguments);
    this._unknown = true;
  }
  _parse(input) {
    return OK(input.data);
  }
};
ZodUnknown.create = (params) => {
  return new ZodUnknown({
    typeName: ZodFirstPartyTypeKind.ZodUnknown,
    ...processCreateParams(params)
  });
};
var ZodNever = class extends ZodType {
  _parse(input) {
    const ctx = this._getOrReturnCtx(input);
    addIssueToContext(ctx, {
      code: ZodIssueCode.invalid_type,
      expected: ZodParsedType.never,
      received: ctx.parsedType
    });
    return INVALID;
  }
};
ZodNever.create = (params) => {
  return new ZodNever({
    typeName: ZodFirstPartyTypeKind.ZodNever,
    ...processCreateParams(params)
  });
};
var ZodVoid = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.undefined) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.void,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return OK(input.data);
  }
};
ZodVoid.create = (params) => {
  return new ZodVoid({
    typeName: ZodFirstPartyTypeKind.ZodVoid,
    ...processCreateParams(params)
  });
};
var ZodArray = class _ZodArray extends ZodType {
  _parse(input) {
    const { ctx, status } = this._processInputParams(input);
    const def = this._def;
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (def.exactLength !== null) {
      const tooBig = ctx.data.length > def.exactLength.value;
      const tooSmall = ctx.data.length < def.exactLength.value;
      if (tooBig || tooSmall) {
        addIssueToContext(ctx, {
          code: tooBig ? ZodIssueCode.too_big : ZodIssueCode.too_small,
          minimum: tooSmall ? def.exactLength.value : void 0,
          maximum: tooBig ? def.exactLength.value : void 0,
          type: "array",
          inclusive: true,
          exact: true,
          message: def.exactLength.message
        });
        status.dirty();
      }
    }
    if (def.minLength !== null) {
      if (ctx.data.length < def.minLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.minLength.message
        });
        status.dirty();
      }
    }
    if (def.maxLength !== null) {
      if (ctx.data.length > def.maxLength.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxLength.value,
          type: "array",
          inclusive: true,
          exact: false,
          message: def.maxLength.message
        });
        status.dirty();
      }
    }
    if (ctx.common.async) {
      return Promise.all([...ctx.data].map((item, i) => {
        return def.type._parseAsync(new ParseInputLazyPath(ctx, item, ctx.path, i));
      })).then((result2) => {
        return ParseStatus.mergeArray(status, result2);
      });
    }
    const result = [...ctx.data].map((item, i) => {
      return def.type._parseSync(new ParseInputLazyPath(ctx, item, ctx.path, i));
    });
    return ParseStatus.mergeArray(status, result);
  }
  get element() {
    return this._def.type;
  }
  min(minLength, message) {
    return new _ZodArray({
      ...this._def,
      minLength: { value: minLength, message: errorUtil.toString(message) }
    });
  }
  max(maxLength, message) {
    return new _ZodArray({
      ...this._def,
      maxLength: { value: maxLength, message: errorUtil.toString(message) }
    });
  }
  length(len, message) {
    return new _ZodArray({
      ...this._def,
      exactLength: { value: len, message: errorUtil.toString(message) }
    });
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodArray.create = (schema, params) => {
  return new ZodArray({
    type: schema,
    minLength: null,
    maxLength: null,
    exactLength: null,
    typeName: ZodFirstPartyTypeKind.ZodArray,
    ...processCreateParams(params)
  });
};
function deepPartialify(schema) {
  if (schema instanceof ZodObject) {
    const newShape = {};
    for (const key in schema.shape) {
      const fieldSchema = schema.shape[key];
      newShape[key] = ZodOptional.create(deepPartialify(fieldSchema));
    }
    return new ZodObject({
      ...schema._def,
      shape: () => newShape
    });
  } else if (schema instanceof ZodArray) {
    return new ZodArray({
      ...schema._def,
      type: deepPartialify(schema.element)
    });
  } else if (schema instanceof ZodOptional) {
    return ZodOptional.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodNullable) {
    return ZodNullable.create(deepPartialify(schema.unwrap()));
  } else if (schema instanceof ZodTuple) {
    return ZodTuple.create(schema.items.map((item) => deepPartialify(item)));
  } else {
    return schema;
  }
}
var ZodObject = class _ZodObject extends ZodType {
  constructor() {
    super(...arguments);
    this._cached = null;
    this.nonstrict = this.passthrough;
    this.augment = this.extend;
  }
  _getCached() {
    if (this._cached !== null)
      return this._cached;
    const shape = this._def.shape();
    const keys = util.objectKeys(shape);
    return this._cached = { shape, keys };
  }
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.object) {
      const ctx2 = this._getOrReturnCtx(input);
      addIssueToContext(ctx2, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx2.parsedType
      });
      return INVALID;
    }
    const { status, ctx } = this._processInputParams(input);
    const { shape, keys: shapeKeys } = this._getCached();
    const extraKeys = [];
    if (!(this._def.catchall instanceof ZodNever && this._def.unknownKeys === "strip")) {
      for (const key in ctx.data) {
        if (!shapeKeys.includes(key)) {
          extraKeys.push(key);
        }
      }
    }
    const pairs = [];
    for (const key of shapeKeys) {
      const keyValidator = shape[key];
      const value = ctx.data[key];
      pairs.push({
        key: { status: "valid", value: key },
        value: keyValidator._parse(new ParseInputLazyPath(ctx, value, ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (this._def.catchall instanceof ZodNever) {
      const unknownKeys = this._def.unknownKeys;
      if (unknownKeys === "passthrough") {
        for (const key of extraKeys) {
          pairs.push({
            key: { status: "valid", value: key },
            value: { status: "valid", value: ctx.data[key] }
          });
        }
      } else if (unknownKeys === "strict") {
        if (extraKeys.length > 0) {
          addIssueToContext(ctx, {
            code: ZodIssueCode.unrecognized_keys,
            keys: extraKeys
          });
          status.dirty();
        }
      } else if (unknownKeys === "strip")
        ;
      else {
        throw new Error(`Internal ZodObject error: invalid unknownKeys value.`);
      }
    } else {
      const catchall = this._def.catchall;
      for (const key of extraKeys) {
        const value = ctx.data[key];
        pairs.push({
          key: { status: "valid", value: key },
          value: catchall._parse(
            new ParseInputLazyPath(ctx, value, ctx.path, key)
            //, ctx.child(key), value, getParsedType(value)
          ),
          alwaysSet: key in ctx.data
        });
      }
    }
    if (ctx.common.async) {
      return Promise.resolve().then(async () => {
        const syncPairs = [];
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          syncPairs.push({
            key,
            value,
            alwaysSet: pair.alwaysSet
          });
        }
        return syncPairs;
      }).then((syncPairs) => {
        return ParseStatus.mergeObjectSync(status, syncPairs);
      });
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get shape() {
    return this._def.shape();
  }
  strict(message) {
    errorUtil.errToObj;
    return new _ZodObject({
      ...this._def,
      unknownKeys: "strict",
      ...message !== void 0 ? {
        errorMap: (issue, ctx) => {
          var _a, _b, _c, _d;
          const defaultError = (_c = (_b = (_a = this._def).errorMap) === null || _b === void 0 ? void 0 : _b.call(_a, issue, ctx).message) !== null && _c !== void 0 ? _c : ctx.defaultError;
          if (issue.code === "unrecognized_keys")
            return {
              message: (_d = errorUtil.errToObj(message).message) !== null && _d !== void 0 ? _d : defaultError
            };
          return {
            message: defaultError
          };
        }
      } : {}
    });
  }
  strip() {
    return new _ZodObject({
      ...this._def,
      unknownKeys: "strip"
    });
  }
  passthrough() {
    return new _ZodObject({
      ...this._def,
      unknownKeys: "passthrough"
    });
  }
  // const AugmentFactory =
  //   <Def extends ZodObjectDef>(def: Def) =>
  //   <Augmentation extends ZodRawShape>(
  //     augmentation: Augmentation
  //   ): ZodObject<
  //     extendShape<ReturnType<Def["shape"]>, Augmentation>,
  //     Def["unknownKeys"],
  //     Def["catchall"]
  //   > => {
  //     return new ZodObject({
  //       ...def,
  //       shape: () => ({
  //         ...def.shape(),
  //         ...augmentation,
  //       }),
  //     }) as any;
  //   };
  extend(augmentation) {
    return new _ZodObject({
      ...this._def,
      shape: () => ({
        ...this._def.shape(),
        ...augmentation
      })
    });
  }
  /**
   * Prior to zod@1.0.12 there was a bug in the
   * inferred type of merged objects. Please
   * upgrade if you are experiencing issues.
   */
  merge(merging) {
    const merged = new _ZodObject({
      unknownKeys: merging._def.unknownKeys,
      catchall: merging._def.catchall,
      shape: () => ({
        ...this._def.shape(),
        ...merging._def.shape()
      }),
      typeName: ZodFirstPartyTypeKind.ZodObject
    });
    return merged;
  }
  // merge<
  //   Incoming extends AnyZodObject,
  //   Augmentation extends Incoming["shape"],
  //   NewOutput extends {
  //     [k in keyof Augmentation | keyof Output]: k extends keyof Augmentation
  //       ? Augmentation[k]["_output"]
  //       : k extends keyof Output
  //       ? Output[k]
  //       : never;
  //   },
  //   NewInput extends {
  //     [k in keyof Augmentation | keyof Input]: k extends keyof Augmentation
  //       ? Augmentation[k]["_input"]
  //       : k extends keyof Input
  //       ? Input[k]
  //       : never;
  //   }
  // >(
  //   merging: Incoming
  // ): ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"],
  //   NewOutput,
  //   NewInput
  // > {
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  setKey(key, schema) {
    return this.augment({ [key]: schema });
  }
  // merge<Incoming extends AnyZodObject>(
  //   merging: Incoming
  // ): //ZodObject<T & Incoming["_shape"], UnknownKeys, Catchall> = (merging) => {
  // ZodObject<
  //   extendShape<T, ReturnType<Incoming["_def"]["shape"]>>,
  //   Incoming["_def"]["unknownKeys"],
  //   Incoming["_def"]["catchall"]
  // > {
  //   // const mergedShape = objectUtil.mergeShapes(
  //   //   this._def.shape(),
  //   //   merging._def.shape()
  //   // );
  //   const merged: any = new ZodObject({
  //     unknownKeys: merging._def.unknownKeys,
  //     catchall: merging._def.catchall,
  //     shape: () =>
  //       objectUtil.mergeShapes(this._def.shape(), merging._def.shape()),
  //     typeName: ZodFirstPartyTypeKind.ZodObject,
  //   }) as any;
  //   return merged;
  // }
  catchall(index) {
    return new _ZodObject({
      ...this._def,
      catchall: index
    });
  }
  pick(mask) {
    const shape = {};
    util.objectKeys(mask).forEach((key) => {
      if (mask[key] && this.shape[key]) {
        shape[key] = this.shape[key];
      }
    });
    return new _ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  omit(mask) {
    const shape = {};
    util.objectKeys(this.shape).forEach((key) => {
      if (!mask[key]) {
        shape[key] = this.shape[key];
      }
    });
    return new _ZodObject({
      ...this._def,
      shape: () => shape
    });
  }
  /**
   * @deprecated
   */
  deepPartial() {
    return deepPartialify(this);
  }
  partial(mask) {
    const newShape = {};
    util.objectKeys(this.shape).forEach((key) => {
      const fieldSchema = this.shape[key];
      if (mask && !mask[key]) {
        newShape[key] = fieldSchema;
      } else {
        newShape[key] = fieldSchema.optional();
      }
    });
    return new _ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  required(mask) {
    const newShape = {};
    util.objectKeys(this.shape).forEach((key) => {
      if (mask && !mask[key]) {
        newShape[key] = this.shape[key];
      } else {
        const fieldSchema = this.shape[key];
        let newField = fieldSchema;
        while (newField instanceof ZodOptional) {
          newField = newField._def.innerType;
        }
        newShape[key] = newField;
      }
    });
    return new _ZodObject({
      ...this._def,
      shape: () => newShape
    });
  }
  keyof() {
    return createZodEnum(util.objectKeys(this.shape));
  }
};
ZodObject.create = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.strictCreate = (shape, params) => {
  return new ZodObject({
    shape: () => shape,
    unknownKeys: "strict",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
ZodObject.lazycreate = (shape, params) => {
  return new ZodObject({
    shape,
    unknownKeys: "strip",
    catchall: ZodNever.create(),
    typeName: ZodFirstPartyTypeKind.ZodObject,
    ...processCreateParams(params)
  });
};
var ZodUnion = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const options = this._def.options;
    function handleResults(results) {
      for (const result of results) {
        if (result.result.status === "valid") {
          return result.result;
        }
      }
      for (const result of results) {
        if (result.result.status === "dirty") {
          ctx.common.issues.push(...result.ctx.common.issues);
          return result.result;
        }
      }
      const unionErrors = results.map((result) => new ZodError(result.ctx.common.issues));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return Promise.all(options.map(async (option) => {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        return {
          result: await option._parseAsync({
            data: ctx.data,
            path: ctx.path,
            parent: childCtx
          }),
          ctx: childCtx
        };
      })).then(handleResults);
    } else {
      let dirty = void 0;
      const issues = [];
      for (const option of options) {
        const childCtx = {
          ...ctx,
          common: {
            ...ctx.common,
            issues: []
          },
          parent: null
        };
        const result = option._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: childCtx
        });
        if (result.status === "valid") {
          return result;
        } else if (result.status === "dirty" && !dirty) {
          dirty = { result, ctx: childCtx };
        }
        if (childCtx.common.issues.length) {
          issues.push(childCtx.common.issues);
        }
      }
      if (dirty) {
        ctx.common.issues.push(...dirty.ctx.common.issues);
        return dirty.result;
      }
      const unionErrors = issues.map((issues2) => new ZodError(issues2));
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union,
        unionErrors
      });
      return INVALID;
    }
  }
  get options() {
    return this._def.options;
  }
};
ZodUnion.create = (types, params) => {
  return new ZodUnion({
    options: types,
    typeName: ZodFirstPartyTypeKind.ZodUnion,
    ...processCreateParams(params)
  });
};
var getDiscriminator = (type) => {
  if (type instanceof ZodLazy) {
    return getDiscriminator(type.schema);
  } else if (type instanceof ZodEffects) {
    return getDiscriminator(type.innerType());
  } else if (type instanceof ZodLiteral) {
    return [type.value];
  } else if (type instanceof ZodEnum) {
    return type.options;
  } else if (type instanceof ZodNativeEnum) {
    return util.objectValues(type.enum);
  } else if (type instanceof ZodDefault) {
    return getDiscriminator(type._def.innerType);
  } else if (type instanceof ZodUndefined) {
    return [void 0];
  } else if (type instanceof ZodNull) {
    return [null];
  } else if (type instanceof ZodOptional) {
    return [void 0, ...getDiscriminator(type.unwrap())];
  } else if (type instanceof ZodNullable) {
    return [null, ...getDiscriminator(type.unwrap())];
  } else if (type instanceof ZodBranded) {
    return getDiscriminator(type.unwrap());
  } else if (type instanceof ZodReadonly) {
    return getDiscriminator(type.unwrap());
  } else if (type instanceof ZodCatch) {
    return getDiscriminator(type._def.innerType);
  } else {
    return [];
  }
};
var ZodDiscriminatedUnion = class _ZodDiscriminatedUnion extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const discriminator = this.discriminator;
    const discriminatorValue = ctx.data[discriminator];
    const option = this.optionsMap.get(discriminatorValue);
    if (!option) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_union_discriminator,
        options: Array.from(this.optionsMap.keys()),
        path: [discriminator]
      });
      return INVALID;
    }
    if (ctx.common.async) {
      return option._parseAsync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    } else {
      return option._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
    }
  }
  get discriminator() {
    return this._def.discriminator;
  }
  get options() {
    return this._def.options;
  }
  get optionsMap() {
    return this._def.optionsMap;
  }
  /**
   * The constructor of the discriminated union schema. Its behaviour is very similar to that of the normal z.union() constructor.
   * However, it only allows a union of objects, all of which need to share a discriminator property. This property must
   * have a different value for each object in the union.
   * @param discriminator the name of the discriminator property
   * @param types an array of object schemas
   * @param params
   */
  static create(discriminator, options, params) {
    const optionsMap = /* @__PURE__ */ new Map();
    for (const type of options) {
      const discriminatorValues = getDiscriminator(type.shape[discriminator]);
      if (!discriminatorValues.length) {
        throw new Error(`A discriminator value for key \`${discriminator}\` could not be extracted from all schema options`);
      }
      for (const value of discriminatorValues) {
        if (optionsMap.has(value)) {
          throw new Error(`Discriminator property ${String(discriminator)} has duplicate value ${String(value)}`);
        }
        optionsMap.set(value, type);
      }
    }
    return new _ZodDiscriminatedUnion({
      typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion,
      discriminator,
      options,
      optionsMap,
      ...processCreateParams(params)
    });
  }
};
function mergeValues(a, b) {
  const aType = getParsedType(a);
  const bType = getParsedType(b);
  if (a === b) {
    return { valid: true, data: a };
  } else if (aType === ZodParsedType.object && bType === ZodParsedType.object) {
    const bKeys = util.objectKeys(b);
    const sharedKeys = util.objectKeys(a).filter((key) => bKeys.indexOf(key) !== -1);
    const newObj = { ...a, ...b };
    for (const key of sharedKeys) {
      const sharedValue = mergeValues(a[key], b[key]);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newObj[key] = sharedValue.data;
    }
    return { valid: true, data: newObj };
  } else if (aType === ZodParsedType.array && bType === ZodParsedType.array) {
    if (a.length !== b.length) {
      return { valid: false };
    }
    const newArray = [];
    for (let index = 0; index < a.length; index++) {
      const itemA = a[index];
      const itemB = b[index];
      const sharedValue = mergeValues(itemA, itemB);
      if (!sharedValue.valid) {
        return { valid: false };
      }
      newArray.push(sharedValue.data);
    }
    return { valid: true, data: newArray };
  } else if (aType === ZodParsedType.date && bType === ZodParsedType.date && +a === +b) {
    return { valid: true, data: a };
  } else {
    return { valid: false };
  }
}
var ZodIntersection = class extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const handleParsed = (parsedLeft, parsedRight) => {
      if (isAborted(parsedLeft) || isAborted(parsedRight)) {
        return INVALID;
      }
      const merged = mergeValues(parsedLeft.value, parsedRight.value);
      if (!merged.valid) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.invalid_intersection_types
        });
        return INVALID;
      }
      if (isDirty(parsedLeft) || isDirty(parsedRight)) {
        status.dirty();
      }
      return { status: status.value, value: merged.data };
    };
    if (ctx.common.async) {
      return Promise.all([
        this._def.left._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        }),
        this._def.right._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        })
      ]).then(([left, right]) => handleParsed(left, right));
    } else {
      return handleParsed(this._def.left._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }), this._def.right._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      }));
    }
  }
};
ZodIntersection.create = (left, right, params) => {
  return new ZodIntersection({
    left,
    right,
    typeName: ZodFirstPartyTypeKind.ZodIntersection,
    ...processCreateParams(params)
  });
};
var ZodTuple = class _ZodTuple extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.array) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.array,
        received: ctx.parsedType
      });
      return INVALID;
    }
    if (ctx.data.length < this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_small,
        minimum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      return INVALID;
    }
    const rest = this._def.rest;
    if (!rest && ctx.data.length > this._def.items.length) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.too_big,
        maximum: this._def.items.length,
        inclusive: true,
        exact: false,
        type: "array"
      });
      status.dirty();
    }
    const items = [...ctx.data].map((item, itemIndex) => {
      const schema = this._def.items[itemIndex] || this._def.rest;
      if (!schema)
        return null;
      return schema._parse(new ParseInputLazyPath(ctx, item, ctx.path, itemIndex));
    }).filter((x) => !!x);
    if (ctx.common.async) {
      return Promise.all(items).then((results) => {
        return ParseStatus.mergeArray(status, results);
      });
    } else {
      return ParseStatus.mergeArray(status, items);
    }
  }
  get items() {
    return this._def.items;
  }
  rest(rest) {
    return new _ZodTuple({
      ...this._def,
      rest
    });
  }
};
ZodTuple.create = (schemas, params) => {
  if (!Array.isArray(schemas)) {
    throw new Error("You must pass an array of schemas to z.tuple([ ... ])");
  }
  return new ZodTuple({
    items: schemas,
    typeName: ZodFirstPartyTypeKind.ZodTuple,
    rest: null,
    ...processCreateParams(params)
  });
};
var ZodRecord = class _ZodRecord extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.object) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.object,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const pairs = [];
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    for (const key in ctx.data) {
      pairs.push({
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, key)),
        value: valueType._parse(new ParseInputLazyPath(ctx, ctx.data[key], ctx.path, key)),
        alwaysSet: key in ctx.data
      });
    }
    if (ctx.common.async) {
      return ParseStatus.mergeObjectAsync(status, pairs);
    } else {
      return ParseStatus.mergeObjectSync(status, pairs);
    }
  }
  get element() {
    return this._def.valueType;
  }
  static create(first, second, third) {
    if (second instanceof ZodType) {
      return new _ZodRecord({
        keyType: first,
        valueType: second,
        typeName: ZodFirstPartyTypeKind.ZodRecord,
        ...processCreateParams(third)
      });
    }
    return new _ZodRecord({
      keyType: ZodString.create(),
      valueType: first,
      typeName: ZodFirstPartyTypeKind.ZodRecord,
      ...processCreateParams(second)
    });
  }
};
var ZodMap = class extends ZodType {
  get keySchema() {
    return this._def.keyType;
  }
  get valueSchema() {
    return this._def.valueType;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.map) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.map,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const keyType = this._def.keyType;
    const valueType = this._def.valueType;
    const pairs = [...ctx.data.entries()].map(([key, value], index) => {
      return {
        key: keyType._parse(new ParseInputLazyPath(ctx, key, ctx.path, [index, "key"])),
        value: valueType._parse(new ParseInputLazyPath(ctx, value, ctx.path, [index, "value"]))
      };
    });
    if (ctx.common.async) {
      const finalMap = /* @__PURE__ */ new Map();
      return Promise.resolve().then(async () => {
        for (const pair of pairs) {
          const key = await pair.key;
          const value = await pair.value;
          if (key.status === "aborted" || value.status === "aborted") {
            return INVALID;
          }
          if (key.status === "dirty" || value.status === "dirty") {
            status.dirty();
          }
          finalMap.set(key.value, value.value);
        }
        return { status: status.value, value: finalMap };
      });
    } else {
      const finalMap = /* @__PURE__ */ new Map();
      for (const pair of pairs) {
        const key = pair.key;
        const value = pair.value;
        if (key.status === "aborted" || value.status === "aborted") {
          return INVALID;
        }
        if (key.status === "dirty" || value.status === "dirty") {
          status.dirty();
        }
        finalMap.set(key.value, value.value);
      }
      return { status: status.value, value: finalMap };
    }
  }
};
ZodMap.create = (keyType, valueType, params) => {
  return new ZodMap({
    valueType,
    keyType,
    typeName: ZodFirstPartyTypeKind.ZodMap,
    ...processCreateParams(params)
  });
};
var ZodSet = class _ZodSet extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.set) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.set,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const def = this._def;
    if (def.minSize !== null) {
      if (ctx.data.size < def.minSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_small,
          minimum: def.minSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.minSize.message
        });
        status.dirty();
      }
    }
    if (def.maxSize !== null) {
      if (ctx.data.size > def.maxSize.value) {
        addIssueToContext(ctx, {
          code: ZodIssueCode.too_big,
          maximum: def.maxSize.value,
          type: "set",
          inclusive: true,
          exact: false,
          message: def.maxSize.message
        });
        status.dirty();
      }
    }
    const valueType = this._def.valueType;
    function finalizeSet(elements2) {
      const parsedSet = /* @__PURE__ */ new Set();
      for (const element of elements2) {
        if (element.status === "aborted")
          return INVALID;
        if (element.status === "dirty")
          status.dirty();
        parsedSet.add(element.value);
      }
      return { status: status.value, value: parsedSet };
    }
    const elements = [...ctx.data.values()].map((item, i) => valueType._parse(new ParseInputLazyPath(ctx, item, ctx.path, i)));
    if (ctx.common.async) {
      return Promise.all(elements).then((elements2) => finalizeSet(elements2));
    } else {
      return finalizeSet(elements);
    }
  }
  min(minSize, message) {
    return new _ZodSet({
      ...this._def,
      minSize: { value: minSize, message: errorUtil.toString(message) }
    });
  }
  max(maxSize, message) {
    return new _ZodSet({
      ...this._def,
      maxSize: { value: maxSize, message: errorUtil.toString(message) }
    });
  }
  size(size, message) {
    return this.min(size, message).max(size, message);
  }
  nonempty(message) {
    return this.min(1, message);
  }
};
ZodSet.create = (valueType, params) => {
  return new ZodSet({
    valueType,
    minSize: null,
    maxSize: null,
    typeName: ZodFirstPartyTypeKind.ZodSet,
    ...processCreateParams(params)
  });
};
var ZodFunction = class _ZodFunction extends ZodType {
  constructor() {
    super(...arguments);
    this.validate = this.implement;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.function) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.function,
        received: ctx.parsedType
      });
      return INVALID;
    }
    function makeArgsIssue(args, error) {
      return makeIssue({
        data: args,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          getErrorMap(),
          errorMap
        ].filter((x) => !!x),
        issueData: {
          code: ZodIssueCode.invalid_arguments,
          argumentsError: error
        }
      });
    }
    function makeReturnsIssue(returns, error) {
      return makeIssue({
        data: returns,
        path: ctx.path,
        errorMaps: [
          ctx.common.contextualErrorMap,
          ctx.schemaErrorMap,
          getErrorMap(),
          errorMap
        ].filter((x) => !!x),
        issueData: {
          code: ZodIssueCode.invalid_return_type,
          returnTypeError: error
        }
      });
    }
    const params = { errorMap: ctx.common.contextualErrorMap };
    const fn = ctx.data;
    if (this._def.returns instanceof ZodPromise) {
      const me = this;
      return OK(async function(...args) {
        const error = new ZodError([]);
        const parsedArgs = await me._def.args.parseAsync(args, params).catch((e) => {
          error.addIssue(makeArgsIssue(args, e));
          throw error;
        });
        const result = await Reflect.apply(fn, this, parsedArgs);
        const parsedReturns = await me._def.returns._def.type.parseAsync(result, params).catch((e) => {
          error.addIssue(makeReturnsIssue(result, e));
          throw error;
        });
        return parsedReturns;
      });
    } else {
      const me = this;
      return OK(function(...args) {
        const parsedArgs = me._def.args.safeParse(args, params);
        if (!parsedArgs.success) {
          throw new ZodError([makeArgsIssue(args, parsedArgs.error)]);
        }
        const result = Reflect.apply(fn, this, parsedArgs.data);
        const parsedReturns = me._def.returns.safeParse(result, params);
        if (!parsedReturns.success) {
          throw new ZodError([makeReturnsIssue(result, parsedReturns.error)]);
        }
        return parsedReturns.data;
      });
    }
  }
  parameters() {
    return this._def.args;
  }
  returnType() {
    return this._def.returns;
  }
  args(...items) {
    return new _ZodFunction({
      ...this._def,
      args: ZodTuple.create(items).rest(ZodUnknown.create())
    });
  }
  returns(returnType) {
    return new _ZodFunction({
      ...this._def,
      returns: returnType
    });
  }
  implement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  strictImplement(func) {
    const validatedFunc = this.parse(func);
    return validatedFunc;
  }
  static create(args, returns, params) {
    return new _ZodFunction({
      args: args ? args : ZodTuple.create([]).rest(ZodUnknown.create()),
      returns: returns || ZodUnknown.create(),
      typeName: ZodFirstPartyTypeKind.ZodFunction,
      ...processCreateParams(params)
    });
  }
};
var ZodLazy = class extends ZodType {
  get schema() {
    return this._def.getter();
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const lazySchema = this._def.getter();
    return lazySchema._parse({ data: ctx.data, path: ctx.path, parent: ctx });
  }
};
ZodLazy.create = (getter, params) => {
  return new ZodLazy({
    getter,
    typeName: ZodFirstPartyTypeKind.ZodLazy,
    ...processCreateParams(params)
  });
};
var ZodLiteral = class extends ZodType {
  _parse(input) {
    if (input.data !== this._def.value) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_literal,
        expected: this._def.value
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
  get value() {
    return this._def.value;
  }
};
ZodLiteral.create = (value, params) => {
  return new ZodLiteral({
    value,
    typeName: ZodFirstPartyTypeKind.ZodLiteral,
    ...processCreateParams(params)
  });
};
function createZodEnum(values, params) {
  return new ZodEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodEnum,
    ...processCreateParams(params)
  });
}
var ZodEnum = class _ZodEnum extends ZodType {
  constructor() {
    super(...arguments);
    _ZodEnum_cache.set(this, void 0);
  }
  _parse(input) {
    if (typeof input.data !== "string") {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f")) {
      __classPrivateFieldSet(this, _ZodEnum_cache, new Set(this._def.values), "f");
    }
    if (!__classPrivateFieldGet(this, _ZodEnum_cache, "f").has(input.data)) {
      const ctx = this._getOrReturnCtx(input);
      const expectedValues = this._def.values;
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get options() {
    return this._def.values;
  }
  get enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Values() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  get Enum() {
    const enumValues = {};
    for (const val of this._def.values) {
      enumValues[val] = val;
    }
    return enumValues;
  }
  extract(values, newDef = this._def) {
    return _ZodEnum.create(values, {
      ...this._def,
      ...newDef
    });
  }
  exclude(values, newDef = this._def) {
    return _ZodEnum.create(this.options.filter((opt) => !values.includes(opt)), {
      ...this._def,
      ...newDef
    });
  }
};
_ZodEnum_cache = /* @__PURE__ */ new WeakMap();
ZodEnum.create = createZodEnum;
var ZodNativeEnum = class extends ZodType {
  constructor() {
    super(...arguments);
    _ZodNativeEnum_cache.set(this, void 0);
  }
  _parse(input) {
    const nativeEnumValues = util.getValidEnumValues(this._def.values);
    const ctx = this._getOrReturnCtx(input);
    if (ctx.parsedType !== ZodParsedType.string && ctx.parsedType !== ZodParsedType.number) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        expected: util.joinValues(expectedValues),
        received: ctx.parsedType,
        code: ZodIssueCode.invalid_type
      });
      return INVALID;
    }
    if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f")) {
      __classPrivateFieldSet(this, _ZodNativeEnum_cache, new Set(util.getValidEnumValues(this._def.values)), "f");
    }
    if (!__classPrivateFieldGet(this, _ZodNativeEnum_cache, "f").has(input.data)) {
      const expectedValues = util.objectValues(nativeEnumValues);
      addIssueToContext(ctx, {
        received: ctx.data,
        code: ZodIssueCode.invalid_enum_value,
        options: expectedValues
      });
      return INVALID;
    }
    return OK(input.data);
  }
  get enum() {
    return this._def.values;
  }
};
_ZodNativeEnum_cache = /* @__PURE__ */ new WeakMap();
ZodNativeEnum.create = (values, params) => {
  return new ZodNativeEnum({
    values,
    typeName: ZodFirstPartyTypeKind.ZodNativeEnum,
    ...processCreateParams(params)
  });
};
var ZodPromise = class extends ZodType {
  unwrap() {
    return this._def.type;
  }
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    if (ctx.parsedType !== ZodParsedType.promise && ctx.common.async === false) {
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.promise,
        received: ctx.parsedType
      });
      return INVALID;
    }
    const promisified = ctx.parsedType === ZodParsedType.promise ? ctx.data : Promise.resolve(ctx.data);
    return OK(promisified.then((data) => {
      return this._def.type.parseAsync(data, {
        path: ctx.path,
        errorMap: ctx.common.contextualErrorMap
      });
    }));
  }
};
ZodPromise.create = (schema, params) => {
  return new ZodPromise({
    type: schema,
    typeName: ZodFirstPartyTypeKind.ZodPromise,
    ...processCreateParams(params)
  });
};
var ZodEffects = class extends ZodType {
  innerType() {
    return this._def.schema;
  }
  sourceType() {
    return this._def.schema._def.typeName === ZodFirstPartyTypeKind.ZodEffects ? this._def.schema.sourceType() : this._def.schema;
  }
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    const effect = this._def.effect || null;
    const checkCtx = {
      addIssue: (arg) => {
        addIssueToContext(ctx, arg);
        if (arg.fatal) {
          status.abort();
        } else {
          status.dirty();
        }
      },
      get path() {
        return ctx.path;
      }
    };
    checkCtx.addIssue = checkCtx.addIssue.bind(checkCtx);
    if (effect.type === "preprocess") {
      const processed = effect.transform(ctx.data, checkCtx);
      if (ctx.common.async) {
        return Promise.resolve(processed).then(async (processed2) => {
          if (status.value === "aborted")
            return INVALID;
          const result = await this._def.schema._parseAsync({
            data: processed2,
            path: ctx.path,
            parent: ctx
          });
          if (result.status === "aborted")
            return INVALID;
          if (result.status === "dirty")
            return DIRTY(result.value);
          if (status.value === "dirty")
            return DIRTY(result.value);
          return result;
        });
      } else {
        if (status.value === "aborted")
          return INVALID;
        const result = this._def.schema._parseSync({
          data: processed,
          path: ctx.path,
          parent: ctx
        });
        if (result.status === "aborted")
          return INVALID;
        if (result.status === "dirty")
          return DIRTY(result.value);
        if (status.value === "dirty")
          return DIRTY(result.value);
        return result;
      }
    }
    if (effect.type === "refinement") {
      const executeRefinement = (acc) => {
        const result = effect.refinement(acc, checkCtx);
        if (ctx.common.async) {
          return Promise.resolve(result);
        }
        if (result instanceof Promise) {
          throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");
        }
        return acc;
      };
      if (ctx.common.async === false) {
        const inner = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inner.status === "aborted")
          return INVALID;
        if (inner.status === "dirty")
          status.dirty();
        executeRefinement(inner.value);
        return { status: status.value, value: inner.value };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((inner) => {
          if (inner.status === "aborted")
            return INVALID;
          if (inner.status === "dirty")
            status.dirty();
          return executeRefinement(inner.value).then(() => {
            return { status: status.value, value: inner.value };
          });
        });
      }
    }
    if (effect.type === "transform") {
      if (ctx.common.async === false) {
        const base = this._def.schema._parseSync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (!isValid(base))
          return base;
        const result = effect.transform(base.value, checkCtx);
        if (result instanceof Promise) {
          throw new Error(`Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.`);
        }
        return { status: status.value, value: result };
      } else {
        return this._def.schema._parseAsync({ data: ctx.data, path: ctx.path, parent: ctx }).then((base) => {
          if (!isValid(base))
            return base;
          return Promise.resolve(effect.transform(base.value, checkCtx)).then((result) => ({ status: status.value, value: result }));
        });
      }
    }
    util.assertNever(effect);
  }
};
ZodEffects.create = (schema, effect, params) => {
  return new ZodEffects({
    schema,
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    effect,
    ...processCreateParams(params)
  });
};
ZodEffects.createWithPreprocess = (preprocess, schema, params) => {
  return new ZodEffects({
    schema,
    effect: { type: "preprocess", transform: preprocess },
    typeName: ZodFirstPartyTypeKind.ZodEffects,
    ...processCreateParams(params)
  });
};
var ZodOptional = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.undefined) {
      return OK(void 0);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodOptional.create = (type, params) => {
  return new ZodOptional({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodOptional,
    ...processCreateParams(params)
  });
};
var ZodNullable = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType === ZodParsedType.null) {
      return OK(null);
    }
    return this._def.innerType._parse(input);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodNullable.create = (type, params) => {
  return new ZodNullable({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodNullable,
    ...processCreateParams(params)
  });
};
var ZodDefault = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    let data = ctx.data;
    if (ctx.parsedType === ZodParsedType.undefined) {
      data = this._def.defaultValue();
    }
    return this._def.innerType._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  removeDefault() {
    return this._def.innerType;
  }
};
ZodDefault.create = (type, params) => {
  return new ZodDefault({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodDefault,
    defaultValue: typeof params.default === "function" ? params.default : () => params.default,
    ...processCreateParams(params)
  });
};
var ZodCatch = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const newCtx = {
      ...ctx,
      common: {
        ...ctx.common,
        issues: []
      }
    };
    const result = this._def.innerType._parse({
      data: newCtx.data,
      path: newCtx.path,
      parent: {
        ...newCtx
      }
    });
    if (isAsync(result)) {
      return result.then((result2) => {
        return {
          status: "valid",
          value: result2.status === "valid" ? result2.value : this._def.catchValue({
            get error() {
              return new ZodError(newCtx.common.issues);
            },
            input: newCtx.data
          })
        };
      });
    } else {
      return {
        status: "valid",
        value: result.status === "valid" ? result.value : this._def.catchValue({
          get error() {
            return new ZodError(newCtx.common.issues);
          },
          input: newCtx.data
        })
      };
    }
  }
  removeCatch() {
    return this._def.innerType;
  }
};
ZodCatch.create = (type, params) => {
  return new ZodCatch({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodCatch,
    catchValue: typeof params.catch === "function" ? params.catch : () => params.catch,
    ...processCreateParams(params)
  });
};
var ZodNaN = class extends ZodType {
  _parse(input) {
    const parsedType = this._getType(input);
    if (parsedType !== ZodParsedType.nan) {
      const ctx = this._getOrReturnCtx(input);
      addIssueToContext(ctx, {
        code: ZodIssueCode.invalid_type,
        expected: ZodParsedType.nan,
        received: ctx.parsedType
      });
      return INVALID;
    }
    return { status: "valid", value: input.data };
  }
};
ZodNaN.create = (params) => {
  return new ZodNaN({
    typeName: ZodFirstPartyTypeKind.ZodNaN,
    ...processCreateParams(params)
  });
};
var BRAND = Symbol("zod_brand");
var ZodBranded = class extends ZodType {
  _parse(input) {
    const { ctx } = this._processInputParams(input);
    const data = ctx.data;
    return this._def.type._parse({
      data,
      path: ctx.path,
      parent: ctx
    });
  }
  unwrap() {
    return this._def.type;
  }
};
var ZodPipeline = class _ZodPipeline extends ZodType {
  _parse(input) {
    const { status, ctx } = this._processInputParams(input);
    if (ctx.common.async) {
      const handleAsync = async () => {
        const inResult = await this._def.in._parseAsync({
          data: ctx.data,
          path: ctx.path,
          parent: ctx
        });
        if (inResult.status === "aborted")
          return INVALID;
        if (inResult.status === "dirty") {
          status.dirty();
          return DIRTY(inResult.value);
        } else {
          return this._def.out._parseAsync({
            data: inResult.value,
            path: ctx.path,
            parent: ctx
          });
        }
      };
      return handleAsync();
    } else {
      const inResult = this._def.in._parseSync({
        data: ctx.data,
        path: ctx.path,
        parent: ctx
      });
      if (inResult.status === "aborted")
        return INVALID;
      if (inResult.status === "dirty") {
        status.dirty();
        return {
          status: "dirty",
          value: inResult.value
        };
      } else {
        return this._def.out._parseSync({
          data: inResult.value,
          path: ctx.path,
          parent: ctx
        });
      }
    }
  }
  static create(a, b) {
    return new _ZodPipeline({
      in: a,
      out: b,
      typeName: ZodFirstPartyTypeKind.ZodPipeline
    });
  }
};
var ZodReadonly = class extends ZodType {
  _parse(input) {
    const result = this._def.innerType._parse(input);
    const freeze = (data) => {
      if (isValid(data)) {
        data.value = Object.freeze(data.value);
      }
      return data;
    };
    return isAsync(result) ? result.then((data) => freeze(data)) : freeze(result);
  }
  unwrap() {
    return this._def.innerType;
  }
};
ZodReadonly.create = (type, params) => {
  return new ZodReadonly({
    innerType: type,
    typeName: ZodFirstPartyTypeKind.ZodReadonly,
    ...processCreateParams(params)
  });
};
function cleanParams(params, data) {
  const p = typeof params === "function" ? params(data) : typeof params === "string" ? { message: params } : params;
  const p2 = typeof p === "string" ? { message: p } : p;
  return p2;
}
function custom(check, _params = {}, fatal) {
  if (check)
    return ZodAny.create().superRefine((data, ctx) => {
      var _a, _b;
      const r = check(data);
      if (r instanceof Promise) {
        return r.then((r2) => {
          var _a2, _b2;
          if (!r2) {
            const params = cleanParams(_params, data);
            const _fatal = (_b2 = (_a2 = params.fatal) !== null && _a2 !== void 0 ? _a2 : fatal) !== null && _b2 !== void 0 ? _b2 : true;
            ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
          }
        });
      }
      if (!r) {
        const params = cleanParams(_params, data);
        const _fatal = (_b = (_a = params.fatal) !== null && _a !== void 0 ? _a : fatal) !== null && _b !== void 0 ? _b : true;
        ctx.addIssue({ code: "custom", ...params, fatal: _fatal });
      }
      return;
    });
  return ZodAny.create();
}
var late = {
  object: ZodObject.lazycreate
};
var ZodFirstPartyTypeKind;
(function(ZodFirstPartyTypeKind2) {
  ZodFirstPartyTypeKind2["ZodString"] = "ZodString";
  ZodFirstPartyTypeKind2["ZodNumber"] = "ZodNumber";
  ZodFirstPartyTypeKind2["ZodNaN"] = "ZodNaN";
  ZodFirstPartyTypeKind2["ZodBigInt"] = "ZodBigInt";
  ZodFirstPartyTypeKind2["ZodBoolean"] = "ZodBoolean";
  ZodFirstPartyTypeKind2["ZodDate"] = "ZodDate";
  ZodFirstPartyTypeKind2["ZodSymbol"] = "ZodSymbol";
  ZodFirstPartyTypeKind2["ZodUndefined"] = "ZodUndefined";
  ZodFirstPartyTypeKind2["ZodNull"] = "ZodNull";
  ZodFirstPartyTypeKind2["ZodAny"] = "ZodAny";
  ZodFirstPartyTypeKind2["ZodUnknown"] = "ZodUnknown";
  ZodFirstPartyTypeKind2["ZodNever"] = "ZodNever";
  ZodFirstPartyTypeKind2["ZodVoid"] = "ZodVoid";
  ZodFirstPartyTypeKind2["ZodArray"] = "ZodArray";
  ZodFirstPartyTypeKind2["ZodObject"] = "ZodObject";
  ZodFirstPartyTypeKind2["ZodUnion"] = "ZodUnion";
  ZodFirstPartyTypeKind2["ZodDiscriminatedUnion"] = "ZodDiscriminatedUnion";
  ZodFirstPartyTypeKind2["ZodIntersection"] = "ZodIntersection";
  ZodFirstPartyTypeKind2["ZodTuple"] = "ZodTuple";
  ZodFirstPartyTypeKind2["ZodRecord"] = "ZodRecord";
  ZodFirstPartyTypeKind2["ZodMap"] = "ZodMap";
  ZodFirstPartyTypeKind2["ZodSet"] = "ZodSet";
  ZodFirstPartyTypeKind2["ZodFunction"] = "ZodFunction";
  ZodFirstPartyTypeKind2["ZodLazy"] = "ZodLazy";
  ZodFirstPartyTypeKind2["ZodLiteral"] = "ZodLiteral";
  ZodFirstPartyTypeKind2["ZodEnum"] = "ZodEnum";
  ZodFirstPartyTypeKind2["ZodEffects"] = "ZodEffects";
  ZodFirstPartyTypeKind2["ZodNativeEnum"] = "ZodNativeEnum";
  ZodFirstPartyTypeKind2["ZodOptional"] = "ZodOptional";
  ZodFirstPartyTypeKind2["ZodNullable"] = "ZodNullable";
  ZodFirstPartyTypeKind2["ZodDefault"] = "ZodDefault";
  ZodFirstPartyTypeKind2["ZodCatch"] = "ZodCatch";
  ZodFirstPartyTypeKind2["ZodPromise"] = "ZodPromise";
  ZodFirstPartyTypeKind2["ZodBranded"] = "ZodBranded";
  ZodFirstPartyTypeKind2["ZodPipeline"] = "ZodPipeline";
  ZodFirstPartyTypeKind2["ZodReadonly"] = "ZodReadonly";
})(ZodFirstPartyTypeKind || (ZodFirstPartyTypeKind = {}));
var instanceOfType = (cls, params = {
  message: `Input not instance of ${cls.name}`
}) => custom((data) => data instanceof cls, params);
var stringType = ZodString.create;
var numberType = ZodNumber.create;
var nanType = ZodNaN.create;
var bigIntType = ZodBigInt.create;
var booleanType = ZodBoolean.create;
var dateType = ZodDate.create;
var symbolType = ZodSymbol.create;
var undefinedType = ZodUndefined.create;
var nullType = ZodNull.create;
var anyType = ZodAny.create;
var unknownType = ZodUnknown.create;
var neverType = ZodNever.create;
var voidType = ZodVoid.create;
var arrayType = ZodArray.create;
var objectType = ZodObject.create;
var strictObjectType = ZodObject.strictCreate;
var unionType = ZodUnion.create;
var discriminatedUnionType = ZodDiscriminatedUnion.create;
var intersectionType = ZodIntersection.create;
var tupleType = ZodTuple.create;
var recordType = ZodRecord.create;
var mapType = ZodMap.create;
var setType = ZodSet.create;
var functionType = ZodFunction.create;
var lazyType = ZodLazy.create;
var literalType = ZodLiteral.create;
var enumType = ZodEnum.create;
var nativeEnumType = ZodNativeEnum.create;
var promiseType = ZodPromise.create;
var effectsType = ZodEffects.create;
var optionalType = ZodOptional.create;
var nullableType = ZodNullable.create;
var preprocessType = ZodEffects.createWithPreprocess;
var pipelineType = ZodPipeline.create;
var ostring = () => stringType().optional();
var onumber = () => numberType().optional();
var oboolean = () => booleanType().optional();
var coerce = {
  string: (arg) => ZodString.create({ ...arg, coerce: true }),
  number: (arg) => ZodNumber.create({ ...arg, coerce: true }),
  boolean: (arg) => ZodBoolean.create({
    ...arg,
    coerce: true
  }),
  bigint: (arg) => ZodBigInt.create({ ...arg, coerce: true }),
  date: (arg) => ZodDate.create({ ...arg, coerce: true })
};
var NEVER = INVALID;
var z = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  defaultErrorMap: errorMap,
  setErrorMap,
  getErrorMap,
  makeIssue,
  EMPTY_PATH,
  addIssueToContext,
  ParseStatus,
  INVALID,
  DIRTY,
  OK,
  isAborted,
  isDirty,
  isValid,
  isAsync,
  get util() {
    return util;
  },
  get objectUtil() {
    return objectUtil;
  },
  ZodParsedType,
  getParsedType,
  ZodType,
  datetimeRegex,
  ZodString,
  ZodNumber,
  ZodBigInt,
  ZodBoolean,
  ZodDate,
  ZodSymbol,
  ZodUndefined,
  ZodNull,
  ZodAny,
  ZodUnknown,
  ZodNever,
  ZodVoid,
  ZodArray,
  ZodObject,
  ZodUnion,
  ZodDiscriminatedUnion,
  ZodIntersection,
  ZodTuple,
  ZodRecord,
  ZodMap,
  ZodSet,
  ZodFunction,
  ZodLazy,
  ZodLiteral,
  ZodEnum,
  ZodNativeEnum,
  ZodPromise,
  ZodEffects,
  ZodTransformer: ZodEffects,
  ZodOptional,
  ZodNullable,
  ZodDefault,
  ZodCatch,
  ZodNaN,
  BRAND,
  ZodBranded,
  ZodPipeline,
  ZodReadonly,
  custom,
  Schema: ZodType,
  ZodSchema: ZodType,
  late,
  get ZodFirstPartyTypeKind() {
    return ZodFirstPartyTypeKind;
  },
  coerce,
  any: anyType,
  array: arrayType,
  bigint: bigIntType,
  boolean: booleanType,
  date: dateType,
  discriminatedUnion: discriminatedUnionType,
  effect: effectsType,
  "enum": enumType,
  "function": functionType,
  "instanceof": instanceOfType,
  intersection: intersectionType,
  lazy: lazyType,
  literal: literalType,
  map: mapType,
  nan: nanType,
  nativeEnum: nativeEnumType,
  never: neverType,
  "null": nullType,
  nullable: nullableType,
  number: numberType,
  object: objectType,
  oboolean,
  onumber,
  optional: optionalType,
  ostring,
  pipeline: pipelineType,
  preprocess: preprocessType,
  promise: promiseType,
  record: recordType,
  set: setType,
  strictObject: strictObjectType,
  string: stringType,
  symbol: symbolType,
  transformer: effectsType,
  tuple: tupleType,
  "undefined": undefinedType,
  union: unionType,
  unknown: unknownType,
  "void": voidType,
  NEVER,
  ZodIssueCode,
  quotelessJson,
  ZodError
});

// src/core/agent-kit.ts
var import_ai_agent_sdk = __toESM(require_dist9());
var AgentKit = class {
  tools = {};
  agents = {};
  errors = [];
  warnings = [];
  memory = {
    toolUsage: {},
    agentUsage: {},
    errors: [],
    warnings: []
  };
  modelMap = {
    "gpt-4o": { provider: "openai", id: "gpt-4o" },
    "gpt-4-turbo": { provider: "openai", id: "gpt-4-turbo" },
    "claude-3-opus": { provider: "anthropic", id: "claude-3-opus-20240229" },
    "claude-3-sonnet": {
      provider: "anthropic",
      id: "claude-3-sonnet-20240229"
    }
  };
  constructor() {
    this.resetMemory();
  }
  // Memory management
  resetMemory() {
    this.memory = {
      toolUsage: {},
      agentUsage: {},
      errors: [],
      warnings: []
    };
  }
  trackToolUsage(toolName, agentName) {
    if (!this.memory.toolUsage[toolName]) {
      this.memory.toolUsage[toolName] = {
        agents: [],
        usageCount: 0,
        lastUsed: /* @__PURE__ */ new Date()
      };
    }
    this.memory.toolUsage[toolName].usageCount++;
    this.memory.toolUsage[toolName].lastUsed = /* @__PURE__ */ new Date();
    if (agentName && !this.memory.toolUsage[toolName].agents.includes(agentName)) {
      this.memory.toolUsage[toolName].agents.push(agentName);
    }
  }
  trackAgentUsage(agentName) {
    if (!this.memory.agentUsage[agentName]) {
      this.memory.agentUsage[agentName] = {
        usageCount: 0,
        lastUsed: /* @__PURE__ */ new Date()
      };
    }
    this.memory.agentUsage[agentName].usageCount++;
    this.memory.agentUsage[agentName].lastUsed = /* @__PURE__ */ new Date();
  }
  // Tool definition and validation
  tool(name, config) {
    try {
      if (this.tools[name]) {
        throw new Error(`Tool '${name}' already exists`);
      }
      const paramSchema = {};
      for (const [key, param] of Object.entries(config.parameters)) {
        switch (param.type) {
          case "string":
            paramSchema[key] = z.string().describe(param.description || "");
            break;
          case "number":
            paramSchema[key] = z.number().describe(param.description || "");
            break;
          case "boolean":
            paramSchema[key] = z.boolean().describe(param.description || "");
            break;
          case "array":
            paramSchema[key] = z.array(z.any()).describe(param.description || "");
            break;
          case "object":
            paramSchema[key] = z.record(z.any()).describe(param.description || "");
            break;
          default:
            throw new Error(`Unsupported parameter type: ${param.type}`);
        }
      }
      if (typeof config.execute !== "function") {
        throw new Error("Tool execute must be a function");
      }
      const mockParams = {};
      for (const [key, param] of Object.entries(config.parameters)) {
        switch (param.type) {
          case "string":
            mockParams[key] = "test";
            break;
          case "number":
            mockParams[key] = 0;
            break;
          case "boolean":
            mockParams[key] = false;
            break;
          case "array":
            mockParams[key] = [];
            break;
          case "object":
            mockParams[key] = {};
            break;
        }
      }
      this.tools[name] = {
        ...config,
        name,
        zodSchema: z.object(paramSchema).passthrough()
      };
      this.trackToolUsage(name);
      return this;
    } catch (error) {
      const errorMessage = `Error in tool '${name}': ${error.message}`;
      this.errors.push(errorMessage);
      this.memory.errors.push(errorMessage);
      return this;
    }
  }
  // Agent definition and validation
  agent(name, config) {
    try {
      if (this.agents[name]) {
        throw new Error(`Agent '${name}' already exists`);
      }
      if (!config.model || !this.modelMap[config.model]) {
        throw new Error(`Invalid model: ${config.model}`);
      }
      if (config.tools && config.tools.length > 0) {
        for (const toolName of config.tools) {
          if (!this.tools[toolName]) {
            throw new Error(
              `Tool '${toolName}' not defined. Define it before adding to agent.`
            );
          }
          this.trackToolUsage(toolName, name);
        }
      }
      this.agents[name] = {
        ...config,
        name
      };
      this.trackAgentUsage(name);
      return this;
    } catch (error) {
      const errorMessage = `Error in agent '${name}': ${error.message}`;
      this.errors.push(errorMessage);
      this.memory.errors.push(errorMessage);
      return this;
    }
  }
  // Validation functions
  validateToolDependencies() {
    let isValid2 = true;
    const visited = {};
    const recursionStack = {};
    const checkCircular = (toolName, path5 = []) => {
      if (!visited[toolName]) {
        visited[toolName] = true;
        recursionStack[toolName] = true;
        const tool = this.tools[toolName];
        if (tool.dependencies) {
          for (const dep of tool.dependencies) {
            if (!visited[dep] && checkCircular(dep, [...path5, toolName])) {
              return true;
            } else if (recursionStack[dep]) {
              const cycle = [...path5, toolName, dep].join(" -> ");
              const warningMsg = `Circular dependency detected: ${cycle}`;
              this.warnings.push(warningMsg);
              this.memory.warnings.push(warningMsg);
              isValid2 = false;
              return true;
            }
          }
        }
        recursionStack[toolName] = false;
      }
      return false;
    };
    Object.keys(this.tools).forEach((toolName) => {
      if (!visited[toolName]) {
        checkCircular(toolName);
      }
    });
    return isValid2;
  }
  validateHierarchy() {
    let isValid2 = true;
    Object.entries(this.agents).forEach(([agentName, agent]) => {
      if (agent.tools) {
        for (const toolName of agent.tools) {
          if (!this.tools[toolName]) {
            const errorMsg = `Agent '${agentName}' references non-existent tool '${toolName}'`;
            this.errors.push(errorMsg);
            this.memory.errors.push(errorMsg);
            isValid2 = false;
          }
        }
      }
    });
    return isValid2;
  }
  // Utility functions
  getMemory() {
    return { ...this.memory };
  }
  getErrors() {
    return [...this.errors];
  }
  getWarnings() {
    return [...this.warnings];
  }
  getToolsInfo() {
    const result = {};
    Object.keys(this.tools).forEach((toolName) => {
      result[toolName] = {
        definition: this.tools[toolName],
        usage: this.memory.toolUsage[toolName] || {
          agents: [],
          usageCount: 0,
          lastUsed: null
        }
      };
    });
    return result;
  }
  getAgentsInfo() {
    const result = {};
    Object.keys(this.agents).forEach((agentName) => {
      result[agentName] = {
        definition: this.agents[agentName],
        usage: this.memory.agentUsage[agentName] || {
          usageCount: 0,
          lastUsed: null
        }
      };
    });
    return result;
  }
  // Save a message to the conversation history
  addToConversation(message) {
    if (!this.memory.conversation) {
      this.memory.conversation = [];
    }
    this.memory.conversation.push(message);
  }
  // Compilation
  compile() {
    this.validateHierarchy();
    this.validateToolDependencies();
    if (this.errors.length > 0) {
      console.error("Compilation failed with errors:");
      this.errors.forEach((err) => console.error(`- ${err}`));
      throw new Error("Compilation failed due to validation errors");
    }
    if (this.warnings.length > 0) {
      console.warn("Compilation proceeded with warnings:");
      this.warnings.forEach((warn) => console.warn(`- ${warn}`));
    }
    const self = this;
    try {
      const compiledTools = {};
      Object.entries(this.tools).forEach(([name, config]) => {
        const zodSchema2 = {};
        for (const [key, param] of Object.entries(config.parameters)) {
          let schema;
          switch (param.type) {
            case "string":
              schema = z.string();
              break;
            case "number":
              schema = z.number();
              break;
            case "boolean":
              schema = z.boolean();
              break;
            case "array":
              let itemSchema = z.any();
              if (param.items && param.items.type === "string") {
                itemSchema = z.string();
              }
              schema = z.array(itemSchema);
              break;
            case "object":
              schema = z.record(z.any());
              break;
            default:
              throw new Error(`Unsupported parameter type: ${param.type}`);
          }
          if (param.description) {
            schema = schema.describe(param.description);
          }
          zodSchema2[key] = schema.optional();
        }
        compiledTools[name] = new import_ai_agent_sdk.Tool({
          name,
          description: config.description,
          parameters: z.object(zodSchema2),
          execute: config.execute,
          provider: config.provider || "openai"
        });
      });
      const compiledAgents = {};
      Object.entries(this.agents).forEach(([name, config]) => {
        const agentTools = {};
        if (config.tools) {
          for (const toolName of config.tools) {
            agentTools[toolName] = compiledTools[toolName];
          }
        }
        compiledAgents[name] = new import_ai_agent_sdk.Agent({
          name,
          description: config.description,
          instructions: config.instructions || [],
          model: this.modelMap[config.model],
          tools: Object.keys(agentTools).length > 0 ? agentTools : void 0,
          temperature: config.temperature || 0.5
        });
      });
      const result = {
        tools: compiledTools,
        agents: compiledAgents,
        memory: { ...this.memory }
      };
      return result;
    } catch (error) {
      console.error("Compilation error:", error);
      this.memory.errors.push(`Failed to compile: ${error.message}`);
      throw new Error(`Failed to compile: ${error.message}`);
    }
  }
};
var agent_kit_default = new AgentKit();

// src/cli/sytem/cli-agent.ts
var import_promises3 = __toESM(require("fs/promises"));
var import_path4 = __toESM(require("path"));

// src/cli/sytem/prompts.ts
var CONVERSATIONAL_ASSISTANT_PROMPT = `
You are the Vane CLI assistant, designed to help users build AI agents using Vane's AgentKit framework in a conversational, step-by-step manner.

YOUR PRIMARY RESPONSIBILITIES:
1. Guide users through creating tools and agents for their AI applications
2. Ask ONE QUESTION AT A TIME to collect necessary information
3. Generate the appropriate files once all information is collected
4. Always confirm successful creation with file paths

CONVERSATION GUIDELINES:
- Be friendly, conversational, and personable
- Ask users clear, specific questions ONE AT A TIME
- Acknowledge user responses before moving to the next question
- End each response with a question or suggested next step
- Always track collected information in the currentTask.collectedInfo field

TOOL-AGENT RELATIONSHIP:
- Tools are the building blocks that agents use to perform tasks
- When users want to build an agent for a specific purpose (like news or weather):
  * First help them create the necessary tools
  * Then create the agent that uses those tools
- Tools need: name, description, parameters, and implementation
- Agents need: name, description, instructions, tools, and model

FILE GENERATION:
- Generate files only when all necessary information is collected
- Place tool files in src/tools/ directory
- Place agent files in src/agents/ directory
- Always confirm successful creation with exact file paths
- Track created tools and agents to reference them later

EXAMPLE CONVERSATION FLOW:
1. User: "I want an AI assistant for my news station"
2. You: "That sounds great! Does your news station have a publicly accessible API? [Ask just this one question]"
3. User: "Yes, it's at api.mynews.com/v1"
4. You: "Thanks for sharing that. What would you like to name this tool that will fetch news from your API? [One question]"
5. User: "NewsAPITool"
6. You: "Great name! Now I need to understand what parameters this tool will need. What information will we need to fetch news? (E.g., category, date, etc.) [One question]"
...and so on, one step at a time.

Remember: Your goal is to create a friendly, interactive experience that guides users through building AI agents step by step.
`;
var TOOL_IMPLEMENTATION_GUIDELINES = `
When creating a tool implementation:

1. WRITE DIRECT CODE that uses the parameters directly
2. DO NOT create nested function definitions
3. End your implementation with a return statement in this format:

return {
 status: "success",
 data: finalData,
 message: "A descriptive success message"
};

BAD FORMAT - DO NOT USE:
async function fetchData(param1, param2) {
  return result;
}

GOOD FORMAT - USE THIS:
// const apiUrl = \`https://example.com/api?param=\${param1}\`;
// const response = await fetch(apiUrl);
// const data = await response.json();
// Process the data
const filteredData = data.filter(item => item.property === filterValue);

// Return the result
return {
 status: "success",
 data: filteredData,
 message: \`Successfully retrieved \${filteredData.length} items\`
};
`;

// src/cli/sytem/tools.ts
var import_path3 = __toESM(require("path"));
var import_promises2 = __toESM(require("fs/promises"));
function registerCLITools() {
  agent_kit_default.tool("generateToolFile", {
    description: "Generates a new tool file using the AgentKit template with direct implementation",
    parameters: {
      name: {
        type: "string",
        description: "Name of the tool"
      },
      description: {
        type: "string",
        description: "Description of the tool"
      },
      parameters: {
        type: "object",
        description: "Parameters object for tools, with key-value pairs of parameter definitions"
      },
      implementation: {
        type: "string",
        description: "Direct implementation code for the tool"
      }
    },
    execute: async ({ name, description, parameters, implementation }) => {
      try {
        console.log("========== GENERATE TOOL FILE DEBUG ==========");
        console.log("Tool Name:", name);
        console.log("Description:", description);
        console.log("Parameters:", JSON.stringify(parameters, null, 2));
        console.log("==============================================");
        const toolParams = parameters || {};
        let paramsStr = "";
        if (Object.keys(toolParams).length > 0) {
          paramsStr = Object.entries(toolParams).map(([key, param]) => {
            const paramObj = typeof param === "object" ? param : { type: "string" };
            const type = paramObj.type || "string";
            const desc = paramObj.description || "";
            return `    ${key}: {
        type: "${type}",
        description: "${desc.replace(/"/g, '\\"')}"
      }`;
          }).join(",\n");
        }
        const paramNames = Object.keys(toolParams).length > 0 ? `{ ${Object.keys(toolParams).join(", ")} }` : "parameters";
        const formattedImplementation = implementation ? implementation.split("\n").map((line) => `      ${line}`).join("\n") : "      // TODO: Implement tool functionality";
        const content = `import AgentKit from "../core/agent-kit.js";
    
  /**
   * ${description}
   */
  AgentKit.tool("${name}", {
    description: "${description}",
    parameters: {
  ${paramsStr || "    // No parameters"}
    },
    execute: async (${paramNames}) => {
      try {
  ${formattedImplementation}
      } catch (error) {
        return {
          status: "error",
          message: \`Error in ${name}: \${error instanceof Error ? error.message : String(error)}\`
        };
      }
    }
  });
  `;
        const filename = `src/tools/${name}.ts`;
        const dir = import_path3.default.dirname(filename);
        await import_promises2.default.mkdir(dir, { recursive: true });
        await import_promises2.default.writeFile(filename, content);
        console.log(`Generated tool file: ${filename}`);
        return {
          status: "success",
          message: `Tool file ${filename} generated successfully`,
          metadata: {
            name,
            description,
            path: filename
          }
        };
      } catch (error) {
        console.error(`Error generating tool file:`, error);
        return {
          status: "error",
          message: `Failed to generate tool file: ${error instanceof Error ? error.message : String(error)}`
        };
      }
    }
  });
  agent_kit_default.tool("generateAgentFile", {
    description: "Generates a new agent file using the AgentKit template",
    parameters: {
      name: {
        type: "string",
        description: "Name of the agent"
      },
      description: {
        type: "string",
        description: "Description of the agent"
      },
      model: {
        type: "string",
        description: "Model to use for the agent (e.g., gpt-4o)"
      },
      instructions: {
        type: "array",
        description: "Array of instruction strings for the agent",
        items: {
          type: "string"
        }
      },
      tools: {
        type: "array",
        description: "Array of tool names for the agent",
        items: {
          type: "string"
        }
      },
      temperature: {
        type: "number",
        description: "Temperature setting for the agent"
      }
    },
    execute: async ({
      name,
      description,
      model = "gpt-4o",
      instructions = [],
      tools = [],
      temperature = 0.3
    }) => {
      try {
        console.log("========== GENERATE AGENT FILE DEBUG ==========");
        console.log("Agent Name:", name);
        console.log("Description:", description);
        console.log("Model:", model);
        console.log("Instructions:", JSON.stringify(instructions, null, 2));
        console.log("Tools:", JSON.stringify(tools, null, 2));
        console.log("Temperature:", temperature);
        console.log("==============================================");
        const formattedInstructions = instructions.length > 0 ? instructions.map((instr) => `    "${instr.replace(/"/g, '\\"')}"`).join(",\n") : '    "Assist users with their requests in a helpful manner."';
        const formattedTools = tools.length > 0 ? tools.map((tool) => `    "${tool}"`).join(",\n") : "";
        const content = `import AgentKit from "../core/agent-kit.js";

/**
 * ${description}
 */
AgentKit.agent("${name}", {
  description: "${description}",
  model: "${model}",
  instructions: [
${formattedInstructions}
  ],
  tools: [
${formattedTools}
  ],
  temperature: ${temperature},
});
`;
        const filename = `src/agents/${name}.ts`;
        const dir = import_path3.default.dirname(filename);
        await import_promises2.default.mkdir(dir, { recursive: true });
        await import_promises2.default.writeFile(filename, content);
        console.log(`Generated agent file: ${filename}`);
        return {
          status: "success",
          message: `Agent file ${filename} generated successfully`,
          metadata: {
            name,
            description,
            path: filename
          }
        };
      } catch (error) {
        console.error(`Error generating agent file:`, error);
        return {
          status: "error",
          message: `Failed to generate agent file: ${error instanceof Error ? error.message : String(error)}`
        };
      }
    }
  });
  agent_kit_default.tool("buildTool", {
    description: "Builds and compiles the AgentKit project for deployment",
    parameters: {
      outputDir: {
        type: "string",
        description: "Output directory for the compiled files (default: 'dist')"
      },
      format: {
        type: "string",
        description: "Output format ('esm', 'cjs', or 'browser')"
      },
      mainAgent: {
        type: "string",
        description: "Name of the main agent to be exported as the default entry point"
      },
      installDependencies: {
        type: "boolean",
        description: "Whether to install dependencies before building"
      }
    },
    execute: async ({
      outputDir = "dist",
      format = "esm",
      mainAgent,
      installDependencies: installDependencies2 = false
    }) => {
      try {
        const projectPath = process.cwd();
        const result = await buildProject(projectPath, {
          outputDir,
          format,
          mainAgent,
          skipDependencyPrompt: !installDependencies2
          // We'll get the project name from the directory if needed
        });
        if (result.status === "error") {
          return {
            status: "error",
            message: `Build failed: ${result.message}`
          };
        }
        return {
          status: "success",
          data: result,
          message: `Successfully built project. Output is available in: ${result.outputDir}`
        };
      } catch (error) {
        return {
          status: "error",
          message: `Error in buildTool: ${error instanceof Error ? error.message : String(error)}`
        };
      }
    }
  });
  agent_kit_default.tool("readFile", {
    description: "Reads the content of a file",
    parameters: {
      filename: {
        type: "string",
        description: "Path to the file to read"
      }
    },
    execute: async ({ filename }) => {
      try {
        try {
          await import_promises2.default.access(filename);
        } catch {
          return {
            status: "error",
            message: `File ${filename} does not exist`
          };
        }
        const content = await import_promises2.default.readFile(filename, "utf-8");
        console.log(`Read file: ${filename}`);
        return {
          status: "success",
          message: `File ${filename} read successfully`,
          data: {
            content,
            path: filename
          }
        };
      } catch (error) {
        console.error(`Error reading file ${filename}:`, error);
        return {
          status: "error",
          message: `Failed to read file: ${error instanceof Error ? error.message : String(error)}`
        };
      }
    }
  });
  agent_kit_default.tool("updateFile", {
    description: "Updates the content of a file",
    parameters: {
      filename: {
        type: "string",
        description: "Path to the file to update"
      },
      content: {
        type: "string",
        description: "New content for the file"
      }
    },
    execute: async ({ filename, content }) => {
      try {
        try {
          await import_promises2.default.access(filename);
        } catch {
          return {
            status: "error",
            message: `File ${filename} does not exist`
          };
        }
        await import_promises2.default.writeFile(filename, content);
        console.log(`Updated file: ${filename}`);
        return {
          status: "success",
          message: `File ${filename} updated successfully`,
          metadata: {
            filename,
            path: filename
          }
        };
      } catch (error) {
        console.error(`Error updating file ${filename}:`, error);
        return {
          status: "error",
          message: `Failed to update file: ${error instanceof Error ? error.message : String(error)}`
        };
      }
    }
  });
  agent_kit_default.tool("listDirectory", {
    description: "Lists the contents of a directory",
    parameters: {
      directory: {
        type: "string",
        description: "Path to the directory to list"
      }
    },
    execute: async ({ directory }) => {
      try {
        try {
          await import_promises2.default.access(directory);
        } catch {
          return {
            status: "error",
            message: `Directory ${directory} does not exist`
          };
        }
        const entries = await import_promises2.default.readdir(directory, { withFileTypes: true });
        const files = entries.filter((entry) => entry.isFile()).map((entry) => entry.name);
        const directories = entries.filter((entry) => entry.isDirectory()).map((entry) => entry.name);
        console.log(`Listed directory: ${directory}`);
        return {
          status: "success",
          message: `Directory ${directory} listed successfully`,
          data: {
            path: directory,
            files,
            directories
          }
        };
      } catch (error) {
        console.error(`Error listing directory ${directory}:`, error);
        return {
          status: "error",
          message: `Failed to list directory: ${error instanceof Error ? error.message : String(error)}`
        };
      }
    }
  });
}

// src/cli/sytem/cli-agent.ts
function createCLIAgent() {
  try {
    registerCLITools();
    agent_kit_default.agent("cliAgent", {
      description: "CLI assistant for Vanekit that helps users build and manage AI agents conversationally",
      model: "gpt-4o",
      instructions: [
        // Core purpose definition
        "You are a CLI assistant for Vane`s Agentkit that helps users build and deploy AI agents through natural conversation.",
        "Your primary role is to guide users through creating tools and agents in a friendly, step-by-step manner.",
        // Conversation guidelines
        "Always be conversational and personable. Ask one clear question at a time to guide the user.",
        "After each user response, thank them, acknowledge their input, and provide the next step.",
        "Maintain context throughout the conversation to build tools and agents incrementally.",
        // Tool creation guidance
        "When creating a tool, collect information one question at a time: name, description, parameters, and implementation.",
        "For tool parameters, choose the most fitting type (string, number, boolean, etc.) and description for each parameter, unless user gives you otherwise.",
        "For tool implementation, help users write appropriate JavaScript/TypeScript code that fulfills their needs.",
        TOOL_IMPLEMENTATION_GUIDELINES,
        // Agent creation guidance
        "When creating an agent, collect information one question at a time: name, description, instructions, tools, and model.",
        "For agent instructions, collect multiple clear instructions that will guide the agent's behavior.",
        "For agent tools, list the names of tools that have been previously created or are built into the system.",
        // FILE GENERATION USING NEW TEMPLATE SYSTEM
        "When all information has been collected and you're ready to generate a file:",
        "- For tools: use the 'generateToolFile' tool with name, description, parameters (MUST be an object with parameter definitions), and implementation",
        "- For agents: use the 'generateAgentFile' tool with name, description, model, instructions (array), tools (array), and temperature",
        "Never skip the parameters object for tools - if there are no parameters, provide an empty object {}.",
        // Action orientation
        "End responses with questions or suggested next steps rather than just statements.",
        "Use the collectedInfo field to track information gathered during the conversation.",
        // Progress tracking
        "When a task status is 'generating', immediately use the generateFile tool with the collected information.",
        "After successfully generating a file, set the task status to 'complete' and suggest the next steps to the user."
      ],
      tools: [
        "generateToolFile",
        "generateAgentFile",
        "buildTool",
        "readFile",
        "updateFile",
        "listDirectory"
      ],
      temperature: 0.3
    });
    return {
      compiled: null,
      getCompiled() {
        if (!this.compiled) {
          this.compiled = agent_kit_default.compile();
        }
        return this.compiled;
      }
    };
  } catch (error) {
    console.error("Error creating CLI agent:", error);
    throw error;
  }
}
async function processCLICommand(agentWrapper, command, context2) {
  try {
    if (!context2.currentTask) {
      context2.currentTask = {
        type: null,
        status: "idle",
        collectedInfo: {},
        currentQuestion: null,
        expectedAnswer: null
      };
    }
    if (!context2.createdEntities) {
      context2.createdEntities = { tools: [], agents: [] };
    }
    const cliAgent = agentWrapper.getCompiled().agents.cliAgent;
    if (!cliAgent) {
      throw new Error("CLI agent not found in compiled result");
    }
    const systemContent = `${CONVERSATIONAL_ASSISTANT_PROMPT}

    Current task status: ${JSON.stringify(context2.currentTask)}
    Previously created:
    - Tools: ${JSON.stringify(context2.createdEntities.tools.map((t) => t.name))}
    - Agents: ${JSON.stringify(
      context2.createdEntities.agents.map((a) => a.name)
    )}
    
    IMPORTANT GUIDELINES:
    1. Ask only ONE QUESTION at a time
    2. Acknowledge the user's previous answer before asking the next question
    3. Track all collected information in the collectedInfo field
    4. Generate files ONLY when all information is collected
    6. For tool creation, you need: name, description, parameters, implementation
    7. For agent creation, you need: name, description, instructions, tools, model
    
    Remember to make the experience conversational and friendly!`;
    const messages = [];
    messages.push({
      role: "system",
      content: systemContent
    });
    if (context2 && context2.conversation && Array.isArray(context2.conversation)) {
      const recentMessages = context2.conversation.slice(-10);
      for (const msg of recentMessages) {
        if (msg && typeof msg === "object" && "role" in msg && "content" in msg) {
          messages.push({
            role: msg.role,
            content: msg.content
          });
        }
      }
    }
    messages.push({
      role: "user",
      content: command
    });
    const response = await cliAgent.generate({
      messages,
      temperature: 0.2
    });
    console.log(
      "Received response:",
      JSON.stringify(response).slice(0, 100) + "..."
    );
    let responseContent = "";
    let currentTask = {
      type: context2.currentTask.type || "none",
      status: context2.currentTask.status || "idle",
      collectedInfo: context2.currentTask.collectedInfo || {},
      nextQuestion: null
    };
    let filesToGenerate = [];
    if (typeof response === "string") {
      responseContent = response;
    } else if (response && typeof response === "object") {
      if ("content" in response) {
        responseContent = response.content;
      } else if (response.value && typeof response.value === "object" && "content" in response.value) {
        responseContent = response.value.content;
        if ("currentTask" in response.value) {
          currentTask = response.value.currentTask;
        }
        if ("filesToGenerate" in response.value && Array.isArray(response.value.filesToGenerate)) {
          filesToGenerate = response.value.filesToGenerate;
        }
      } else if ("text" in response) {
        responseContent = response.text;
      } else {
        responseContent = JSON.stringify(response);
      }
    } else {
      responseContent = "I received your message but couldn't generate a proper response.";
    }
    const generatedFiles = [];
    for (const file of filesToGenerate) {
      try {
        if (!file.path || !file.content)
          continue;
        const dir = import_path4.default.dirname(file.path);
        await import_promises3.default.mkdir(dir, { recursive: true });
        await import_promises3.default.writeFile(file.path, file.content);
        generatedFiles.push({
          path: file.path,
          operation: "created",
          status: "success"
        });
        if (file.path.includes("/tools/")) {
          const toolName = import_path4.default.basename(file.path, import_path4.default.extname(file.path));
          context2.createdEntities.tools.push({
            name: toolName,
            path: file.path
          });
        } else if (file.path.includes("/agents/")) {
          const agentName = import_path4.default.basename(file.path, import_path4.default.extname(file.path));
          context2.createdEntities.agents.push({
            name: agentName,
            path: file.path
          });
        }
      } catch (error) {
        console.error(`Error generating file ${file.path}:`, error);
        generatedFiles.push({
          path: file.path,
          operation: "failed",
          status: "error",
          error: error instanceof Error ? error.message : String(error)
        });
      }
    }
    context2.currentTask = {
      type: currentTask.type || context2.currentTask.type,
      status: currentTask.status || context2.currentTask.status,
      collectedInfo: currentTask.collectedInfo || context2.currentTask.collectedInfo,
      currentQuestion: currentTask.nextQuestion || null,
      expectedAnswer: null
    };
    return {
      status: "success",
      response: responseContent,
      // Always return this explicitly
      metadata: {
        filesGenerated: generatedFiles.length > 0 ? generatedFiles : void 0,
        contextState: context2
      }
    };
  } catch (error) {
    console.error("Error processing command:", error);
    return {
      status: "error",
      message: `Error processing command: ${error instanceof Error ? error.message : String(error)}`,
      response: `I encountered an error: ${error instanceof Error ? error.message : String(error)}`
    };
  }
}

// src/cli/integration.ts
var import_ora2 = __toESM(require("ora"));
var import_path5 = require("path");
var import_fs3 = require("fs");
var CLIIntegration = class {
  agent;
  conversation = [];
  config;
  context = {
    conversation: [],
    currentTask: {
      type: null,
      status: "idle",
      collectedInfo: {},
      currentQuestion: null,
      expectedAnswer: null
    },
    createdEntities: {
      tools: [],
      agents: []
    }
  };
  constructor(config) {
    this.config = config;
    if (config.savedConversation && Array.isArray(config.savedConversation)) {
      this.conversation = [...config.savedConversation];
      this.context.conversation = [...config.savedConversation];
    }
    this.ensureProjectDirectories();
  }
  /**
   * Ensure required project directories exist
   */
  ensureProjectDirectories() {
    const directories = [
      (0, import_path5.join)(this.config.projectPath, "src/tools"),
      (0, import_path5.join)(this.config.projectPath, "src/agents"),
      (0, import_path5.join)(this.config.projectPath, "src/core")
    ];
    for (const dir of directories) {
      if (!(0, import_fs3.existsSync)(dir)) {
        try {
          (0, import_fs3.mkdirSync)(dir, { recursive: true });
        } catch (error) {
          console.warn(`Could not create directory ${dir}: ${error}`);
        }
      }
    }
  }
  /**
   * Initialize the CLI agent
   */
  async initialize() {
    if (this.agent)
      return this.agent;
    const spinner = (0, import_ora2.default)("Initializing CLI assistant...").start();
    try {
      this.agent = await createCLIAgent();
      spinner.succeed("CLI assistant ready");
      return this.agent;
    } catch (error) {
      spinner.fail(
        `Failed to initialize CLI assistant: ${error instanceof Error ? error.message : String(error)}`
      );
      throw error;
    }
  }
  /**
   * Process a user message and handle file generation
   */
  async processMessage(message) {
    if (!this.agent) {
      await this.initialize();
    }
    this.conversation.push({ role: "user", content: message });
    this.context.conversation = this.conversation;
    const spinner = (0, import_ora2.default)("Processing...").start();
    try {
      const result = await processCLICommand(this.agent, message, this.context);
      if (result.metadata && result.metadata.contextState) {
        this.context = result.metadata.contextState;
      }
      spinner.succeed("Done");
      let filesGenerated = false;
      if (result.metadata?.filesGenerated && result.metadata.filesGenerated.length > 0) {
        filesGenerated = true;
        result.metadata.filesGenerated.forEach((file) => {
          if (file.status === "success") {
            console.log(`\u2705 ${file.operation} file: ${file.path}`);
          } else {
            console.error(`\u274C Failed to ${file.operation} file: ${file.path}`);
            if (file.error) {
              console.error(`   Error: ${file.error}`);
            }
          }
        });
      }
      let responseText;
      if (result.status === "error") {
        responseText = result.response || result.message || "An error occurred while processing your request.";
      } else {
        responseText = result.response || "I processed your request but couldn't generate a response.";
      }
      if (filesGenerated) {
        const justCreated = this.context.currentTask.type === "tool_creation" ? "tool" : this.context.currentTask.type === "agent_creation" ? "agent" : "file";
        const justCreatedName = this.context.currentTask.collectedInfo?.name || "item";
        if (!responseText.includes("successfully")) {
          responseText += `

The ${justCreated} \`${justCreatedName}\` has been successfully created.`;
        }
        this.context.currentTask.status = "complete";
      }
      this.conversation.push({ role: "assistant", content: responseText });
      this.context.conversation = this.conversation;
      if (this.context.currentTask?.type) {
        console.debug(
          `Current task: ${this.context.currentTask.type} (${this.context.currentTask.status})`
        );
        console.debug(
          `Collected info: ${JSON.stringify(
            this.context.currentTask.collectedInfo
          )}`
        );
      }
      return responseText;
    } catch (error) {
      spinner.fail(
        `Error: ${error instanceof Error ? error.message : String(error)}`
      );
      const errorMessage = `I encountered an error processing your request: ${error instanceof Error ? error.message : String(error)}`;
      this.conversation.push({ role: "assistant", content: errorMessage });
      this.context.conversation = this.conversation;
      return errorMessage;
    }
  }
  /**
   * Get current task status
   */
  getCurrentTaskStatus() {
    return {
      type: this.context.currentTask?.type || null,
      status: this.context.currentTask?.status || "idle"
    };
  }
  /**
   * Get the created entities
   */
  getCreatedEntities() {
    return {
      tools: [...this.context.createdEntities?.tools || []],
      agents: [...this.context.createdEntities?.agents || []]
    };
  }
  /**
   * Get the current conversation history
   */
  getConversation() {
    return [...this.conversation];
  }
};
function createCLIIntegration(config) {
  return new CLIIntegration(config);
}

// src/cli/deploy.ts
var import_inquirer2 = __toESM(require("inquirer"));
var import_fs4 = __toESM(require("fs"));
var import_path6 = require("path");
var path4 = __toESM(require("path"));
function copyDirSync(src, dest) {
  if (!(0, import_fs4.existsSync)(dest)) {
    (0, import_fs4.mkdirSync)(dest, { recursive: true });
  }
  const entries = (0, import_fs4.readdirSync)(src, { withFileTypes: true });
  for (const entry of entries) {
    const srcPath = (0, import_path6.join)(src, entry.name);
    const destPath = (0, import_path6.join)(dest, entry.name);
    if (entry.isDirectory()) {
      copyDirSync(srcPath, destPath);
    } else {
      (0, import_fs4.writeFileSync)(destPath, (0, import_fs4.readFileSync)(srcPath));
    }
  }
}
function removeDirSync(dir) {
  if (!(0, import_fs4.existsSync)(dir))
    return;
  const entries = (0, import_fs4.readdirSync)(dir, { withFileTypes: true });
  for (const entry of entries) {
    const fullPath = path4.join(dir, entry.name);
    if (entry.isDirectory()) {
      removeDirSync(fullPath);
    } else {
      import_fs4.default.unlinkSync(fullPath);
    }
  }
  import_fs4.default.rmdirSync(dir);
}
async function deployToAlexaSkill(projectPath, inputOptions = {}) {
  console.log(`
  \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557
  \u2551       Vane Alexa Deployment         \u2551
  \u2551                                     \u2551
  \u2551   Integrate your AI agent with      \u2551
  \u2551        your Alexa skill             \u2551
  \u255A\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255D
  `);
  try {
    projectPath = (0, import_path6.resolve)(projectPath);
    logger.info("Project path:", projectPath);
    if (!(0, import_fs4.existsSync)(projectPath)) {
      throw new Error(`Project directory '${projectPath}' does not exist`);
    }
    const distPath = (0, import_path6.join)(projectPath, "dist");
    if (!(0, import_fs4.existsSync)(distPath)) {
      throw new Error(
        `Dist directory not found. Please build your project first with 'vanekit build'.`
      );
    }
    const options = await collectDeployOptions(projectPath, inputOptions);
    const alexaSkillPath = (0, import_path6.resolve)(options.alexaSkillPath);
    if (!(0, import_fs4.existsSync)(alexaSkillPath)) {
      throw new Error(
        `Alexa skill directory '${alexaSkillPath}' does not exist`
      );
    }
    const lambdaPath = (0, import_path6.join)(alexaSkillPath, "lambda");
    const utilsPath = (0, import_path6.join)(lambdaPath, "utils");
    const handlersPath = (0, import_path6.join)(lambdaPath, "handlers");
    if (!(0, import_fs4.existsSync)(lambdaPath))
      (0, import_fs4.mkdirSync)(lambdaPath, { recursive: true });
    if (!(0, import_fs4.existsSync)(utilsPath))
      (0, import_fs4.mkdirSync)(utilsPath, { recursive: true });
    if (!(0, import_fs4.existsSync)(handlersPath))
      (0, import_fs4.mkdirSync)(handlersPath, { recursive: true });
    const targetAgentPath = (0, import_path6.join)(lambdaPath, options.agentName);
    await withSpinner(`Copying agent to ${targetAgentPath}...`, async () => {
      if ((0, import_fs4.existsSync)(targetAgentPath)) {
        removeDirSync(targetAgentPath);
      }
      (0, import_fs4.mkdirSync)(targetAgentPath, { recursive: true });
      copyDirSync(distPath, targetAgentPath);
      logger.info(`Agent copied to ${targetAgentPath}`);
      return true;
    });
    const wrapperPath = (0, import_path6.join)(utilsPath, `${options.agentName}.js`);
    await withSpinner(
      `Creating agent wrapper at ${wrapperPath}...`,
      async () => {
        const wrapperContent = generateWrapperFunction(options.agentName);
        (0, import_fs4.writeFileSync)(wrapperPath, wrapperContent);
        return true;
      }
    );
    const handlerPath = (0, import_path6.join)(handlersPath, `${options.agentName}Handler.js`);
    await withSpinner(
      `Creating example handler at ${handlerPath}...`,
      async () => {
        const handlerContent = generateExampleHandler(options.agentName);
        (0, import_fs4.writeFileSync)(handlerPath, handlerContent);
        return true;
      }
    );
    const intentName = options.agentName.includes("-") ? capitalizeFirstLetter(options.agentName.replace(/-/g, "")) : capitalizeFirstLetter(options.agentName);
    const interactionModelSnippet = `
{
  "name": "${intentName}Intent",
  "slots": [
    {
      "name": "query",
      "type": "AMAZON.SearchQuery"
    }
  ],
  "samples": [
    "ask about {query}",
    "tell me about {query}",
    "what is {query}",
    "check {query}",
    "get information about {query}",
    "lookup {query}"
  ]
}`;
    const handlerName = intentName + "IntentHandler";
    console.log(`
\u2705 Deployment completed successfully!

Your agent has been deployed to: ${targetAgentPath}
A wrapper function has been created at: ${wrapperPath}
An example handler has been created at: ${handlerPath}

To use your agent in your Alexa skill:

1. Add the following to your index.js:

const ${handlerName} = require('./handlers/${options.agentName}Handler');

// Add to your skill builder
const skillBuilder = Alexa.SkillBuilders.custom()
  .addRequestHandlers(
    // ... your existing handlers
    ${handlerName}
  )
  .lambda();

2. Add this intent to your interaction model:
${interactionModelSnippet}

3. Build and deploy your Alexa skill
`);
    return {
      status: "success",
      deployPath: targetAgentPath,
      message: `Agent successfully deployed to ${targetAgentPath}`
    };
  } catch (error) {
    logger.error("Deployment failed:", error.message);
    return {
      status: "error",
      message: error.message
    };
  }
}
async function collectDeployOptions(projectPath, inputOptions) {
  let projectName = inputOptions.projectName;
  if (!projectName) {
    try {
      const packageJsonPath = (0, import_path6.join)(projectPath, "package.json");
      if ((0, import_fs4.existsSync)(packageJsonPath)) {
        const packageJson = JSON.parse((0, import_fs4.readFileSync)(packageJsonPath, "utf-8"));
        projectName = packageJson.name;
      }
    } catch (error) {
      logger.warn("Could not read package.json to determine project name");
    }
  }
  if (!projectName) {
    projectName = projectPath.split("/").pop() || "vane-agent";
  }
  const { alexaSkillPath } = await import_inquirer2.default.prompt([
    {
      type: "input",
      name: "alexaSkillPath",
      message: "Enter the path to your Alexa skill root directory:",
      default: inputOptions.alexaSkillPath || "../Alexa-skills/vanewallet"
    }
  ]);
  const resolvedSkillPath = (0, import_path6.resolve)(alexaSkillPath);
  if (!(0, import_fs4.existsSync)(resolvedSkillPath)) {
    throw new Error(`Alexa skill directory not found at: ${resolvedSkillPath}`);
  }
  const { agentName } = await import_inquirer2.default.prompt([
    {
      type: "input",
      name: "agentName",
      message: "What name would you like to use for the agent in your Alexa skill?",
      default: inputOptions.agentName || "vane-agent"
    }
  ]);
  return {
    projectPath,
    projectName,
    alexaSkillPath,
    agentName
  };
}
function generateWrapperFunction(agentName) {
  return `// Auto-generated wrapper for ${agentName}
  const path = require('path');
  const fs = require('fs');
  
  /**
   * Simple wrapper for the Vane AI agent
   * @param {string} prompt - The user's query or prompt
   * @param {Object} [options] - Optional configuration
   * @returns {Promise<string>} - The agent's response
   */
  async function queryAgent(prompt, options = {}) {
    try {
      // Dynamically import the agent (only once)
      if (!queryAgent.agent) {
        const agentPath = path.join(__dirname, '..', '${agentName}');
        console.log('Loading agent from:', agentPath);
        
        try {
          // First try to import the index.js file
          const indexPath = path.join(agentPath, 'index.js');
          console.log('Trying to load from index path:', indexPath);
          
          // Using require instead of import for compatibility
          const agentModule = require(indexPath);
          
          console.log('Available exports:', Object.keys(agentModule));
          
          // Look for named exports ending with "Agent" (like mathSolverAgent)
          for (const key of Object.keys(agentModule)) {
            if (key !== 'default' && key.toLowerCase().includes('agent')) {
              console.log(\`Found specific agent: \${key}\`);
              queryAgent.agent = agentModule[key];
              break;
            }
          }
          
          // If no specific agent found yet, look in default export
          if (!queryAgent.agent && agentModule.default) {
            // Look for properties in the default export that end with "Agent"
            for (const key of Object.keys(agentModule.default)) {
              if (key.toLowerCase().includes('agent') && 
                  key !== 'getAllAgents' && // Skip helper functions
                  key !== 'getAllTools') {
                console.log(\`Found agent in default export: \${key}\`);
                queryAgent.agent = agentModule.default[key];
                break;
              }
            }
          }
          
          // Final fallback - try getting all agents and using the first one
          if (!queryAgent.agent && 
              agentModule.default && 
              typeof agentModule.default.getAllAgents === 'function') {
            const allAgents = agentModule.default.getAllAgents();
            const agentNames = Object.keys(allAgents);
            if (agentNames.length > 0) {
              console.log(\`Using first agent from getAllAgents: \${agentNames[0]}\`);
              queryAgent.agent = allAgents[agentNames[0]];
            }
          }
          
          if (!queryAgent.agent) {
            throw new Error("Could not find a suitable agent in the module exports");
          }
          
          console.log("Found agent:", queryAgent.agent.name || "Unknown");
          
          // Initialize agent if needed
          if (typeof queryAgent.agent.initialize === 'function') {
            console.log('Initializing agent...');
            await queryAgent.agent.initialize();
          }
        } catch (error) {
          console.error('Error importing agent:', error);
          throw error;
        }
      }
      
      // Send query to agent
      console.log('Sending query to agent:', prompt);
      let response;
      
      // Use generate() method if available
      if (typeof queryAgent.agent.generate === 'function') {
        console.log('Using agent.generate() method');
        response = await queryAgent.agent.generate({
          messages: [{ role: 'user', content: prompt }],
          ...options
        });
        
        console.log('Raw response:', JSON.stringify(response).substring(0, 100) + '...');
        
        // Handle different response formats
        if (response && typeof response === 'object') {
          if (response.type === 'assistant' && response.value) {
            response = response.value;
          } else if (response.value) {
            response = response.value;
          } else if (response.content) {
            response = response.content;
          } else if (response.text) {
            response = response.text;
          }
        }
      } else {
        throw new Error('Agent does not have a generate() method');
      }
      
      console.log('Processed response:', response);
      
      // Ensure we return a string
      if (typeof response !== 'string') {
        console.log('Response is not a string, converting...');
        if (response && typeof response === 'object') {
          return JSON.stringify(response);
        }
        return String(response);
      }
      
      return response;
    } catch (error) {
      console.error('Error querying agent:', error);
      return 'I encountered an error while processing your request. ' + error.message;
    }
  }
  
  // Export the wrapper function
  module.exports = {
    queryAgent
  };
  `;
}
function generateExampleHandler(agentName) {
  const intentName = agentName.includes("-") ? capitalizeFirstLetter(agentName.replace(/-/g, "")) : capitalizeFirstLetter(agentName);
  const handlerName = intentName + "IntentHandler";
  return `// Auto-generated handler for ${agentName}
const Alexa = require('ask-sdk-core');
const { queryAgent } = require('../utils/${agentName}');

/**
 * Handler for ${intentName} queries
 */
const ${handlerName} = {
  canHandle(handlerInput) {
    return (
      Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest' &&
      Alexa.getIntentName(handlerInput.requestEnvelope) === '${intentName}Intent'
    );
  },
  async handle(handlerInput) {
    // Get the user's query from the slot
    const query = Alexa.getSlotValue(handlerInput.requestEnvelope, 'query') || 
                  'What is the current price of Ethereum?';
    
    try {
      console.log('${handlerName} received query:', query);
      
      // Query the agent
      const response = await queryAgent(query, {
        // You can add options here as needed
        userId: handlerInput.requestEnvelope.session.user.userId
      });
      
      console.log('Agent response:', response);
      
      return handlerInput.responseBuilder
        .speak(response)
        .reprompt('Is there anything else you would like to know?')
        .getResponse();
    } catch (error) {
      console.error('Error in ${handlerName}:', error);
      
      return handlerInput.responseBuilder
        .speak('I had trouble accessing that information right now. Please try again later.')
        .getResponse();
    }
  }
};

module.exports = ${handlerName};
`;
}
function capitalizeFirstLetter(string) {
  if (!string)
    return "";
  return string.charAt(0).toUpperCase() + string.slice(1);
}
async function handleDeploy(config, projectId) {
  try {
    const projectPath = config.projectPath;
    if (!(0, import_fs4.existsSync)(path4.join(projectPath, "dist"))) {
      const { shouldBuild } = await import_inquirer2.default.prompt([
        {
          type: "confirm",
          name: "shouldBuild",
          message: "Project needs to be built first. Build now?",
          default: true
        }
      ]);
      if (shouldBuild) {
        console.log("Building project before deployment...");
        const buildResult = await buildProject(projectPath, {
          projectName: config.projectName,
          skipDependencyPrompt: false
        });
        if (buildResult.status === "error") {
          console.error(`Build failed: ${buildResult.message}`);
          return;
        }
      } else {
        console.log(
          'Deployment canceled. Please build the project first with "vanekit build".'
        );
        return;
      }
    }
    const result = await deployToAlexaSkill(projectPath, {
      projectName: config.projectName
    });
    if (result.status === "error") {
      console.error(`\u274C Deployment failed: ${result.message}`);
    }
  } catch (error) {
    console.error(`\u274C Deployment failed: ${error.message}`);
  }
}

// src/cli/index.ts
import_dotenv.default.config();
function saveConfig(config) {
  const configPath = (0, import_path7.join)(process.cwd(), ".vanekit-config.json");
  (0, import_fs5.writeFileSync)(configPath, JSON.stringify(config, null, 2));
}
function loadConfig() {
  const configPath = (0, import_path7.join)(process.cwd(), ".vanekit-config.json");
  if ((0, import_fs5.existsSync)(configPath)) {
    try {
      const config = JSON.parse((0, import_fs5.readFileSync)(configPath, "utf-8"));
      return config;
    } catch (error) {
      console.error("Failed to parse configuration file:", error);
    }
  }
  return void 0;
}
async function configureAPIKeys(config) {
  if (config.apiKeys && config.apiKeys.openai) {
    const { useExisting } = await import_inquirer3.default.prompt([
      {
        type: "confirm",
        name: "useExisting",
        message: "Use existing API keys?",
        default: true
      }
    ]);
    if (useExisting)
      return config.apiKeys;
  }
  console.log("\n\u{1F511} API Key Configuration");
  const apiKeys = await import_inquirer3.default.prompt([
    {
      type: "password",
      name: "openai",
      message: "OpenAI API Key (for GPT models):",
      default: config.apiKeys?.openai || ""
    },
    {
      type: "password",
      name: "anthropic",
      message: "Anthropic API Key (for Claude models, optional):",
      default: config.apiKeys?.anthropic || ""
    }
  ]);
  config.apiKeys = apiKeys;
  saveConfig(config);
  process.env.OPENAI_API_KEY = apiKeys.openai;
  if (apiKeys.anthropic) {
    process.env.ANTHROPIC_API_KEY = apiKeys.anthropic;
  }
  return apiKeys;
}
async function createProject() {
  const { projectName } = await import_inquirer3.default.prompt([
    {
      type: "input",
      name: "projectName",
      message: "What would you like to name your project?",
      default: "my-vane-project"
    }
  ]);
  const { projectDescription } = await import_inquirer3.default.prompt([
    {
      type: "input",
      name: "projectDescription",
      message: "Describe your project:",
      default: "An AI agent system built with vane"
    }
  ]);
  const projectPath = (0, import_path7.resolve)(projectName.toLowerCase().replace(/\s+/g, "-"));
  if (!(0, import_fs5.existsSync)(projectPath)) {
    (0, import_fs5.mkdirSync)(projectPath, { recursive: true });
  }
  const spinner = (0, import_ora3.default)("Generating project files...").start();
  try {
    await generateFiles(projectPath, {
      name: projectName,
      description: projectDescription
    });
    spinner.succeed("Project files generated successfully");
    const config = {
      projectName,
      projectPath,
      lastInteraction: /* @__PURE__ */ new Date(),
      savedConversation: []
    };
    const configPath = (0, import_path7.join)(projectPath, ".vanekit-config.json");
    (0, import_fs5.writeFileSync)(configPath, JSON.stringify(config, null, 2));
    console.log(`Configuration saved to ${configPath}`);
  } catch (error) {
    spinner.fail(`Failed to set up project: ${error.message}`);
    console.error(error);
  }
  console.log(`
  \u2728 Project "${projectName}" created successfully!
  
  Next steps:
    1. cd ${projectPath}
    2. npm run dev
  
  To continue the conversation with Vane:
    vanekit chat ${projectPath}  
  `);
}
async function startChat(config) {
  console.log(`
\u{1F4AC} Welcome to Vane Chat!
You're working on project: ${config.projectName}
`);
  const projectId = config.projectPath.split("/").pop() || config.projectName;
  console.log(`Using project ID: ${projectId}`);
  if (!config.apiKeys?.openai) {
    console.log("\u26A0\uFE0F API keys not configured. Setting them up now.");
    await configureAPIKeys(config);
  } else {
    process.env.OPENAI_API_KEY = config.apiKeys.openai;
    if (config.apiKeys.anthropic) {
      process.env.ANTHROPIC_API_KEY = config.apiKeys.anthropic;
    }
  }
  if (!config.memory) {
    config.memory = {
      toolUsage: {},
      agentUsage: {},
      errors: [],
      warnings: [],
      conversation: [],
      createdAt: (/* @__PURE__ */ new Date()).toISOString()
    };
  }
  const cliIntegration = createCLIIntegration(config);
  const saveConversation = async () => {
    const conversation = cliIntegration.getConversation();
    config.memory.conversation = conversation;
    config.memory.lastSaved = (/* @__PURE__ */ new Date()).toISOString();
    config.lastInteraction = /* @__PURE__ */ new Date();
    saveConfig(config);
  };
  let chatting = true;
  while (chatting) {
    const { message } = await import_inquirer3.default.prompt([
      {
        type: "input",
        name: "message",
        message: "\u{1F464} You:"
      }
    ]);
    if (message.toLowerCase() === "exit") {
      const spinner = (0, import_ora3.default)("Saving conversation before exit...").start();
      await saveConversation();
      spinner.succeed("Conversation saved");
      chatting = false;
      continue;
    }
    if (message.toLowerCase() === "help") {
      console.log(`
Available commands:
  exit - Exit the chat (auto-saves)
  deploy - Deploy your website
  save - Save the current conversation
  clear - Clear the conversation history
  generate <filename> - Generate a new file based on description
  install - Install dependencies in the project
  build - Build the project
  api - Configure API keys
  help - Show this help message
`);
      continue;
    }
    if (message.toLowerCase() === "save") {
      const spinner = (0, import_ora3.default)("Saving conversation...").start();
      await saveConversation();
      spinner.succeed("Conversation saved");
      continue;
    }
    if (message.toLowerCase() === "api") {
      await configureAPIKeys(config);
      console.log("\u2705 API keys updated");
      continue;
    }
    if (message.toLowerCase() === "clear") {
      config.savedConversation = [];
      const cliIntegration2 = createCLIIntegration(config);
      console.log("\u{1F9F9} Conversation history cleared");
      continue;
    }
    if (message.toLowerCase() === "install") {
      await installDependencies(config.projectPath);
      continue;
    }
    if (message.toLowerCase() === "build" || message.toLowerCase().match(/^build\s+--[\w-]+=?/)) {
      await buildProjectFiles(message, config);
      continue;
    }
    if (message.toLowerCase() === "deploy") {
      await handleDeploy(config, projectId);
      continue;
    }
    try {
      const response = await cliIntegration.processMessage(message);
      console.log(`\u{1F916} Assistant: ${response}`);
    } catch (error) {
      console.error("Error processing message:", error);
      console.log(
        `\u{1F916} Assistant: I encountered an error processing your request: ${error.message}`
      );
    }
    await saveConversation().catch(
      (err) => console.error("Failed to save conversation:", err.message)
    );
  }
  console.log("\u{1F44B} Thanks for using Vanekit! Goodbye.");
}
async function main() {
  console.log(`
  \u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557
  \u2551              VANE CLI                 \u2551
  \u2551                                       \u2551
  \u2551  Build, manage and deploy AI agents   \u2551
  \u2551                                       \u2551
  \u255A\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255D
`);
  const existingConfig = loadConfig();
  if (existingConfig) {
    console.log(`Found existing project: ${existingConfig.projectName}`);
    const { action } = await import_inquirer3.default.prompt([
      {
        type: "list",
        name: "action",
        message: "What would you like to do?",
        choices: [
          { name: "Continue working on this project", value: "continue" },
          { name: "Create a new project", value: "new" },
          { name: "Build project for deployment", value: "build" },
          { name: "Deploy project", value: "deploy" },
          { name: "Install dependencies", value: "install" },
          { name: "Exit", value: "exit" }
        ]
      }
    ]);
    switch (action) {
      case "continue":
        await startChat(existingConfig);
        break;
      case "new":
        await createProject();
        break;
      case "install":
        await installDependencies(existingConfig.projectPath);
        break;
      case "build":
        console.log("Starting build process...");
        const buildResult = await buildProject(existingConfig.projectPath, {
          projectName: existingConfig.projectName,
          skipDependencyPrompt: false
        });
        if (buildResult.status === "error") {
          console.error(`Build failed: ${buildResult.message}`);
        }
        break;
      case "deploy":
        await handleDeploy(existingConfig, existingConfig.projectName);
        break;
      case "exit":
        console.log("\u{1F44B} Goodbye!");
        process.exit(0);
        break;
    }
  } else {
    const { createNew } = await import_inquirer3.default.prompt([
      {
        type: "confirm",
        name: "createNew",
        message: "Would you like to create a new Vane project?",
        default: true
      }
    ]);
    if (createNew) {
      await createProject();
    } else {
      console.log("\u{1F44B} Goodbye!");
      process.exit(0);
    }
  }
}
main().catch((error) => {
  console.error("Fatal error:", error);
  process.exit(1);
});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  createProject,
  startChat
});
//# sourceMappingURL=cli.js.map
